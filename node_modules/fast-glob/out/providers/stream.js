"use strict";
function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}
Object.defineProperty(exports, "__esModule", {
    value: true
});
var stream_1 = require("stream");
var stream_2 = require("../readers/stream");
var provider_1 = require("./provider");
var ProviderStream = /*#__PURE__*/ function(_provider_1_default) {
    _inherits(ProviderStream, _provider_1_default);
    var _super = _create_super(ProviderStream);
    function ProviderStream() {
        _class_call_check(this, ProviderStream);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        _this._reader = new stream_2.default(_this._settings);
        return _this;
    }
    _create_class(ProviderStream, [
        {
            key: "read",
            value: function read(task) {
                var root = this._getRootDirectory(task);
                var options = this._getReaderOptions(task);
                var source = this.api(root, task, options);
                var destination = new stream_1.Readable({
                    objectMode: true,
                    read: function() {}
                });
                source.once('error', function(error) {
                    return destination.emit('error', error);
                }).on('data', function(entry) {
                    return destination.emit('data', options.transform(entry));
                }).once('end', function() {
                    return destination.emit('end');
                });
                destination.once('close', function() {
                    return source.destroy();
                });
                return destination;
            }
        },
        {
            key: "api",
            value: function api(root, task, options) {
                if (task.dynamic) {
                    return this._reader.dynamic(root, options);
                }
                return this._reader.static(task.patterns, options);
            }
        }
    ]);
    return ProviderStream;
}(provider_1.default);
exports.default = ProviderStream;
