'use strict';
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
var path = require('path');
var pathKey = require('path-key');
var npmRunPath = function(options) {
    options = _object_spread({
        cwd: process.cwd(),
        path: process.env[pathKey()],
        execPath: process.execPath
    }, options);
    var previous;
    var cwdPath = path.resolve(options.cwd);
    var result = [];
    while(previous !== cwdPath){
        result.push(path.join(cwdPath, 'node_modules/.bin'));
        previous = cwdPath;
        cwdPath = path.resolve(cwdPath, '..');
    }
    // Ensure the running `node` binary is used
    var execPathDir = path.resolve(options.cwd, options.execPath, '..');
    result.push(execPathDir);
    return result.concat(options.path).join(path.delimiter);
};
module.exports = npmRunPath;
// TODO: Remove this for the next major release
module.exports.default = npmRunPath;
module.exports.env = function(options) {
    options = _object_spread({
        env: process.env
    }, options);
    var env = _object_spread({}, options.env);
    var path = pathKey({
        env: env
    });
    options.path = env[path];
    env[path] = module.exports(options);
    return env;
};
