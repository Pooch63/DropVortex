'use strict';
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _to_array(arr) {
    return _array_with_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_rest();
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var path = require('path');
var childProcess = require('child_process');
var crossSpawn = require('cross-spawn');
var stripFinalNewline = require('strip-final-newline');
var npmRunPath = require('npm-run-path');
var onetime = require('onetime');
var makeError = require('./lib/error');
var normalizeStdio = require('./lib/stdio');
var _require = require('./lib/kill'), spawnedKill = _require.spawnedKill, spawnedCancel = _require.spawnedCancel, setupTimeout = _require.setupTimeout, validateTimeout = _require.validateTimeout, setExitHandler = _require.setExitHandler;
var _require1 = require('./lib/stream'), handleInput = _require1.handleInput, getSpawnedResult = _require1.getSpawnedResult, makeAllStream = _require1.makeAllStream, validateInputSync = _require1.validateInputSync;
var _require2 = require('./lib/promise'), mergePromise = _require2.mergePromise, getSpawnedPromise = _require2.getSpawnedPromise;
var _require3 = require('./lib/command'), joinCommand = _require3.joinCommand, parseCommand = _require3.parseCommand, getEscapedCommand = _require3.getEscapedCommand;
var DEFAULT_MAX_BUFFER = 1000 * 1000 * 100;
var getEnv = function(param) {
    var envOption = param.env, extendEnv = param.extendEnv, preferLocal = param.preferLocal, localDir = param.localDir, execPath = param.execPath;
    var env = extendEnv ? _object_spread({}, process.env, envOption) : envOption;
    if (preferLocal) {
        return npmRunPath.env({
            env: env,
            cwd: localDir,
            execPath: execPath
        });
    }
    return env;
};
var handleArguments = function(file, args) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var parsed = crossSpawn._parse(file, args, options);
    file = parsed.command;
    args = parsed.args;
    options = parsed.options;
    options = _object_spread({
        maxBuffer: DEFAULT_MAX_BUFFER,
        buffer: true,
        stripFinalNewline: true,
        extendEnv: true,
        preferLocal: false,
        localDir: options.cwd || process.cwd(),
        execPath: process.execPath,
        encoding: 'utf8',
        reject: true,
        cleanup: true,
        all: false,
        windowsHide: true
    }, options);
    options.env = getEnv(options);
    options.stdio = normalizeStdio(options);
    if (process.platform === 'win32' && path.basename(file, '.exe') === 'cmd') {
        // #116
        args.unshift('/q');
    }
    return {
        file: file,
        args: args,
        options: options,
        parsed: parsed
    };
};
var handleOutput = function(options, value, error) {
    if (typeof value !== 'string' && !Buffer.isBuffer(value)) {
        // When `execa.sync()` errors, we normalize it to '' to mimic `execa()`
        return error === undefined ? undefined : '';
    }
    if (options.stripFinalNewline) {
        return stripFinalNewline(value);
    }
    return value;
};
var execa = function(file, args, options) {
    var parsed = handleArguments(file, args, options);
    var command = joinCommand(file, args);
    var escapedCommand = getEscapedCommand(file, args);
    validateTimeout(parsed.options);
    var spawned;
    try {
        spawned = childProcess.spawn(parsed.file, parsed.args, parsed.options);
    } catch (error) {
        // Ensure the returned error is always both a promise and a child process
        var dummySpawned = new childProcess.ChildProcess();
        var errorPromise = Promise.reject(makeError({
            error: error,
            stdout: '',
            stderr: '',
            all: '',
            command: command,
            escapedCommand: escapedCommand,
            parsed: parsed,
            timedOut: false,
            isCanceled: false,
            killed: false
        }));
        return mergePromise(dummySpawned, errorPromise);
    }
    var spawnedPromise = getSpawnedPromise(spawned);
    var timedPromise = setupTimeout(spawned, parsed.options, spawnedPromise);
    var processDone = setExitHandler(spawned, parsed.options, timedPromise);
    var context = {
        isCanceled: false
    };
    spawned.kill = spawnedKill.bind(null, spawned.kill.bind(spawned));
    spawned.cancel = spawnedCancel.bind(null, spawned, context);
    var handlePromise = function() {
        var _ref = _async_to_generator(function() {
            var _ref, _ref_, _$error, exitCode, signal, timedOut, stdoutResult, stderrResult, allResult, stdout, stderr, all, returnedError;
            return _ts_generator(this, function(_state) {
                switch(_state.label){
                    case 0:
                        return [
                            4,
                            getSpawnedResult(spawned, parsed.options, processDone)
                        ];
                    case 1:
                        _ref = _sliced_to_array.apply(void 0, [
                            _state.sent(),
                            4
                        ]), _ref_ = _ref[0], _$error = _ref_.error, exitCode = _ref_.exitCode, signal = _ref_.signal, timedOut = _ref_.timedOut, stdoutResult = _ref[1], stderrResult = _ref[2], allResult = _ref[3];
                        stdout = handleOutput(parsed.options, stdoutResult);
                        stderr = handleOutput(parsed.options, stderrResult);
                        all = handleOutput(parsed.options, allResult);
                        if (_$error || exitCode !== 0 || signal !== null) {
                            returnedError = makeError({
                                error: _$error,
                                exitCode: exitCode,
                                signal: signal,
                                stdout: stdout,
                                stderr: stderr,
                                all: all,
                                command: command,
                                escapedCommand: escapedCommand,
                                parsed: parsed,
                                timedOut: timedOut,
                                isCanceled: context.isCanceled,
                                killed: spawned.killed
                            });
                            if (!parsed.options.reject) {
                                return [
                                    2,
                                    returnedError
                                ];
                            }
                            throw returnedError;
                        }
                        return [
                            2,
                            {
                                command: command,
                                escapedCommand: escapedCommand,
                                exitCode: 0,
                                stdout: stdout,
                                stderr: stderr,
                                all: all,
                                failed: false,
                                timedOut: false,
                                isCanceled: false,
                                killed: false
                            }
                        ];
                }
            });
        });
        return function handlePromise() {
            return _ref.apply(this, arguments);
        };
    }();
    var handlePromiseOnce = onetime(handlePromise);
    handleInput(spawned, parsed.options.input);
    spawned.all = makeAllStream(spawned, parsed.options);
    return mergePromise(spawned, handlePromiseOnce);
};
module.exports = execa;
module.exports.sync = function(file, args, options) {
    var parsed = handleArguments(file, args, options);
    var command = joinCommand(file, args);
    var escapedCommand = getEscapedCommand(file, args);
    validateInputSync(parsed.options);
    var result;
    try {
        result = childProcess.spawnSync(parsed.file, parsed.args, parsed.options);
    } catch (error) {
        throw makeError({
            error: error,
            stdout: '',
            stderr: '',
            all: '',
            command: command,
            escapedCommand: escapedCommand,
            parsed: parsed,
            timedOut: false,
            isCanceled: false,
            killed: false
        });
    }
    var stdout = handleOutput(parsed.options, result.stdout, result.error);
    var stderr = handleOutput(parsed.options, result.stderr, result.error);
    if (result.error || result.status !== 0 || result.signal !== null) {
        var _$error = makeError({
            stdout: stdout,
            stderr: stderr,
            error: result.error,
            signal: result.signal,
            exitCode: result.status,
            command: command,
            escapedCommand: escapedCommand,
            parsed: parsed,
            timedOut: result.error && result.error.code === 'ETIMEDOUT',
            isCanceled: false,
            killed: result.signal !== null
        });
        if (!parsed.options.reject) {
            return _$error;
        }
        throw _$error;
    }
    return {
        command: command,
        escapedCommand: escapedCommand,
        exitCode: 0,
        stdout: stdout,
        stderr: stderr,
        failed: false,
        timedOut: false,
        isCanceled: false,
        killed: false
    };
};
module.exports.command = function(command, options) {
    var _parseCommand = _to_array(parseCommand(command)), file = _parseCommand[0], args = _parseCommand.slice(1);
    return execa(file, args, options);
};
module.exports.commandSync = function(command, options) {
    var _parseCommand = _to_array(parseCommand(command)), file = _parseCommand[0], args = _parseCommand.slice(1);
    return execa.sync(file, args, options);
};
module.exports.node = function(scriptPath, args) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    if (args && !Array.isArray(args) && (typeof args === "undefined" ? "undefined" : _type_of(args)) === 'object') {
        options = args;
        args = [];
    }
    var stdio = normalizeStdio.node(options);
    var defaultExecArgv = process.execArgv.filter(function(arg) {
        return !arg.startsWith('--inspect');
    });
    var _options_nodePath = options.nodePath, nodePath = _options_nodePath === void 0 ? process.execPath : _options_nodePath, _options_nodeOptions = options.nodeOptions, nodeOptions = _options_nodeOptions === void 0 ? defaultExecArgv : _options_nodeOptions;
    return execa(nodePath, _to_consumable_array(nodeOptions).concat([
        scriptPath
    ], _to_consumable_array(Array.isArray(args) ? args : [])), _object_spread_props(_object_spread({}, options), {
        stdin: undefined,
        stdout: undefined,
        stderr: undefined,
        stdio: stdio,
        shell: false
    }));
};
