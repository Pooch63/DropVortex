'use strict';
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var isStream = require('is-stream');
var getStream = require('get-stream');
var mergeStream = require('merge-stream');
// `input` option
var handleInput = function(spawned, input) {
    // Checking for stdin is workaround for https://github.com/nodejs/node/issues/26852
    // @todo remove `|| spawned.stdin === undefined` once we drop support for Node.js <=12.2.0
    if (input === undefined || spawned.stdin === undefined) {
        return;
    }
    if (isStream(input)) {
        input.pipe(spawned.stdin);
    } else {
        spawned.stdin.end(input);
    }
};
// `all` interleaves `stdout` and `stderr`
var makeAllStream = function(spawned, param) {
    var all = param.all;
    if (!all || !spawned.stdout && !spawned.stderr) {
        return;
    }
    var mixed = mergeStream();
    if (spawned.stdout) {
        mixed.add(spawned.stdout);
    }
    if (spawned.stderr) {
        mixed.add(spawned.stderr);
    }
    return mixed;
};
// On failure, `result.stdout|stderr|all` should contain the currently buffered stream
var getBufferedData = function() {
    var _ref = _async_to_generator(function(stream, streamPromise) {
        var error;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (!stream) {
                        return [
                            2
                        ];
                    }
                    stream.destroy();
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        3,
                        ,
                        4
                    ]);
                    return [
                        4,
                        streamPromise
                    ];
                case 2:
                    return [
                        2,
                        _state.sent()
                    ];
                case 3:
                    error = _state.sent();
                    return [
                        2,
                        error.bufferedData
                    ];
                case 4:
                    return [
                        2
                    ];
            }
        });
    });
    return function getBufferedData(stream, streamPromise) {
        return _ref.apply(this, arguments);
    };
}();
var getStreamPromise = function(stream, param) {
    var encoding = param.encoding, buffer = param.buffer, maxBuffer = param.maxBuffer;
    if (!stream || !buffer) {
        return;
    }
    if (encoding) {
        return getStream(stream, {
            encoding: encoding,
            maxBuffer: maxBuffer
        });
    }
    return getStream.buffer(stream, {
        maxBuffer: maxBuffer
    });
};
// Retrieve result of child process: exit code, signal, error, streams (stdout/stderr/all)
var getSpawnedResult = function() {
    var _ref = _async_to_generator(function(param, param1, processDone) {
        var stdout, stderr, all, encoding, buffer, maxBuffer, stdoutPromise, stderrPromise, allPromise, error;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    stdout = param.stdout, stderr = param.stderr, all = param.all, encoding = param1.encoding, buffer = param1.buffer, maxBuffer = param1.maxBuffer;
                    stdoutPromise = getStreamPromise(stdout, {
                        encoding: encoding,
                        buffer: buffer,
                        maxBuffer: maxBuffer
                    });
                    stderrPromise = getStreamPromise(stderr, {
                        encoding: encoding,
                        buffer: buffer,
                        maxBuffer: maxBuffer
                    });
                    allPromise = getStreamPromise(all, {
                        encoding: encoding,
                        buffer: buffer,
                        maxBuffer: maxBuffer * 2
                    });
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        3,
                        ,
                        4
                    ]);
                    return [
                        4,
                        Promise.all([
                            processDone,
                            stdoutPromise,
                            stderrPromise,
                            allPromise
                        ])
                    ];
                case 2:
                    return [
                        2,
                        _state.sent()
                    ];
                case 3:
                    error = _state.sent();
                    return [
                        2,
                        Promise.all([
                            {
                                error: error,
                                signal: error.signal,
                                timedOut: error.timedOut
                            },
                            getBufferedData(stdout, stdoutPromise),
                            getBufferedData(stderr, stderrPromise),
                            getBufferedData(all, allPromise)
                        ])
                    ];
                case 4:
                    return [
                        2
                    ];
            }
        });
    });
    return function getSpawnedResult(_, _1, processDone) {
        return _ref.apply(this, arguments);
    };
}();
var validateInputSync = function(param) {
    var input = param.input;
    if (isStream(input)) {
        throw new TypeError('The `input` option cannot be a stream in sync mode');
    }
};
module.exports = {
    handleInput: handleInput,
    makeAllStream: makeAllStream,
    getSpawnedResult: getSpawnedResult,
    validateInputSync: validateInputSync
};
