'use strict';
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
var aliases = [
    'stdin',
    'stdout',
    'stderr'
];
var hasAlias = function(options) {
    return aliases.some(function(alias) {
        return options[alias] !== undefined;
    });
};
var normalizeStdio = function(options) {
    if (!options) {
        return;
    }
    var stdio = options.stdio;
    if (stdio === undefined) {
        return aliases.map(function(alias) {
            return options[alias];
        });
    }
    if (hasAlias(options)) {
        throw new Error("It's not possible to provide `stdio` in combination with one of ".concat(aliases.map(function(alias) {
            return "`".concat(alias, "`");
        }).join(', ')));
    }
    if (typeof stdio === 'string') {
        return stdio;
    }
    if (!Array.isArray(stdio)) {
        throw new TypeError("Expected `stdio` to be of type `string` or `Array`, got `".concat(typeof stdio === "undefined" ? "undefined" : _type_of(stdio), "`"));
    }
    var length = Math.max(stdio.length, aliases.length);
    return Array.from({
        length: length
    }, function(value, index) {
        return stdio[index];
    });
};
module.exports = normalizeStdio;
// `ipc` is pushed unless it is already present
module.exports.node = function(options) {
    var stdio = normalizeStdio(options);
    if (stdio === 'ipc') {
        return 'ipc';
    }
    if (stdio === undefined || typeof stdio === 'string') {
        return [
            stdio,
            stdio,
            stdio,
            'ipc'
        ];
    }
    if (stdio.includes('ipc')) {
        return stdio;
    }
    return _to_consumable_array(stdio).concat([
        'ipc'
    ]);
};
