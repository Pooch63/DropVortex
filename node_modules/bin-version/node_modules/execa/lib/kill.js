'use strict';
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var os = require('os');
var onExit = require('signal-exit');
var DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
// Monkey-patches `childProcess.kill()` to add `forceKillAfterTimeout` behavior
var spawnedKill = function(kill) {
    var signal = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'SIGTERM', options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var killResult = kill(signal);
    setKillTimeout(kill, signal, options, killResult);
    return killResult;
};
var setKillTimeout = function(kill, signal, options, killResult) {
    if (!shouldForceKill(signal, options, killResult)) {
        return;
    }
    var timeout = getForceKillAfterTimeout(options);
    var t = setTimeout(function() {
        kill('SIGKILL');
    }, timeout);
    // Guarded because there's no `.unref()` when `execa` is used in the renderer
    // process in Electron. This cannot be tested since we don't run tests in
    // Electron.
    // istanbul ignore else
    if (t.unref) {
        t.unref();
    }
};
var shouldForceKill = function(signal, param, killResult) {
    var forceKillAfterTimeout = param.forceKillAfterTimeout;
    return isSigterm(signal) && forceKillAfterTimeout !== false && killResult;
};
var isSigterm = function(signal) {
    return signal === os.constants.signals.SIGTERM || typeof signal === 'string' && signal.toUpperCase() === 'SIGTERM';
};
var getForceKillAfterTimeout = function(param) {
    var _param_forceKillAfterTimeout = param.forceKillAfterTimeout, forceKillAfterTimeout = _param_forceKillAfterTimeout === void 0 ? true : _param_forceKillAfterTimeout;
    if (forceKillAfterTimeout === true) {
        return DEFAULT_FORCE_KILL_TIMEOUT;
    }
    if (!Number.isFinite(forceKillAfterTimeout) || forceKillAfterTimeout < 0) {
        throw new TypeError("Expected the `forceKillAfterTimeout` option to be a non-negative integer, got `".concat(forceKillAfterTimeout, "` (").concat(typeof forceKillAfterTimeout === "undefined" ? "undefined" : _type_of(forceKillAfterTimeout), ")"));
    }
    return forceKillAfterTimeout;
};
// `childProcess.cancel()`
var spawnedCancel = function(spawned, context) {
    var killResult = spawned.kill();
    if (killResult) {
        context.isCanceled = true;
    }
};
var timeoutKill = function(spawned, signal, reject) {
    spawned.kill(signal);
    reject(Object.assign(new Error('Timed out'), {
        timedOut: true,
        signal: signal
    }));
};
// `timeout` option handling
var setupTimeout = function(spawned, param, spawnedPromise) {
    var timeout = param.timeout, _param_killSignal = param.killSignal, killSignal = _param_killSignal === void 0 ? 'SIGTERM' : _param_killSignal;
    if (timeout === 0 || timeout === undefined) {
        return spawnedPromise;
    }
    var timeoutId;
    var timeoutPromise = new Promise(function(resolve, reject) {
        timeoutId = setTimeout(function() {
            timeoutKill(spawned, killSignal, reject);
        }, timeout);
    });
    var safeSpawnedPromise = spawnedPromise.finally(function() {
        clearTimeout(timeoutId);
    });
    return Promise.race([
        timeoutPromise,
        safeSpawnedPromise
    ]);
};
var validateTimeout = function(param) {
    var timeout = param.timeout;
    if (timeout !== undefined && (!Number.isFinite(timeout) || timeout < 0)) {
        throw new TypeError("Expected the `timeout` option to be a non-negative integer, got `".concat(timeout, "` (").concat(typeof timeout === "undefined" ? "undefined" : _type_of(timeout), ")"));
    }
};
// `cleanup` option handling
var setExitHandler = function() {
    var _ref = _async_to_generator(function(spawned, param, timedPromise) {
        var cleanup, detached, removeExitHandler;
        return _ts_generator(this, function(_state) {
            cleanup = param.cleanup, detached = param.detached;
            if (!cleanup || detached) {
                return [
                    2,
                    timedPromise
                ];
            }
            removeExitHandler = onExit(function() {
                spawned.kill();
            });
            return [
                2,
                timedPromise.finally(function() {
                    removeExitHandler();
                })
            ];
        });
    });
    return function setExitHandler(spawned, _, timedPromise) {
        return _ref.apply(this, arguments);
    };
}();
module.exports = {
    spawnedKill: spawnedKill,
    spawnedCancel: spawnedCancel,
    setupTimeout: setupTimeout,
    validateTimeout: validateTimeout,
    setExitHandler: setExitHandler
};
