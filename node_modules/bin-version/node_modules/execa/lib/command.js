'use strict';
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
var normalizeArgs = function(file) {
    var args = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    if (!Array.isArray(args)) {
        return [
            file
        ];
    }
    return [
        file
    ].concat(_to_consumable_array(args));
};
var NO_ESCAPE_REGEXP = /^[\w.-]+$/;
var DOUBLE_QUOTES_REGEXP = /"/g;
var escapeArg = function(arg) {
    if (typeof arg !== 'string' || NO_ESCAPE_REGEXP.test(arg)) {
        return arg;
    }
    return '"'.concat(arg.replace(DOUBLE_QUOTES_REGEXP, '\\"'), '"');
};
var joinCommand = function(file, args) {
    return normalizeArgs(file, args).join(' ');
};
var getEscapedCommand = function(file, args) {
    return normalizeArgs(file, args).map(function(arg) {
        return escapeArg(arg);
    }).join(' ');
};
var SPACES_REGEXP = / +/g;
// Handle `execa.command()`
var parseCommand = function(command) {
    var tokens = [];
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = command.trim().split(SPACES_REGEXP)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var token = _step.value;
            // Allow spaces to be escaped by a backslash if not meant as a delimiter
            var previousToken = tokens[tokens.length - 1];
            if (previousToken && previousToken.endsWith('\\')) {
                // Merge previous token with current one
                tokens[tokens.length - 1] = "".concat(previousToken.slice(0, -1), " ").concat(token);
            } else {
                tokens.push(token);
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return tokens;
};
module.exports = {
    joinCommand: joinCommand,
    getEscapedCommand: getEscapedCommand,
    parseCommand: parseCommand
};
