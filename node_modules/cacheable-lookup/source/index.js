'use strict';
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var _require = require('dns'), V4MAPPED = _require.V4MAPPED, ADDRCONFIG = _require.ADDRCONFIG, ALL = _require.ALL, _require_promises = _require.promises, AsyncResolver = _require_promises.Resolver, dnsLookup = _require.lookup;
var promisify = require('util').promisify;
var os = require('os');
var kCacheableLookupCreateConnection = Symbol('cacheableLookupCreateConnection');
var kCacheableLookupInstance = Symbol('cacheableLookupInstance');
var kExpires = Symbol('expires');
var supportsALL = typeof ALL === 'number';
var verifyAgent = function(agent) {
    if (!(agent && typeof agent.createConnection === 'function')) {
        throw new Error('Expected an Agent instance as the first argument');
    }
};
var map4to6 = function(entries) {
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = entries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var entry = _step.value;
            if (entry.family === 6) {
                continue;
            }
            entry.address = "::ffff:".concat(entry.address);
            entry.family = 6;
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
};
var getIfaceInfo = function() {
    var has4 = false;
    var has6 = false;
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = Object.values(os.networkInterfaces())[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var device = _step.value;
            var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
            try {
                for(var _iterator1 = device[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                    var iface = _step1.value;
                    if (iface.internal) {
                        continue;
                    }
                    if (iface.family === 'IPv6') {
                        has6 = true;
                    } else {
                        has4 = true;
                    }
                    if (has4 && has6) {
                        return {
                            has4: has4,
                            has6: has6
                        };
                    }
                }
            } catch (err) {
                _didIteratorError1 = true;
                _iteratorError1 = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                        _iterator1.return();
                    }
                } finally{
                    if (_didIteratorError1) {
                        throw _iteratorError1;
                    }
                }
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return {
        has4: has4,
        has6: has6
    };
};
var isIterable = function(map) {
    return Symbol.iterator in map;
};
var ttl = {
    ttl: true
};
var all = {
    all: true
};
var CacheableLookup = /*#__PURE__*/ function() {
    function CacheableLookup() {
        var _this = this;
        var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref_cache = _ref.cache, cache = _ref_cache === void 0 ? new Map() : _ref_cache, _ref_maxTtl = _ref.maxTtl, maxTtl = _ref_maxTtl === void 0 ? Infinity : _ref_maxTtl, _ref_fallbackDuration = _ref.fallbackDuration, fallbackDuration = _ref_fallbackDuration === void 0 ? 3600 : _ref_fallbackDuration, _ref_errorTtl = _ref.errorTtl, errorTtl = _ref_errorTtl === void 0 ? 0.15 : _ref_errorTtl, _ref_resolver = _ref.resolver, resolver = _ref_resolver === void 0 ? new AsyncResolver() : _ref_resolver, _ref_lookup = _ref.lookup, lookup = _ref_lookup === void 0 ? dnsLookup : _ref_lookup;
        _class_call_check(this, CacheableLookup);
        this.maxTtl = maxTtl;
        this.errorTtl = errorTtl;
        this._cache = cache;
        this._resolver = resolver;
        this._dnsLookup = promisify(lookup);
        if (_instanceof(this._resolver, AsyncResolver)) {
            this._resolve4 = this._resolver.resolve4.bind(this._resolver);
            this._resolve6 = this._resolver.resolve6.bind(this._resolver);
        } else {
            this._resolve4 = promisify(this._resolver.resolve4.bind(this._resolver));
            this._resolve6 = promisify(this._resolver.resolve6.bind(this._resolver));
        }
        this._iface = getIfaceInfo();
        this._pending = {};
        this._nextRemovalTime = false;
        this._hostnamesToFallback = new Set();
        if (fallbackDuration < 1) {
            this._fallback = false;
        } else {
            this._fallback = true;
            var interval = setInterval(function() {
                _this._hostnamesToFallback.clear();
            }, fallbackDuration * 1000);
            /* istanbul ignore next: There is no `interval.unref()` when running inside an Electron renderer */ if (interval.unref) {
                interval.unref();
            }
        }
        this.lookup = this.lookup.bind(this);
        this.lookupAsync = this.lookupAsync.bind(this);
    }
    _create_class(CacheableLookup, [
        {
            key: "servers",
            get: function get() {
                return this._resolver.getServers();
            },
            set: function set(servers) {
                this.clear();
                this._resolver.setServers(servers);
            }
        },
        {
            key: "lookup",
            value: function lookup(hostname, options, callback) {
                if (typeof options === 'function') {
                    callback = options;
                    options = {};
                } else if (typeof options === 'number') {
                    options = {
                        family: options
                    };
                }
                if (!callback) {
                    throw new Error('Callback must be a function.');
                }
                // eslint-disable-next-line promise/prefer-await-to-then
                this.lookupAsync(hostname, options).then(function(result) {
                    if (options.all) {
                        callback(null, result);
                    } else {
                        callback(null, result.address, result.family, result.expires, result.ttl);
                    }
                }, callback);
            }
        },
        {
            key: "lookupAsync",
            value: function lookupAsync(hostname) {
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                var _this = this;
                return _async_to_generator(function() {
                    var cached, filtered, _iface, error;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (typeof options === 'number') {
                                    options = {
                                        family: options
                                    };
                                }
                                return [
                                    4,
                                    _this.query(hostname)
                                ];
                            case 1:
                                cached = _state.sent();
                                if (options.family === 6) {
                                    filtered = cached.filter(function(entry) {
                                        return entry.family === 6;
                                    });
                                    if (options.hints & V4MAPPED) {
                                        if (supportsALL && options.hints & ALL || filtered.length === 0) {
                                            map4to6(cached);
                                        } else {
                                            cached = filtered;
                                        }
                                    } else {
                                        cached = filtered;
                                    }
                                } else if (options.family === 4) {
                                    cached = cached.filter(function(entry) {
                                        return entry.family === 4;
                                    });
                                }
                                if (options.hints & ADDRCONFIG) {
                                    _iface = _this._iface;
                                    cached = cached.filter(function(entry) {
                                        return entry.family === 6 ? _iface.has6 : _iface.has4;
                                    });
                                }
                                if (cached.length === 0) {
                                    error = new Error("cacheableLookup ENOTFOUND ".concat(hostname));
                                    error.code = 'ENOTFOUND';
                                    error.hostname = hostname;
                                    throw error;
                                }
                                if (options.all) {
                                    return [
                                        2,
                                        cached
                                    ];
                                }
                                return [
                                    2,
                                    cached[0]
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "query",
            value: function query(hostname) {
                var _this = this;
                return _async_to_generator(function() {
                    var cached, pending, newPromise;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    _this._cache.get(hostname)
                                ];
                            case 1:
                                cached = _state.sent();
                                if (!!cached) return [
                                    3,
                                    7
                                ];
                                pending = _this._pending[hostname];
                                if (!pending) return [
                                    3,
                                    3
                                ];
                                return [
                                    4,
                                    pending
                                ];
                            case 2:
                                cached = _state.sent();
                                return [
                                    3,
                                    7
                                ];
                            case 3:
                                newPromise = _this.queryAndCache(hostname);
                                _this._pending[hostname] = newPromise;
                                _state.label = 4;
                            case 4:
                                _state.trys.push([
                                    4,
                                    ,
                                    6,
                                    7
                                ]);
                                return [
                                    4,
                                    newPromise
                                ];
                            case 5:
                                cached = _state.sent();
                                return [
                                    3,
                                    7
                                ];
                            case 6:
                                delete _this._pending[hostname];
                                return [
                                    7
                                ];
                            case 7:
                                cached = cached.map(function(entry) {
                                    return _object_spread({}, entry);
                                });
                                return [
                                    2,
                                    cached
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "_resolve",
            value: function _resolve(hostname) {
                var _this = this;
                return _async_to_generator(function() {
                    var wrap, _ref, A, AAAA, aTtl, aaaaTtl, cacheTtl, now, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, entry, _iteratorNormalCompletion1, _didIteratorError1, _iteratorError1, _iterator1, _step1, entry1;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                wrap = function() {
                                    var _ref = _async_to_generator(function(promise) {
                                        var error;
                                        return _ts_generator(this, function(_state) {
                                            switch(_state.label){
                                                case 0:
                                                    _state.trys.push([
                                                        0,
                                                        2,
                                                        ,
                                                        3
                                                    ]);
                                                    return [
                                                        4,
                                                        promise
                                                    ];
                                                case 1:
                                                    return [
                                                        2,
                                                        _state.sent()
                                                    ];
                                                case 2:
                                                    error = _state.sent();
                                                    if (error.code === 'ENODATA' || error.code === 'ENOTFOUND') {
                                                        return [
                                                            2,
                                                            []
                                                        ];
                                                    }
                                                    throw error;
                                                case 3:
                                                    return [
                                                        2
                                                    ];
                                            }
                                        });
                                    });
                                    return function wrap(promise) {
                                        return _ref.apply(this, arguments);
                                    };
                                }();
                                return [
                                    4,
                                    Promise.all([
                                        _this._resolve4(hostname, ttl),
                                        _this._resolve6(hostname, ttl)
                                    ].map(function(promise) {
                                        return wrap(promise);
                                    }))
                                ];
                            case 1:
                                _ref = _sliced_to_array.apply(void 0, [
                                    _state.sent(),
                                    2
                                ]), A = _ref[0], AAAA = _ref[1];
                                aTtl = 0;
                                aaaaTtl = 0;
                                cacheTtl = 0;
                                now = Date.now();
                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                try {
                                    for(_iterator = A[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                        entry = _step.value;
                                        entry.family = 4;
                                        entry.expires = now + entry.ttl * 1000;
                                        aTtl = Math.max(aTtl, entry.ttl);
                                    }
                                } catch (err) {
                                    _didIteratorError = true;
                                    _iteratorError = err;
                                } finally{
                                    try {
                                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                                            _iterator.return();
                                        }
                                    } finally{
                                        if (_didIteratorError) {
                                            throw _iteratorError;
                                        }
                                    }
                                }
                                _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                                try {
                                    for(_iterator1 = AAAA[Symbol.iterator](); !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                                        entry1 = _step1.value;
                                        entry1.family = 6;
                                        entry1.expires = now + entry1.ttl * 1000;
                                        aaaaTtl = Math.max(aaaaTtl, entry1.ttl);
                                    }
                                } catch (err) {
                                    _didIteratorError1 = true;
                                    _iteratorError1 = err;
                                } finally{
                                    try {
                                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                            _iterator1.return();
                                        }
                                    } finally{
                                        if (_didIteratorError1) {
                                            throw _iteratorError1;
                                        }
                                    }
                                }
                                if (A.length > 0) {
                                    if (AAAA.length > 0) {
                                        cacheTtl = Math.min(aTtl, aaaaTtl);
                                    } else {
                                        cacheTtl = aTtl;
                                    }
                                } else {
                                    cacheTtl = aaaaTtl;
                                }
                                return [
                                    2,
                                    {
                                        entries: _to_consumable_array(A).concat(_to_consumable_array(AAAA)),
                                        cacheTtl: cacheTtl
                                    }
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "_lookup",
            value: function _lookup(hostname) {
                var _this = this;
                return _async_to_generator(function() {
                    var entries, _;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _state.trys.push([
                                    0,
                                    2,
                                    ,
                                    3
                                ]);
                                return [
                                    4,
                                    _this._dnsLookup(hostname, {
                                        all: true
                                    })
                                ];
                            case 1:
                                entries = _state.sent();
                                return [
                                    2,
                                    {
                                        entries: entries,
                                        cacheTtl: 0
                                    }
                                ];
                            case 2:
                                _ = _state.sent();
                                return [
                                    2,
                                    {
                                        entries: [],
                                        cacheTtl: 0
                                    }
                                ];
                            case 3:
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "_set",
            value: function _set(hostname, data, cacheTtl) {
                var _this = this;
                return _async_to_generator(function() {
                    var error;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (!(_this.maxTtl > 0 && cacheTtl > 0)) return [
                                    3,
                                    5
                                ];
                                cacheTtl = Math.min(cacheTtl, _this.maxTtl) * 1000;
                                data[kExpires] = Date.now() + cacheTtl;
                                _state.label = 1;
                            case 1:
                                _state.trys.push([
                                    1,
                                    3,
                                    ,
                                    4
                                ]);
                                return [
                                    4,
                                    _this._cache.set(hostname, data, cacheTtl)
                                ];
                            case 2:
                                _state.sent();
                                return [
                                    3,
                                    4
                                ];
                            case 3:
                                error = _state.sent();
                                _this.lookupAsync = /*#__PURE__*/ _async_to_generator(function() {
                                    var cacheError;
                                    return _ts_generator(this, function(_state) {
                                        cacheError = new Error('Cache Error. Please recreate the CacheableLookup instance.');
                                        cacheError.cause = error;
                                        throw cacheError;
                                    });
                                });
                                return [
                                    3,
                                    4
                                ];
                            case 4:
                                if (isIterable(_this._cache)) {
                                    _this._tick(cacheTtl);
                                }
                                _state.label = 5;
                            case 5:
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "queryAndCache",
            value: function queryAndCache(hostname) {
                var _this = this;
                return _async_to_generator(function() {
                    var query, cacheTtl;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (_this._hostnamesToFallback.has(hostname)) {
                                    return [
                                        2,
                                        _this._dnsLookup(hostname, all)
                                    ];
                                }
                                return [
                                    4,
                                    _this._resolve(hostname)
                                ];
                            case 1:
                                query = _state.sent();
                                if (!(query.entries.length === 0 && _this._fallback)) return [
                                    3,
                                    3
                                ];
                                return [
                                    4,
                                    _this._lookup(hostname)
                                ];
                            case 2:
                                query = _state.sent();
                                if (query.entries.length !== 0) {
                                    // Use `dns.lookup(...)` for that particular hostname
                                    _this._hostnamesToFallback.add(hostname);
                                }
                                _state.label = 3;
                            case 3:
                                cacheTtl = query.entries.length === 0 ? _this.errorTtl : query.cacheTtl;
                                return [
                                    4,
                                    _this._set(hostname, query.entries, cacheTtl)
                                ];
                            case 4:
                                _state.sent();
                                return [
                                    2,
                                    query.entries
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "_tick",
            value: function _tick(ms) {
                var _this = this;
                var nextRemovalTime = this._nextRemovalTime;
                if (!nextRemovalTime || ms < nextRemovalTime) {
                    clearTimeout(this._removalTimeout);
                    this._nextRemovalTime = ms;
                    this._removalTimeout = setTimeout(function() {
                        _this._nextRemovalTime = false;
                        var nextExpiry = Infinity;
                        var now = Date.now();
                        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                        try {
                            for(var _iterator = _this._cache[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                var _step_value = _sliced_to_array(_step.value, 2), hostname = _step_value[0], entries = _step_value[1];
                                var expires = entries[kExpires];
                                if (now >= expires) {
                                    _this._cache.delete(hostname);
                                } else if (expires < nextExpiry) {
                                    nextExpiry = expires;
                                }
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            } finally{
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                        if (nextExpiry !== Infinity) {
                            _this._tick(nextExpiry - now);
                        }
                    }, ms);
                    /* istanbul ignore next: There is no `timeout.unref()` when running inside an Electron renderer */ if (this._removalTimeout.unref) {
                        this._removalTimeout.unref();
                    }
                }
            }
        },
        {
            key: "install",
            value: function install(agent) {
                var _this = this;
                verifyAgent(agent);
                if (kCacheableLookupCreateConnection in agent) {
                    throw new Error('CacheableLookup has been already installed');
                }
                agent[kCacheableLookupCreateConnection] = agent.createConnection;
                agent[kCacheableLookupInstance] = this;
                agent.createConnection = function(options, callback) {
                    if (!('lookup' in options)) {
                        options.lookup = _this.lookup;
                    }
                    return agent[kCacheableLookupCreateConnection](options, callback);
                };
            }
        },
        {
            key: "uninstall",
            value: function uninstall(agent) {
                verifyAgent(agent);
                if (agent[kCacheableLookupCreateConnection]) {
                    if (agent[kCacheableLookupInstance] !== this) {
                        throw new Error('The agent is not owned by this CacheableLookup instance');
                    }
                    agent.createConnection = agent[kCacheableLookupCreateConnection];
                    delete agent[kCacheableLookupCreateConnection];
                    delete agent[kCacheableLookupInstance];
                }
            }
        },
        {
            key: "updateInterfaceInfo",
            value: function updateInterfaceInfo() {
                var _iface = this._iface;
                this._iface = getIfaceInfo();
                if (_iface.has4 && !this._iface.has4 || _iface.has6 && !this._iface.has6) {
                    this._cache.clear();
                }
            }
        },
        {
            key: "clear",
            value: function clear(hostname) {
                if (hostname) {
                    this._cache.delete(hostname);
                    return;
                }
                this._cache.clear();
            }
        }
    ]);
    return CacheableLookup;
}();
module.exports = CacheableLookup;
module.exports.default = CacheableLookup;
