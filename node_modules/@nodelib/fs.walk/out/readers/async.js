"use strict";
function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}
Object.defineProperty(exports, "__esModule", {
    value: true
});
var events_1 = require("events");
var fsScandir = require("@nodelib/fs.scandir");
var fastq = require("fastq");
var common = require("./common");
var reader_1 = require("./reader");
var AsyncReader = /*#__PURE__*/ function(_reader_1_default) {
    _inherits(AsyncReader, _reader_1_default);
    var _super = _create_super(AsyncReader);
    function AsyncReader(_root, _settings) {
        _class_call_check(this, AsyncReader);
        var _this;
        _this = _super.call(this, _root, _settings);
        _this._settings = _settings;
        _this._scandir = fsScandir.scandir;
        _this._emitter = new events_1.EventEmitter();
        _this._queue = fastq(_this._worker.bind(_assert_this_initialized(_this)), _this._settings.concurrency);
        _this._isFatalError = false;
        _this._isDestroyed = false;
        _this._queue.drain = function() {
            if (!_this._isFatalError) {
                _this._emitter.emit('end');
            }
        };
        return _this;
    }
    _create_class(AsyncReader, [
        {
            key: "read",
            value: function read() {
                var _this = this;
                this._isFatalError = false;
                this._isDestroyed = false;
                setImmediate(function() {
                    _this._pushToQueue(_this._root, _this._settings.basePath);
                });
                return this._emitter;
            }
        },
        {
            key: "isDestroyed",
            get: function get() {
                return this._isDestroyed;
            }
        },
        {
            key: "destroy",
            value: function destroy() {
                if (this._isDestroyed) {
                    throw new Error('The reader is already destroyed');
                }
                this._isDestroyed = true;
                this._queue.killAndDrain();
            }
        },
        {
            key: "onEntry",
            value: function onEntry(callback) {
                this._emitter.on('entry', callback);
            }
        },
        {
            key: "onError",
            value: function onError(callback) {
                this._emitter.once('error', callback);
            }
        },
        {
            key: "onEnd",
            value: function onEnd(callback) {
                this._emitter.once('end', callback);
            }
        },
        {
            key: "_pushToQueue",
            value: function _pushToQueue(directory, base) {
                var _this = this;
                var queueItem = {
                    directory: directory,
                    base: base
                };
                this._queue.push(queueItem, function(error) {
                    if (error !== null) {
                        _this._handleError(error);
                    }
                });
            }
        },
        {
            key: "_worker",
            value: function _worker(item, done) {
                var _this = this;
                this._scandir(item.directory, this._settings.fsScandirSettings, function(error, entries) {
                    if (error !== null) {
                        done(error, undefined);
                        return;
                    }
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = entries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var entry = _step.value;
                            _this._handleEntry(entry, item.base);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    done(null, undefined);
                });
            }
        },
        {
            key: "_handleError",
            value: function _handleError(error) {
                if (this._isDestroyed || !common.isFatalError(this._settings, error)) {
                    return;
                }
                this._isFatalError = true;
                this._isDestroyed = true;
                this._emitter.emit('error', error);
            }
        },
        {
            key: "_handleEntry",
            value: function _handleEntry(entry, base) {
                if (this._isDestroyed || this._isFatalError) {
                    return;
                }
                var fullpath = entry.path;
                if (base !== undefined) {
                    entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
                }
                if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
                    this._emitEntry(entry);
                }
                if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
                    this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);
                }
            }
        },
        {
            key: "_emitEntry",
            value: function _emitEntry(entry) {
                this._emitter.emit('entry', entry);
            }
        }
    ]);
    return AsyncReader;
}(reader_1.default);
exports.default = AsyncReader;
