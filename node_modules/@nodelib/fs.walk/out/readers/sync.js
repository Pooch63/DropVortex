"use strict";
function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}
Object.defineProperty(exports, "__esModule", {
    value: true
});
var fsScandir = require("@nodelib/fs.scandir");
var common = require("./common");
var reader_1 = require("./reader");
var SyncReader = /*#__PURE__*/ function(_reader_1_default) {
    _inherits(SyncReader, _reader_1_default);
    var _super = _create_super(SyncReader);
    function SyncReader() {
        _class_call_check(this, SyncReader);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        _this._scandir = fsScandir.scandirSync;
        _this._storage = [];
        _this._queue = new Set();
        return _this;
    }
    _create_class(SyncReader, [
        {
            key: "read",
            value: function read() {
                this._pushToQueue(this._root, this._settings.basePath);
                this._handleQueue();
                return this._storage;
            }
        },
        {
            key: "_pushToQueue",
            value: function _pushToQueue(directory, base) {
                this._queue.add({
                    directory: directory,
                    base: base
                });
            }
        },
        {
            key: "_handleQueue",
            value: function _handleQueue() {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this._queue.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var item = _step.value;
                        this._handleDirectory(item.directory, item.base);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        },
        {
            key: "_handleDirectory",
            value: function _handleDirectory(directory, base) {
                try {
                    var entries = this._scandir(directory, this._settings.fsScandirSettings);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = entries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var entry = _step.value;
                            this._handleEntry(entry, base);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                } catch (error) {
                    this._handleError(error);
                }
            }
        },
        {
            key: "_handleError",
            value: function _handleError(error) {
                if (!common.isFatalError(this._settings, error)) {
                    return;
                }
                throw error;
            }
        },
        {
            key: "_handleEntry",
            value: function _handleEntry(entry, base) {
                var fullpath = entry.path;
                if (base !== undefined) {
                    entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
                }
                if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
                    this._pushToStorage(entry);
                }
                if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
                    this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);
                }
            }
        },
        {
            key: "_pushToStorage",
            value: function _pushToStorage(entry) {
                this._storage.push(entry);
            }
        }
    ]);
    return SyncReader;
}(reader_1.default);
exports.default = SyncReader;
