"use strict";
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
Object.defineProperty(exports, "__esModule", {
    value: true
});
var stream_1 = require("stream");
var async_1 = require("../readers/async");
var StreamProvider = /*#__PURE__*/ function() {
    function StreamProvider(_root, _settings) {
        var _this = this;
        _class_call_check(this, StreamProvider);
        this._root = _root;
        this._settings = _settings;
        this._reader = new async_1.default(this._root, this._settings);
        this._stream = new stream_1.Readable({
            objectMode: true,
            read: function() {},
            destroy: function() {
                if (!_this._reader.isDestroyed) {
                    _this._reader.destroy();
                }
            }
        });
    }
    _create_class(StreamProvider, [
        {
            key: "read",
            value: function read() {
                var _this = this;
                this._reader.onError(function(error) {
                    _this._stream.emit('error', error);
                });
                this._reader.onEntry(function(entry) {
                    _this._stream.push(entry);
                });
                this._reader.onEnd(function() {
                    _this._stream.push(null);
                });
                this._reader.read();
                return this._stream;
            }
        }
    ]);
    return StreamProvider;
}();
exports.default = StreamProvider;
