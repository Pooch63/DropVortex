'use strict';
var utils = require('./utils');
module.exports = function(ast) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var stringify = function(node) {
        var parent = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);
        var invalidNode = node.invalid === true && options.escapeInvalid === true;
        var output = '';
        if (node.value) {
            if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {
                return '\\' + node.value;
            }
            return node.value;
        }
        if (node.value) {
            return node.value;
        }
        if (node.nodes) {
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = node.nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var child = _step.value;
                    output += stringify(child);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
        return output;
    };
    return stringify(ast);
};
