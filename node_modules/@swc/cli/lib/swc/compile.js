"use strict";
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    compile: function compile1() {
        return compile;
    },
    outputResult: function outputResult1() {
        return outputResult;
    }
});
var _slash = /*#__PURE__*/ _interop_require_default(require("slash"));
var _fs = require("fs");
var _path = require("path");
var _core = require("@swc/core");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var _fs_promises = _fs.promises, mkdir = _fs_promises.mkdir, stat = _fs_promises.stat, writeFile = _fs_promises.writeFile;
function withSourceMap(output, options, destFile, destDir) {
    var dts;
    // TODO: Remove once fixed in core
    if (output.output) {
        var json = JSON.parse(output.output);
        if (json.__swc_isolated_declarations__) {
            dts = json.__swc_isolated_declarations__;
        }
    }
    var dtsPath;
    if (dts) {
        dtsPath = (0, _path.join)(destDir, (0, _path.basename)(destFile) + ".d.ts");
    }
    if (!output.map || options.sourceMaps === "inline") {
        return {
            sourceCode: output.code,
            dts: dts,
            dtsPath: dtsPath
        };
    }
    // TODO: remove once fixed in core https://github.com/swc-project/swc/issues/1388
    var sourceMap = JSON.parse(output.map);
    if (options.sourceFileName) {
        sourceMap["sources"][0] = options.sourceFileName;
    }
    if (options.sourceRoot) {
        sourceMap["sourceRoot"] = options.sourceRoot;
    }
    output.map = JSON.stringify(sourceMap);
    var sourceMapPath = destFile + ".map";
    output.code += "\n//# sourceMappingURL=".concat((0, _slash.default)((0, _path.relative)(destDir, sourceMapPath)));
    return {
        sourceMap: output.map,
        sourceMapPath: sourceMapPath,
        sourceCode: output.code,
        dts: dts,
        dtsPath: dtsPath
    };
}
function outputResult(output, sourceFile, destFile, options) {
    return _outputResult.apply(this, arguments);
}
function _outputResult() {
    _outputResult = _async_to_generator(function(output, sourceFile, destFile, options) {
        var destDir, _withSourceMap, sourceMap, sourceMapPath, sourceCode, dts, dtsPath, mode, dtsPromise, sourceMapPromise;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    destDir = (0, _path.dirname)(destFile);
                    _withSourceMap = withSourceMap(output, options, destFile, destDir), sourceMap = _withSourceMap.sourceMap, sourceMapPath = _withSourceMap.sourceMapPath, sourceCode = _withSourceMap.sourceCode, dts = _withSourceMap.dts, dtsPath = _withSourceMap.dtsPath;
                    return [
                        4,
                        mkdir(destDir, {
                            recursive: true
                        })
                    ];
                case 1:
                    _state.sent();
                    return [
                        4,
                        stat(sourceFile)
                    ];
                case 2:
                    mode = _state.sent().mode;
                    dtsPromise = dts ? writeFile(dtsPath, dts, {
                        mode: mode
                    }) : Promise.resolve();
                    sourceMapPromise = sourceMapPath ? writeFile(sourceMapPath, sourceMap, {
                        mode: mode
                    }) : Promise.resolve();
                    return [
                        4,
                        Promise.all([
                            writeFile(destFile, sourceCode, {
                                mode: mode
                            }),
                            dtsPromise,
                            sourceMapPromise
                        ])
                    ];
                case 3:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return _outputResult.apply(this, arguments);
}
function compile(filename, opts, sync, outputPath) {
    return _compile.apply(this, arguments);
}
function _compile() {
    _compile = _async_to_generator(function(filename, opts, sync, outputPath) {
        var options, result, _tmp, err;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    options = _object_spread({}, opts);
                    if (outputPath) {
                        options.outputPath = outputPath;
                    }
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        5,
                        ,
                        6
                    ]);
                    if (!sync) return [
                        3,
                        2
                    ];
                    _tmp = (0, _core.transformFileSync)(filename, options);
                    return [
                        3,
                        4
                    ];
                case 2:
                    return [
                        4,
                        (0, _core.transformFile)(filename, options)
                    ];
                case 3:
                    _tmp = _state.sent();
                    _state.label = 4;
                case 4:
                    result = _tmp;
                    return [
                        2,
                        result
                    ];
                case 5:
                    err = _state.sent();
                    if (!err.message.includes("ignored by .swcrc")) {
                        throw err;
                    }
                    return [
                        3,
                        6
                    ];
                case 6:
                    return [
                        2
                    ];
            }
        });
    } //# sourceMappingURL=compile.js.map
    );
    return _compile.apply(this, arguments);
}
