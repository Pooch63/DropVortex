"use strict";
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _async_iterator(iterable) {
    var method, async, sync, retry = 2;
    for("undefined" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;){
        if (async && null != (method = iterable[async])) return method.call(iterable);
        if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable));
        async = "@@asyncIterator", sync = "@@iterator";
    }
    throw new TypeError("Object is not async iterable");
}
function AsyncFromSyncIterator(s) {
    function AsyncFromSyncIteratorContinuation(r) {
        if (Object(r) !== r) return Promise.reject(new TypeError(r + " is not an object."));
        var done = r.done;
        return Promise.resolve(r.value).then(function(value) {
            return {
                value: value,
                done: done
            };
        });
    }
    return AsyncFromSyncIterator = function(s) {
        this.s = s, this.n = s.next;
    }, AsyncFromSyncIterator.prototype = {
        s: null,
        n: null,
        next: function() {
            return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments));
        },
        return: function(value) {
            var ret = this.s.return;
            return void 0 === ret ? Promise.resolve({
                value: value,
                done: !0
            }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments));
        },
        throw: function(value) {
            var thr = this.s.return;
            return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments));
        }
    }, new AsyncFromSyncIterator(s);
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function _ts_values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function get() {
        return _default;
    }
});
var _path = /*#__PURE__*/ _interop_require_default(require("path"));
var _slash = /*#__PURE__*/ _interop_require_default(require("slash"));
var _sourcemap = require("source-map");
var _sources = require("./sources");
var _util = /*#__PURE__*/ _interop_require_wildcard(require("./util"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || (typeof obj === "undefined" ? "undefined" : _type_of(obj)) !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function _default(_) {
    return __default.apply(this, arguments);
}
function __default() {
    __default = _async_to_generator(function(param) {
        var cliOptions, swcOptions;
        function concatResults(file) {
            return _concatResults.apply(this, arguments);
        }
        function _concatResults() {
            _concatResults = _async_to_generator(function(file) {
                var _len, results, _key, added, map, code, offset, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step, err;
                var _arguments = arguments;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            for(_len = _arguments.length, results = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                                results[_key - 1] = _arguments[_key];
                            }
                            added = false;
                            map = new _sourcemap.SourceMapGenerator({
                                file: file,
                                sourceRoot: swcOptions.sourceRoot
                            });
                            code = "";
                            offset = 0;
                            _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                            _state.label = 1;
                        case 1:
                            _state.trys.push([
                                1,
                                6,
                                7,
                                8
                            ]);
                            _loop = function() {
                                var result, consumer, sources;
                                return _ts_generator(this, function(_state) {
                                    switch(_state.label){
                                        case 0:
                                            result = _step.value;
                                            code += result.code + "\n";
                                            if (!result.map) return [
                                                3,
                                                2
                                            ];
                                            added = true;
                                            return [
                                                4,
                                                new _sourcemap.SourceMapConsumer(result.map)
                                            ];
                                        case 1:
                                            consumer = _state.sent();
                                            sources = new Set();
                                            consumer.eachMapping(function(mapping) {
                                                sources.add(mapping.source);
                                                map.addMapping({
                                                    generated: {
                                                        line: mapping.generatedLine + offset,
                                                        column: mapping.generatedColumn
                                                    },
                                                    original: {
                                                        line: mapping.originalLine,
                                                        column: mapping.originalColumn
                                                    },
                                                    source: mapping.source
                                                });
                                            });
                                            sources.forEach(function(source) {
                                                var content = consumer.sourceContentFor(source, true);
                                                if (content !== null) {
                                                    map.setSourceContent(source, content);
                                                }
                                            });
                                            _state.label = 2;
                                        case 2:
                                            offset = code.split("\n").length - 1;
                                            return [
                                                2
                                            ];
                                    }
                                });
                            };
                            _iterator = results[Symbol.iterator]();
                            _state.label = 2;
                        case 2:
                            if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                                3,
                                5
                            ];
                            return [
                                5,
                                _ts_values(_loop())
                            ];
                        case 3:
                            _state.sent();
                            _state.label = 4;
                        case 4:
                            _iteratorNormalCompletion = true;
                            return [
                                3,
                                2
                            ];
                        case 5:
                            return [
                                3,
                                8
                            ];
                        case 6:
                            err = _state.sent();
                            _didIteratorError = true;
                            _iteratorError = err;
                            return [
                                3,
                                8
                            ];
                        case 7:
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            } finally{
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                            return [
                                7
                            ];
                        case 8:
                            if (!added) {
                                return [
                                    2,
                                    {
                                        code: code
                                    }
                                ];
                            }
                            return [
                                2,
                                {
                                    code: code,
                                    map: JSON.stringify(map)
                                }
                            ];
                    }
                });
            });
            return _concatResults.apply(this, arguments);
        }
        function output(results) {
            return _output.apply(this, arguments);
        }
        function _output() {
            _output = _async_to_generator(function(results) {
                var file, result, map;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            file = cliOptions.sourceMapTarget || _path.default.basename(cliOptions.outFile || "stdout");
                            return [
                                4,
                                concatResults.apply(void 0, [
                                    file
                                ].concat(_to_consumable_array(results)))
                            ];
                        case 1:
                            result = _state.sent();
                            if (cliOptions.outFile) {
                                _util.outputFile(result, cliOptions.outFile, swcOptions.sourceMaps);
                            } else {
                                process.stdout.write(result.code + "\n");
                                if (result.map) {
                                    map = "//#sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(Buffer.from(JSON.stringify(result.map), "utf8").toString("base64"));
                                    process.stdout.write(map);
                                }
                            }
                            return [
                                2
                            ];
                    }
                });
            });
            return _output.apply(this, arguments);
        }
        function handle(filename) {
            return _handle.apply(this, arguments);
        }
        function _handle() {
            _handle = _async_to_generator(function(filename) {
                var sourceFileName;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            sourceFileName = (0, _slash.default)(cliOptions.outFile ? _path.default.relative(_path.default.dirname(cliOptions.outFile), filename) : filename);
                            return [
                                4,
                                _util.compile(filename, _object_spread_props(_object_spread({}, swcOptions), {
                                    sourceFileName: sourceFileName
                                }), cliOptions.sync, cliOptions.outFile)
                            ];
                        case 1:
                            return [
                                2,
                                _state.sent()
                            ];
                    }
                });
            });
            return _handle.apply(this, arguments);
        }
        function getProgram() {
            return _getProgram.apply(this, arguments);
        }
        function _getProgram() {
            _getProgram = _async_to_generator(function() {
                var previousResults, results, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, filename, err;
                var _arguments = arguments;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            previousResults = _arguments.length > 0 && _arguments[0] !== void 0 ? _arguments[0] : new Map();
                            results = new Map();
                            _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                            _state.label = 1;
                        case 1:
                            _state.trys.push([
                                1,
                                6,
                                7,
                                8
                            ]);
                            return [
                                4,
                                (0, _sources.globSources)(cliOptions.filenames, cliOptions.only, cliOptions.ignore, cliOptions.includeDotfiles)
                            ];
                        case 2:
                            _iterator = _state.sent()[Symbol.iterator]();
                            _state.label = 3;
                        case 3:
                            if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                                3,
                                5
                            ];
                            filename = _step.value;
                            if ((0, _sources.isCompilableExtension)(filename, cliOptions.extensions)) {
                                results.set(filename, previousResults.get(filename));
                            }
                            _state.label = 4;
                        case 4:
                            _iteratorNormalCompletion = true;
                            return [
                                3,
                                3
                            ];
                        case 5:
                            return [
                                3,
                                8
                            ];
                        case 6:
                            err = _state.sent();
                            _didIteratorError = true;
                            _iteratorError = err;
                            return [
                                3,
                                8
                            ];
                        case 7:
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            } finally{
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                            return [
                                7
                            ];
                        case 8:
                            return [
                                2,
                                results
                            ];
                    }
                });
            });
            return _getProgram.apply(this, arguments);
        }
        function files() {
            return _files.apply(this, arguments);
        }
        function _files() {
            _files = _async_to_generator(function() {
                var results, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, filename, result, err1, err, watcher, _i, _iter, type;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            return [
                                4,
                                getProgram()
                            ];
                        case 1:
                            results = _state.sent();
                            _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                            _state.label = 2;
                        case 2:
                            _state.trys.push([
                                2,
                                9,
                                10,
                                11
                            ]);
                            _iterator = results.keys()[Symbol.iterator]();
                            _state.label = 3;
                        case 3:
                            if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                                3,
                                8
                            ];
                            filename = _step.value;
                            _state.label = 4;
                        case 4:
                            _state.trys.push([
                                4,
                                6,
                                ,
                                7
                            ]);
                            return [
                                4,
                                handle(filename)
                            ];
                        case 5:
                            result = _state.sent();
                            if (result) {
                                results.set(filename, result);
                            } else {
                                results.delete(filename);
                            }
                            return [
                                3,
                                7
                            ];
                        case 6:
                            err1 = _state.sent();
                            console.error(err1.message);
                            results.set(filename, err1);
                            return [
                                3,
                                7
                            ];
                        case 7:
                            _iteratorNormalCompletion = true;
                            return [
                                3,
                                3
                            ];
                        case 8:
                            return [
                                3,
                                11
                            ];
                        case 9:
                            err = _state.sent();
                            _didIteratorError = true;
                            _iteratorError = err;
                            return [
                                3,
                                11
                            ];
                        case 10:
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            } finally{
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                            return [
                                7
                            ];
                        case 11:
                            if (!cliOptions.watch) return [
                                3,
                                13
                            ];
                            return [
                                4,
                                (0, _sources.watchSources)(cliOptions.filenames, cliOptions.includeDotfiles)
                            ];
                        case 12:
                            watcher = _state.sent();
                            watcher.on("ready", function() {
                                Promise.resolve().then(/*#__PURE__*/ _async_to_generator(function() {
                                    return _ts_generator(this, function(_state) {
                                        switch(_state.label){
                                            case 0:
                                                _util.assertCompilationResult(results, cliOptions.quiet);
                                                return [
                                                    4,
                                                    output(results.values())
                                                ];
                                            case 1:
                                                _state.sent();
                                                if (!cliOptions.quiet) {
                                                    console.info("Watching for file changes.");
                                                }
                                                return [
                                                    2
                                                ];
                                        }
                                    });
                                })).catch(function(err) {
                                    console.error(err.message);
                                });
                            });
                            watcher.on("add", function() {
                                var _ref = _async_to_generator(function(filename) {
                                    return _ts_generator(this, function(_state) {
                                        switch(_state.label){
                                            case 0:
                                                if (!(0, _sources.isCompilableExtension)(filename, cliOptions.extensions)) return [
                                                    3,
                                                    2
                                                ];
                                                return [
                                                    4,
                                                    getProgram(results)
                                                ];
                                            case 1:
                                                // ensure consistent insertion order when files are added
                                                results = _state.sent();
                                                _state.label = 2;
                                            case 2:
                                                return [
                                                    2
                                                ];
                                        }
                                    });
                                });
                                return function(filename) {
                                    return _ref.apply(this, arguments);
                                };
                            }());
                            watcher.on("unlink", function(filename) {
                                results.delete(filename);
                            });
                            for(_i = 0, _iter = [
                                "add",
                                "change"
                            ]; _i < _iter.length; _i++){
                                type = _iter[_i];
                                watcher.on(type, function(filename) {
                                    if (!(0, _sources.isCompilableExtension)(filename, cliOptions.extensions)) {
                                        return;
                                    }
                                    var start = process.hrtime();
                                    handle(filename).then(function() {
                                        var _ref = _async_to_generator(function(result) {
                                            var _process_hrtime, seconds, nanoseconds, ms, name;
                                            return _ts_generator(this, function(_state) {
                                                switch(_state.label){
                                                    case 0:
                                                        if (!result) {
                                                            results.delete(filename);
                                                            return [
                                                                2
                                                            ];
                                                        }
                                                        results.set(filename, result);
                                                        _util.assertCompilationResult(results, true);
                                                        return [
                                                            4,
                                                            output(results.values())
                                                        ];
                                                    case 1:
                                                        _state.sent();
                                                        if (!cliOptions.quiet) {
                                                            _process_hrtime = _sliced_to_array(process.hrtime(start), 2), seconds = _process_hrtime[0], nanoseconds = _process_hrtime[1];
                                                            ms = seconds * 1000 + nanoseconds * 1e-6;
                                                            name = _path.default.basename(cliOptions.outFile);
                                                            console.log("Compiled ".concat(name, " in ").concat(ms.toFixed(2), "ms"));
                                                        }
                                                        return [
                                                            2
                                                        ];
                                                }
                                            });
                                        });
                                        return function(result) {
                                            return _ref.apply(this, arguments);
                                        };
                                    }()).catch(function(err) {
                                        console.error(err.message);
                                    });
                                });
                            }
                            return [
                                3,
                                15
                            ];
                        case 13:
                            _util.assertCompilationResult(results, cliOptions.quiet);
                            return [
                                4,
                                output(results.values())
                            ];
                        case 14:
                            _state.sent();
                            _state.label = 15;
                        case 15:
                            return [
                                2
                            ];
                    }
                });
            });
            return _files.apply(this, arguments);
        }
        function stdin() {
            return _stdin.apply(this, arguments);
        }
        function _stdin() {
            _stdin = _async_to_generator(function() {
                var code, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk, err, res;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            code = "";
                            process.stdin.setEncoding("utf8");
                            _iteratorAbruptCompletion = false, _didIteratorError = false;
                            _state.label = 1;
                        case 1:
                            _state.trys.push([
                                1,
                                6,
                                7,
                                12
                            ]);
                            _iterator = _async_iterator(process.stdin);
                            _state.label = 2;
                        case 2:
                            return [
                                4,
                                _iterator.next()
                            ];
                        case 3:
                            if (!(_iteratorAbruptCompletion = !(_step = _state.sent()).done)) return [
                                3,
                                5
                            ];
                            _value = _step.value;
                            chunk = _value;
                            code += chunk;
                            _state.label = 4;
                        case 4:
                            _iteratorAbruptCompletion = false;
                            return [
                                3,
                                2
                            ];
                        case 5:
                            return [
                                3,
                                12
                            ];
                        case 6:
                            err = _state.sent();
                            _didIteratorError = true;
                            _iteratorError = err;
                            return [
                                3,
                                12
                            ];
                        case 7:
                            _state.trys.push([
                                7,
                                ,
                                10,
                                11
                            ]);
                            if (!(_iteratorAbruptCompletion && _iterator.return != null)) return [
                                3,
                                9
                            ];
                            return [
                                4,
                                _iterator.return()
                            ];
                        case 8:
                            _state.sent();
                            _state.label = 9;
                        case 9:
                            return [
                                3,
                                11
                            ];
                        case 10:
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                            return [
                                7
                            ];
                        case 11:
                            return [
                                7
                            ];
                        case 12:
                            return [
                                4,
                                _util.transform(cliOptions.filename, code, _object_spread_props(_object_spread({}, swcOptions), {
                                    sourceFileName: "stdin"
                                }), cliOptions.sync, undefined)
                            ];
                        case 13:
                            res = _state.sent();
                            output([
                                res
                            ]);
                            return [
                                2
                            ];
                    }
                });
            });
            return _stdin.apply(this, arguments);
        }
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    cliOptions = param.cliOptions, swcOptions = param.swcOptions;
                    if (!cliOptions.filenames.length) return [
                        3,
                        2
                    ];
                    return [
                        4,
                        files()
                    ];
                case 1:
                    _state.sent();
                    return [
                        3,
                        4
                    ];
                case 2:
                    return [
                        4,
                        stdin()
                    ];
                case 3:
                    _state.sent();
                    _state.label = 4;
                case 4:
                    return [
                        2
                    ];
            }
        });
    } //# sourceMappingURL=file.js.map
    );
    return __default.apply(this, arguments);
}
