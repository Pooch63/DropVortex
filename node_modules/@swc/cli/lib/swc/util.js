"use strict";
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    assertCompilationResult: function assertCompilationResult1() {
        return assertCompilationResult;
    },
    compile: function compile1() {
        return compile;
    },
    exists: function exists1() {
        return exists;
    },
    getDest: function getDest1() {
        return getDest;
    },
    outputFile: function outputFile1() {
        return outputFile;
    },
    transform: function transform1() {
        return transform;
    }
});
var _core = /*#__PURE__*/ _interop_require_wildcard(require("@swc/core"));
var _slash = /*#__PURE__*/ _interop_require_default(require("slash"));
var _fs = require("fs");
var _path = require("path");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || (typeof obj === "undefined" ? "undefined" : _type_of(obj)) !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function exists(path) {
    return _exists.apply(this, arguments);
}
function _exists() {
    _exists = _async_to_generator(function(path) {
        var pathExists, err;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    pathExists = true;
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        3,
                        ,
                        4
                    ]);
                    return [
                        4,
                        _fs.promises.access(path)
                    ];
                case 2:
                    _state.sent();
                    return [
                        3,
                        4
                    ];
                case 3:
                    err = _state.sent();
                    pathExists = false;
                    return [
                        3,
                        4
                    ];
                case 4:
                    return [
                        2,
                        pathExists
                    ];
            }
        });
    });
    return _exists.apply(this, arguments);
}
function transform(filename, code, opts, sync, outputPath) {
    return _transform.apply(this, arguments);
}
function _transform() {
    _transform = _async_to_generator(function(filename, code, opts, sync, outputPath) {
        return _ts_generator(this, function(_state) {
            opts = _object_spread({
                filename: filename
            }, opts);
            if (outputPath) {
                opts.outputPath = outputPath;
            }
            if (sync) {
                return [
                    2,
                    _core.transformSync(code, opts)
                ];
            }
            return [
                2,
                _core.transform(code, opts)
            ];
        });
    });
    return _transform.apply(this, arguments);
}
function compile(filename, opts, sync, outputPath) {
    return _compile.apply(this, arguments);
}
function _compile() {
    _compile = _async_to_generator(function(filename, opts, sync, outputPath) {
        var result, _tmp, sourceMap, err;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    opts = _object_spread({}, opts);
                    if (outputPath) {
                        opts.outputPath = outputPath;
                    }
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        5,
                        ,
                        6
                    ]);
                    if (!sync) return [
                        3,
                        2
                    ];
                    _tmp = _core.transformFileSync(filename, opts);
                    return [
                        3,
                        4
                    ];
                case 2:
                    return [
                        4,
                        _core.transformFile(filename, opts)
                    ];
                case 3:
                    _tmp = _state.sent();
                    _state.label = 4;
                case 4:
                    result = _tmp;
                    if (result.map) {
                        // TODO: fix this in core
                        // https://github.com/swc-project/swc/issues/1388
                        sourceMap = JSON.parse(result.map);
                        if (opts.sourceFileName) {
                            sourceMap["sources"][0] = opts.sourceFileName;
                        }
                        if (opts.sourceRoot) {
                            sourceMap["sourceRoot"] = opts.sourceRoot;
                        }
                        result.map = JSON.stringify(sourceMap);
                    }
                    return [
                        2,
                        result
                    ];
                case 5:
                    err = _state.sent();
                    if (!err.message.includes("ignored by .swcrc")) {
                        throw err;
                    }
                    return [
                        3,
                        6
                    ];
                case 6:
                    return [
                        2
                    ];
            }
        });
    });
    return _compile.apply(this, arguments);
}
function outputFile(output, filename, sourceMaps) {
    var destDir = (0, _path.dirname)(filename);
    (0, _fs.mkdirSync)(destDir, {
        recursive: true
    });
    var code = output.code;
    if (output.map && sourceMaps !== "inline") {
        // we've requested for a sourcemap to be written to disk
        var fileDirName = (0, _path.dirname)(filename);
        var mapLoc = filename + ".map";
        code += "\n//# sourceMappingURL=" + (0, _slash.default)((0, _path.relative)(fileDirName, mapLoc));
        (0, _fs.writeFileSync)(mapLoc, output.map);
    }
    (0, _fs.writeFileSync)(filename, code);
}
function assertCompilationResult(result) {
    var quiet = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var compiled = 0;
    var copied = 0;
    var failed = 0;
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = result.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var value = _step.value;
            if (_instanceof(value, Error)) {
                failed++;
            } else if (value === "copied") {
                copied++;
            } else if (value) {
                compiled++;
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    if (!quiet && compiled + copied > 0) {
        var copyResult = copied === 0 ? " " : " (copied ".concat(copied, ") ");
        console.info("Successfully compiled ".concat(compiled, " ").concat(compiled !== 1 ? "files" : "file").concat(copyResult, "with swc."));
    }
    if (failed > 0) {
        throw new Error("Failed to compile ".concat(failed, " ").concat(failed !== 1 ? "files" : "file", " with swc."));
    }
}
function stripComponents(filename) {
    var components = filename.split("/").slice(1);
    if (!components.length) {
        return filename;
    }
    while(components[0] === ".."){
        components.shift();
    }
    return components.join("/");
}
var cwd = process.cwd();
function getDest(filename, outDir, stripLeadingPaths, ext) {
    var base = (0, _slash.default)((0, _path.relative)(cwd, filename));
    if (stripLeadingPaths) {
        base = stripComponents(base);
    }
    if (ext) {
        base = base.replace(/\.\w*$/, ext);
    }
    return (0, _path.join)(outDir, base);
} //# sourceMappingURL=util.js.map
