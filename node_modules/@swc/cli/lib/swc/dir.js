"use strict";
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function get() {
        return dir;
    }
});
var _fs = require("fs");
var _path = require("path");
var _piscina = /*#__PURE__*/ _interop_require_default(require("piscina"));
var _constants = require("./constants");
var _util = require("./util");
var _dirWorker = /*#__PURE__*/ _interop_require_default(require("./dirWorker"));
var _sources = require("./sources");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var _fs_promises = _fs.promises, mkdir = _fs_promises.mkdir, rmdir = _fs_promises.rmdir, rm = _fs_promises.rm, copyFile = _fs_promises.copyFile, unlink = _fs_promises.unlink;
var recursive = {
    recursive: true
};
function handleCopy(filename, outDir, stripLeadingPaths) {
    return _handleCopy.apply(this, arguments);
}
function _handleCopy() {
    _handleCopy = _async_to_generator(function(filename, outDir, stripLeadingPaths) {
        var dest, dir;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    dest = (0, _util.getDest)(filename, outDir, stripLeadingPaths);
                    dir = (0, _path.dirname)(dest);
                    return [
                        4,
                        mkdir(dir, recursive)
                    ];
                case 1:
                    _state.sent();
                    return [
                        4,
                        copyFile(filename, dest)
                    ];
                case 2:
                    _state.sent();
                    return [
                        2,
                        _constants.CompileStatus.Copied
                    ];
            }
        });
    });
    return _handleCopy.apply(this, arguments);
}
function beforeStartCompilation(cliOptions) {
    return _beforeStartCompilation.apply(this, arguments);
}
function _beforeStartCompilation() {
    _beforeStartCompilation = _async_to_generator(function(cliOptions) {
        var outDir, deleteDirOnStart, exists, _tmp;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    outDir = cliOptions.outDir, deleteDirOnStart = cliOptions.deleteDirOnStart;
                    if (!deleteDirOnStart) return [
                        3,
                        6
                    ];
                    return [
                        4,
                        (0, _fs.existsSync)(outDir)
                    ];
                case 1:
                    exists = _state.sent();
                    if (!exists) return [
                        3,
                        6
                    ];
                    if (!rm) return [
                        3,
                        3
                    ];
                    return [
                        4,
                        rm(outDir, recursive)
                    ];
                case 2:
                    _tmp = _state.sent();
                    return [
                        3,
                        5
                    ];
                case 3:
                    return [
                        4,
                        rmdir(outDir, recursive)
                    ];
                case 4:
                    _tmp = _state.sent();
                    _state.label = 5;
                case 5:
                    _tmp;
                    _state.label = 6;
                case 6:
                    return [
                        2
                    ];
            }
        });
    });
    return _beforeStartCompilation.apply(this, arguments);
}
function initialCompilation(cliOptions, swcOptions) {
    return _initialCompilation.apply(this, arguments);
}
function _initialCompilation() {
    _initialCompilation = _async_to_generator(function(cliOptions, swcOptions) {
        var includeDotfiles, filenames, copyFiles, extensions, outDir, outFileExtension, stripLeadingPaths, sync, quiet, watch, only, ignore, results, start, sourceFiles, _ref, compilable, copyable, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, filename, result, err, err1, _iteratorNormalCompletion1, _didIteratorError1, _iteratorError1, _iterator1, _step1, filename1, result1, err2, err1, workers, end, failed, compiled, copied, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _step_value, _, status, message, files;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    includeDotfiles = cliOptions.includeDotfiles, filenames = cliOptions.filenames, copyFiles = cliOptions.copyFiles, extensions = cliOptions.extensions, outDir = cliOptions.outDir, outFileExtension = cliOptions.outFileExtension, stripLeadingPaths = cliOptions.stripLeadingPaths, sync = cliOptions.sync, quiet = cliOptions.quiet, watch = cliOptions.watch, only = cliOptions.only, ignore = cliOptions.ignore;
                    results = new Map();
                    start = process.hrtime();
                    return [
                        4,
                        (0, _sources.globSources)(filenames, only, ignore, includeDotfiles)
                    ];
                case 1:
                    sourceFiles = _state.sent();
                    _ref = _sliced_to_array((0, _sources.splitCompilableAndCopyable)(sourceFiles, extensions, copyFiles), 2), compilable = _ref[0], copyable = _ref[1];
                    if (!sync) return [
                        3,
                        22
                    ];
                    _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    _state.label = 2;
                case 2:
                    _state.trys.push([
                        2,
                        9,
                        10,
                        11
                    ]);
                    _iterator = compilable[Symbol.iterator]();
                    _state.label = 3;
                case 3:
                    if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                        3,
                        8
                    ];
                    filename = _step.value;
                    _state.label = 4;
                case 4:
                    _state.trys.push([
                        4,
                        6,
                        ,
                        7
                    ]);
                    return [
                        4,
                        (0, _dirWorker.default)({
                            filename: filename,
                            outDir: outDir,
                            sync: sync,
                            cliOptions: cliOptions,
                            swcOptions: swcOptions,
                            outFileExtension: outFileExtension
                        })
                    ];
                case 5:
                    result = _state.sent();
                    results.set(filename, result);
                    return [
                        3,
                        7
                    ];
                case 6:
                    err = _state.sent();
                    console.error(err.message);
                    results.set(filename, _constants.CompileStatus.Failed);
                    return [
                        3,
                        7
                    ];
                case 7:
                    _iteratorNormalCompletion = true;
                    return [
                        3,
                        3
                    ];
                case 8:
                    return [
                        3,
                        11
                    ];
                case 9:
                    err1 = _state.sent();
                    _didIteratorError = true;
                    _iteratorError = err1;
                    return [
                        3,
                        11
                    ];
                case 10:
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                    return [
                        7
                    ];
                case 11:
                    _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                    _state.label = 12;
                case 12:
                    _state.trys.push([
                        12,
                        19,
                        20,
                        21
                    ]);
                    _iterator1 = copyable[Symbol.iterator]();
                    _state.label = 13;
                case 13:
                    if (!!(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done)) return [
                        3,
                        18
                    ];
                    filename1 = _step1.value;
                    _state.label = 14;
                case 14:
                    _state.trys.push([
                        14,
                        16,
                        ,
                        17
                    ]);
                    return [
                        4,
                        handleCopy(filename1, outDir, stripLeadingPaths)
                    ];
                case 15:
                    result1 = _state.sent();
                    results.set(filename1, result1);
                    return [
                        3,
                        17
                    ];
                case 16:
                    err2 = _state.sent();
                    console.error(err2.message);
                    results.set(filename1, _constants.CompileStatus.Failed);
                    return [
                        3,
                        17
                    ];
                case 17:
                    _iteratorNormalCompletion1 = true;
                    return [
                        3,
                        13
                    ];
                case 18:
                    return [
                        3,
                        21
                    ];
                case 19:
                    err1 = _state.sent();
                    _didIteratorError1 = true;
                    _iteratorError1 = err1;
                    return [
                        3,
                        21
                    ];
                case 20:
                    try {
                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                            _iterator1.return();
                        }
                    } finally{
                        if (_didIteratorError1) {
                            throw _iteratorError1;
                        }
                    }
                    return [
                        7
                    ];
                case 21:
                    return [
                        3,
                        24
                    ];
                case 22:
                    workers = new _piscina.default({
                        filename: (0, _path.resolve)(__dirname, "./dirWorker.js"),
                        maxThreads: cliOptions.workers,
                        concurrentTasksPerWorker: 2
                    });
                    return [
                        4,
                        Promise.all([
                            Promise.allSettled(compilable.map(function(filename) {
                                return workers.run({
                                    filename: filename,
                                    outDir: outDir,
                                    sync: sync,
                                    cliOptions: cliOptions,
                                    swcOptions: swcOptions,
                                    outFileExtension: outFileExtension
                                }).catch(function(err) {
                                    console.error(err.message);
                                    throw err;
                                });
                            })),
                            Promise.allSettled(copyable.map(function(file) {
                                return handleCopy(file, outDir, stripLeadingPaths);
                            }))
                        ]).then(function(param) {
                            var _param = _sliced_to_array(param, 2), compiled = _param[0], copied = _param[1];
                            compiled.forEach(function(result, index) {
                                var filename = compilable[index];
                                if (result.status === "fulfilled") {
                                    results.set(filename, result.value);
                                } else {
                                    results.set(filename, _constants.CompileStatus.Failed);
                                }
                            });
                            copied.forEach(function(result, index) {
                                var filename = copyable[index];
                                if (result.status === "fulfilled") {
                                    results.set(filename, result.value);
                                } else {
                                    results.set(filename, _constants.CompileStatus.Failed);
                                }
                            });
                        })
                    ];
                case 23:
                    _state.sent();
                    _state.label = 24;
                case 24:
                    end = process.hrtime(start);
                    failed = 0;
                    compiled = 0;
                    copied = 0;
                    _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;
                    try {
                        for(_iterator2 = results[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true){
                            _step_value = _sliced_to_array(_step2.value, 2), _ = _step_value[0], status = _step_value[1];
                            switch(status){
                                case _constants.CompileStatus.Compiled:
                                    compiled += 1;
                                    break;
                                case _constants.CompileStatus.Failed:
                                    failed += 1;
                                    break;
                                case _constants.CompileStatus.Copied:
                                    copied += 1;
                                    break;
                            }
                        }
                    } catch (err1) {
                        _didIteratorError2 = true;
                        _iteratorError2 = err1;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                                _iterator2.return();
                            }
                        } finally{
                            if (_didIteratorError2) {
                                throw _iteratorError2;
                            }
                        }
                    }
                    if (!quiet && compiled + copied) {
                        message = "";
                        if (compiled) {
                            message += "Successfully compiled: ".concat(compiled, " ").concat(compiled > 1 ? "files" : "file");
                        }
                        if (compiled && copied) {
                            message += ", ";
                        }
                        if (copied) {
                            message += "copied ".concat(copied, " ").concat(copied > 1 ? "files" : "file");
                        }
                        message += " with swc (%dms)";
                        console.log(message, (end[1] / 1000000).toFixed(2));
                    }
                    if (failed) {
                        console.log("Failed to compile ".concat(failed, " ").concat(failed !== 1 ? "files" : "file", " with swc."));
                        if (!watch) {
                            files = Array.from(results.entries()).filter(function(param) {
                                var _param = _sliced_to_array(param, 2), status = _param[1];
                                return status === _constants.CompileStatus.Failed;
                            }).map(function(param) {
                                var _param = _sliced_to_array(param, 2), filename = _param[0], _ = _param[1];
                                return filename;
                            }).join("\n");
                            throw new Error("Failed to compile:\n".concat(files));
                        }
                    }
                    return [
                        2
                    ];
            }
        });
    });
    return _initialCompilation.apply(this, arguments);
}
function watchCompilation(cliOptions, swcOptions) {
    return _watchCompilation.apply(this, arguments);
}
function _watchCompilation() {
    _watchCompilation = _async_to_generator(function(cliOptions, swcOptions) {
        var includeDotfiles, filenames, copyFiles, extensions, outDir, stripLeadingPaths, outFileExtension, quiet, sync, watcher, _i, _iter, type;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    includeDotfiles = cliOptions.includeDotfiles, filenames = cliOptions.filenames, copyFiles = cliOptions.copyFiles, extensions = cliOptions.extensions, outDir = cliOptions.outDir, stripLeadingPaths = cliOptions.stripLeadingPaths, outFileExtension = cliOptions.outFileExtension, quiet = cliOptions.quiet, sync = cliOptions.sync;
                    return [
                        4,
                        (0, _sources.watchSources)(filenames, includeDotfiles)
                    ];
                case 1:
                    watcher = _state.sent();
                    watcher.on("ready", function() {
                        if (!quiet) {
                            console.info("Watching for file changes.");
                        }
                    });
                    watcher.on("unlink", function() {
                        var _ref = _async_to_generator(function(filename) {
                            var sourcemapPath, sourcemapExists, err;
                            return _ts_generator(this, function(_state) {
                                switch(_state.label){
                                    case 0:
                                        _state.trys.push([
                                            0,
                                            8,
                                            ,
                                            9
                                        ]);
                                        if (!(0, _sources.isCompilableExtension)(filename, extensions)) return [
                                            3,
                                            5
                                        ];
                                        return [
                                            4,
                                            unlink((0, _util.getDest)(filename, outDir, stripLeadingPaths, ".js"))
                                        ];
                                    case 1:
                                        _state.sent();
                                        sourcemapPath = (0, _util.getDest)(filename, outDir, stripLeadingPaths, ".js.map");
                                        return [
                                            4,
                                            (0, _util.exists)(sourcemapPath)
                                        ];
                                    case 2:
                                        sourcemapExists = _state.sent();
                                        if (!sourcemapExists) return [
                                            3,
                                            4
                                        ];
                                        return [
                                            4,
                                            unlink(sourcemapPath)
                                        ];
                                    case 3:
                                        _state.sent();
                                        _state.label = 4;
                                    case 4:
                                        return [
                                            3,
                                            7
                                        ];
                                    case 5:
                                        if (!copyFiles) return [
                                            3,
                                            7
                                        ];
                                        return [
                                            4,
                                            unlink((0, _util.getDest)(filename, outDir, stripLeadingPaths))
                                        ];
                                    case 6:
                                        _state.sent();
                                        _state.label = 7;
                                    case 7:
                                        return [
                                            3,
                                            9
                                        ];
                                    case 8:
                                        err = _state.sent();
                                        if (err.code !== "ENOENT") {
                                            console.error(err.stack);
                                        }
                                        return [
                                            3,
                                            9
                                        ];
                                    case 9:
                                        return [
                                            2
                                        ];
                                }
                            });
                        });
                        return function(filename) {
                            return _ref.apply(this, arguments);
                        };
                    }());
                    for(_i = 0, _iter = [
                        "add",
                        "change"
                    ]; _i < _iter.length; _i++){
                        type = _iter[_i];
                        watcher.on(type, function() {
                            var _ref = _async_to_generator(function(filename) {
                                var start, result, end, err, start1, result1, end1, err1;
                                return _ts_generator(this, function(_state) {
                                    switch(_state.label){
                                        case 0:
                                            if (!(0, _sources.isCompilableExtension)(filename, extensions)) return [
                                                3,
                                                5
                                            ];
                                            _state.label = 1;
                                        case 1:
                                            _state.trys.push([
                                                1,
                                                3,
                                                ,
                                                4
                                            ]);
                                            start = process.hrtime();
                                            return [
                                                4,
                                                (0, _dirWorker.default)({
                                                    filename: filename,
                                                    outDir: outDir,
                                                    sync: sync,
                                                    cliOptions: cliOptions,
                                                    swcOptions: swcOptions,
                                                    outFileExtension: outFileExtension
                                                })
                                            ];
                                        case 2:
                                            result = _state.sent();
                                            if (!quiet && result === _constants.CompileStatus.Compiled) {
                                                end = process.hrtime(start);
                                                console.log("Successfully compiled ".concat(filename, " with swc (%dms)"), (end[1] / 1000000).toFixed(2));
                                            }
                                            return [
                                                3,
                                                4
                                            ];
                                        case 3:
                                            err = _state.sent();
                                            console.error(err.message);
                                            return [
                                                3,
                                                4
                                            ];
                                        case 4:
                                            return [
                                                3,
                                                9
                                            ];
                                        case 5:
                                            if (!copyFiles) return [
                                                3,
                                                9
                                            ];
                                            _state.label = 6;
                                        case 6:
                                            _state.trys.push([
                                                6,
                                                8,
                                                ,
                                                9
                                            ]);
                                            start1 = process.hrtime();
                                            return [
                                                4,
                                                handleCopy(filename, outDir, stripLeadingPaths)
                                            ];
                                        case 7:
                                            result1 = _state.sent();
                                            if (!quiet && result1 === _constants.CompileStatus.Copied) {
                                                end1 = process.hrtime(start1);
                                                console.log("Successfully copied ".concat(filename, " with swc (%dms)"), (end1[1] / 1000000).toFixed(2));
                                            }
                                            return [
                                                3,
                                                9
                                            ];
                                        case 8:
                                            err1 = _state.sent();
                                            console.error("Failed to copy ".concat(filename));
                                            console.error(err1.message);
                                            return [
                                                3,
                                                9
                                            ];
                                        case 9:
                                            return [
                                                2
                                            ];
                                    }
                                });
                            });
                            return function(filename) {
                                return _ref.apply(this, arguments);
                            };
                        }());
                    }
                    return [
                        2
                    ];
            }
        });
    });
    return _watchCompilation.apply(this, arguments);
}
function dir(_) {
    return _dir.apply(this, arguments);
}
function _dir() {
    _dir = _async_to_generator(function(param) {
        var cliOptions, swcOptions, watch;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    cliOptions = param.cliOptions, swcOptions = param.swcOptions;
                    watch = cliOptions.watch;
                    return [
                        4,
                        beforeStartCompilation(cliOptions)
                    ];
                case 1:
                    _state.sent();
                    return [
                        4,
                        initialCompilation(cliOptions, swcOptions)
                    ];
                case 2:
                    _state.sent();
                    if (!watch) return [
                        3,
                        4
                    ];
                    return [
                        4,
                        watchCompilation(cliOptions, swcOptions)
                    ];
                case 3:
                    _state.sent();
                    _state.label = 4;
                case 4:
                    return [
                        2
                    ];
            }
        });
    } //# sourceMappingURL=dir.js.map
    );
    return _dir.apply(this, arguments);
}
