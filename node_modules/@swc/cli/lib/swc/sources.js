"use strict";
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    globSources: function globSources1() {
        return globSources;
    },
    isCompilableExtension: function isCompilableExtension1() {
        return isCompilableExtension;
    },
    requireChokidar: function requireChokidar1() {
        return requireChokidar;
    },
    splitCompilableAndCopyable: function splitCompilableAndCopyable1() {
        return splitCompilableAndCopyable;
    },
    watchSources: function watchSources1() {
        return watchSources;
    }
});
var _fastglob = /*#__PURE__*/ _interop_require_default(require("fast-glob"));
var _slash = /*#__PURE__*/ _interop_require_default(require("slash"));
var _fs = require("fs");
var _path = require("path");
var _minimatch = require("minimatch");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || (typeof obj === "undefined" ? "undefined" : _type_of(obj)) !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function globSources(sources, only, ignore) {
    return _globSources.apply(this, arguments);
}
function _globSources() {
    _globSources = _async_to_generator(function(sources, only, ignore) {
        var includeDotfiles, globConfig, files, f;
        var _arguments = arguments;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    includeDotfiles = _arguments.length > 3 && _arguments[3] !== void 0 ? _arguments[3] : false;
                    globConfig = {
                        dot: includeDotfiles,
                        ignore: ignore
                    };
                    return [
                        4,
                        Promise.all(sources.filter(function(source) {
                            return includeDotfiles || source === "." || !(0, _path.basename)(source).startsWith(".");
                        }).map(function(source) {
                            return new Promise(function(resolve) {
                                (0, _fs.stat)(source, function(err, stat) {
                                    if (err) {
                                        resolve([]);
                                        return;
                                    }
                                    if (!stat.isDirectory()) {
                                        resolve([
                                            source
                                        ]);
                                    } else {
                                        (0, _fastglob.default)((0, _slash.default)((0, _path.join)(source, "**")), globConfig).then(function(matches) {
                                            return resolve(matches);
                                        }).catch(function() {
                                            return resolve([]);
                                        });
                                    }
                                });
                            });
                        }))
                    ];
                case 1:
                    files = _state.sent();
                    f = files.flat().filter(function(filename) {
                        return !only || only.length === 0 || only.some(function(only) {
                            return (0, _minimatch.minimatch)((0, _slash.default)(filename), only);
                        });
                    });
                    return [
                        2,
                        Array.from(new Set(f))
                    ];
            }
        });
    });
    return _globSources.apply(this, arguments);
}
function isCompilableExtension(filename, allowedExtension) {
    var ext = (0, _path.extname)(filename);
    return allowedExtension.includes(ext);
}
function splitCompilableAndCopyable(files, allowedExtension, copyFiles) {
    var compilable = [];
    var copyable = [];
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var file = _step.value;
            var isCompilable = isCompilableExtension(file, allowedExtension);
            if (isCompilable) {
                compilable.push(file);
            } else if (copyFiles) {
                copyable.push(file);
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return [
        compilable,
        copyable
    ];
}
function requireChokidar() {
    return _requireChokidar.apply(this, arguments);
}
function _requireChokidar() {
    _requireChokidar = _async_to_generator(function() {
        var _ref, chokidar, err;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        2,
                        ,
                        3
                    ]);
                    return [
                        4,
                        Promise.resolve().then(function() {
                            return /*#__PURE__*/ _interop_require_wildcard(require("chokidar"));
                        })
                    ];
                case 1:
                    _ref = _state.sent(), chokidar = _ref.default;
                    return [
                        2,
                        chokidar
                    ];
                case 2:
                    err = _state.sent();
                    console.error("The optional dependency chokidar is not installed and is required for " + "--watch. Chokidar is likely not supported on your platform.");
                    throw err;
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
    return _requireChokidar.apply(this, arguments);
}
function watchSources(sources) {
    return _watchSources.apply(this, arguments);
}
function _watchSources() {
    _watchSources = _async_to_generator(function(sources) {
        var includeDotfiles, chokidar;
        var _arguments = arguments;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    includeDotfiles = _arguments.length > 1 && _arguments[1] !== void 0 ? _arguments[1] : false;
                    return [
                        4,
                        requireChokidar()
                    ];
                case 1:
                    chokidar = _state.sent();
                    return [
                        2,
                        chokidar.watch(sources, {
                            ignored: includeDotfiles ? undefined : function(filename) {
                                return (0, _path.basename)(filename).startsWith(".");
                            },
                            ignoreInitial: true,
                            awaitWriteFinish: {
                                stabilityThreshold: 50,
                                pollInterval: 10
                            }
                        })
                    ];
            }
        });
    } //# sourceMappingURL=sources.js.map
    );
    return _watchSources.apply(this, arguments);
}
