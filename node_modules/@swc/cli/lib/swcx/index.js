#!/usr/bin/env node
"use strict";
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _to_array(arr) {
    return _array_with_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_rest();
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _minversion = /*#__PURE__*/ _interop_require_default(require("semver/ranges/min-version"));
var _fs = require("fs");
var _path = /*#__PURE__*/ _interop_require_wildcard(require("path"));
var _child_process = require("child_process");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || (typeof obj === "undefined" ? "undefined" : _type_of(obj)) !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var BinWrapper = require("@mole-inc/bin-wrapper").BinWrapper;
var platform = process.platform, arch = process.arch;
var SWC_CLI_ENV = {
    // Allow to specify specific version of swc binary version to use
    SWCX_CORE_VERSION_OVERRIDE: "SWCX_CORE_VERSION_OVERRIDE",
    // Allow to skip check peer @swc/core version check
    SWCX_SKIP_CORE_VERSION_CHECK: "SWCX_SKIP_CORE_VERSION_CHECK"
};
/**
 * Determines version of the swc cli binary to use.
 *
 * By default, if cwd have a package.json already have dependency to @swc/core
 * will try to match those versions. Otherwise will use the latest
 * version available when @swc/cli is published.
 *
 * If `SWCX_CORE_VERSION_OVERRIDE` is set, both will be ignored and
 * explicitly will try to use the version specified. Note this won't ceck
 * validity of the version.
 */ var getCoreVersion = function() {
    var latestVersion = "1.3.24";
    if (process.env[SWC_CLI_ENV.SWCX_CORE_VERSION_OVERRIDE]) {
        console.log("Using swc core version from ".concat(SWC_CLI_ENV.SWCX_CORE_VERSION_OVERRIDE, " env variable"));
        return "".concat(process.env[SWC_CLI_ENV.SWCX_CORE_VERSION_OVERRIDE]);
    }
    try {
        if (!process.env[SWC_CLI_ENV.SWCX_SKIP_CORE_VERSION_CHECK]) {
            var cwdPackageManifestPath = _path.resolve(process.cwd(), "package.json");
            if ((0, _fs.existsSync)(cwdPackageManifestPath)) {
                var _require = require(cwdPackageManifestPath), dependencies = _require.dependencies, devDependencies = _require.devDependencies;
                var swcCoreVersion = (dependencies === null || dependencies === void 0 ? void 0 : dependencies["@swc/core"]) || (devDependencies === null || devDependencies === void 0 ? void 0 : devDependencies["@swc/core"]);
                if (swcCoreVersion) {
                    return (0, _minversion.default)(swcCoreVersion);
                }
            } else {
                return latestVersion;
            }
        } else {
            console.log("Skipping swc core version check due to ".concat(SWC_CLI_ENV.SWCX_SKIP_CORE_VERSION_CHECK, " env variable"));
        }
    } catch (e) {
        console.warn("Failed to determine swc core version from package.json, using latest available version ".concat(latestVersion, " instead"), e);
    }
    return latestVersion;
};
var isMusl = function() {
    return function() {
        var isMusl = function isMusl() {
            if (!process.report || typeof process.report.getReport !== "function") {
                try {
                    return (0, _fs.readFileSync)("/usr/bin/ldd", "utf8").includes("musl");
                } catch (e) {
                    return true;
                }
            } else {
                var glibcVersionRuntime = process.report.getReport().header.glibcVersionRuntime;
                return !glibcVersionRuntime;
            }
        };
        return isMusl();
    }();
};
var getBinaryName = function() {
    var platformBinaryMap = {
        win32: {
            x64: "swc-win32-x64-msvc.exe",
            ia32: "swc-win32-ia32-msvc.exe",
            arm64: "swc-win32-arm64-msvc.exe"
        },
        darwin: {
            x64: "swc-darwin-x64",
            arm64: "swc-darwin-arm64"
        },
        linux: {
            x64: "swc-linux-x64-".concat(isMusl() ? "musl" : "gnu"),
            arm64: "swc-linux-arm64-".concat(isMusl() ? "musl" : "gnu"),
            arm: "swc-linux-arm64-gnu"
        }
    };
    var binaryName = platformBinaryMap[platform][arch];
    if (!binaryName) {
        throw new Error("Unsupported platform: binary ".concat(binaryName, " for '").concat(platform, " ").concat(arch, "' is not available"));
    }
    return binaryName;
};
var executeBinary = function() {
    var _ref = _async_to_generator(function() {
        var coreVersion, releaseBase, binaryName, bin, binPath, _process_argv, args, options;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    coreVersion = getCoreVersion();
                    releaseBase = "https://github.com/swc-project/swc/releases/download/v".concat(coreVersion);
                    binaryName = getBinaryName();
                    bin = new BinWrapper({
                        // do not explicitly run the binary to check existence to avoid
                        // redundant spawn
                        skipCheck: true
                    }).src("".concat(releaseBase, "/").concat(binaryName), platform, arch).dest("node_modules/.bin/swc-cli-".concat(coreVersion)).use(binaryName);
                    return [
                        4,
                        bin.run()
                    ];
                case 1:
                    _state.sent();
                    binPath = bin.path;
                    _process_argv = _to_array(process.argv), args = _process_argv.slice(2);
                    options = {
                        cwd: process.cwd(),
                        stdio: "inherit"
                    };
                    return [
                        2,
                        (0, _child_process.spawn)(binPath, args, options)
                    ];
            }
        });
    });
    return function executeBinary() {
        return _ref.apply(this, arguments);
    };
}();
executeBinary().catch(function(e) {
    return console.error(e);
}); //# sourceMappingURL=index.js.map
