"use strict";
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _core = require("@swc/core");
var _fs = require("fs");
var _path = require("path");
var _util = require("util");
var _options = /*#__PURE__*/ _interop_require_default(require("./options"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var write = (0, _util.promisify)(_fs.writeFile);
var makeDir = (0, _util.promisify)(_fs.mkdir);
_async_to_generator(function() {
    var spackOptions;
    function isUserDefinedEntry(name) {
        if (typeof spackOptions.entry === "string") {
            return spackOptions.entry === name;
        }
        if (Array.isArray(spackOptions.entry)) {
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = spackOptions.entry[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var e = _step.value;
                    if (e === name) {
                        return true;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
            return false;
        }
        return name in spackOptions.entry;
    }
    function build() {
        return _build.apply(this, arguments);
    }
    function _build() {
        _build = _async_to_generator(function() {
            var _spackOptions_output, bundleStart, output, bundleEnd, emitStart, emitEnd;
            return _ts_generator(this, function(_state) {
                switch(_state.label){
                    case 0:
                        bundleStart = process.hrtime();
                        return [
                            4,
                            (0, _core.bundle)(spackOptions)
                        ];
                    case 1:
                        output = _state.sent();
                        bundleEnd = process.hrtime(bundleStart);
                        console.info("Bundling done: ".concat(bundleEnd[0], "s ").concat(bundleEnd[1] / 1000000, "ms"));
                        emitStart = process.hrtime();
                        if (!((_spackOptions_output = spackOptions.output) === null || _spackOptions_output === void 0 ? void 0 : _spackOptions_output.path)) return [
                            3,
                            3
                        ];
                        return [
                            4,
                            Object.keys(output).map(function() {
                                var _ref = _async_to_generator(function(name) {
                                    var fullPath, ext, base, filename;
                                    return _ts_generator(this, function(_state) {
                                        switch(_state.label){
                                            case 0:
                                                fullPath = "";
                                                if (isUserDefinedEntry(name)) {
                                                    fullPath = (0, _path.join)(spackOptions.output.path, spackOptions.output.name.replace("[name]", name));
                                                } else {
                                                    ext = (0, _path.extname)(name);
                                                    base = (0, _path.basename)(name, ext);
                                                    filename = (0, _path.relative)(process.cwd(), name);
                                                    fullPath = (0, _path.join)(spackOptions.output.path, (0, _path.dirname)(filename), "".concat(base, ".js"));
                                                }
                                                return [
                                                    4,
                                                    makeDir((0, _path.dirname)(fullPath), {
                                                        recursive: true
                                                    })
                                                ];
                                            case 1:
                                                _state.sent();
                                                return [
                                                    4,
                                                    write(fullPath, output[name].code, "utf-8")
                                                ];
                                            case 2:
                                                _state.sent();
                                                if (!output[name].map) return [
                                                    3,
                                                    4
                                                ];
                                                return [
                                                    4,
                                                    write("".concat(fullPath, ".map"), output[name].map, "utf-8")
                                                ];
                                            case 3:
                                                _state.sent();
                                                _state.label = 4;
                                            case 4:
                                                return [
                                                    2
                                                ];
                                        }
                                    });
                                });
                                return function(name) {
                                    return _ref.apply(this, arguments);
                                };
                            }())
                        ];
                    case 2:
                        _state.sent();
                        return [
                            3,
                            4
                        ];
                    case 3:
                        throw new Error("Cannot print to stdout: not implemented yet");
                    case 4:
                        emitEnd = process.hrtime(emitStart);
                        console.info("Done: ".concat(emitEnd[0], "s ").concat(emitEnd[1] / 1000000, "ms"));
                        return [
                            2
                        ];
                }
            });
        });
        return _build.apply(this, arguments);
    }
    return _ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                return [
                    4,
                    (0, _options.default)(process.argv)
                ];
            case 1:
                spackOptions = _state.sent().spackOptions;
                // if (cliOptions.watch) {
                //     throw new Error('watch is not implemented yet')
                // }
                return [
                    4,
                    build()
                ];
            case 2:
                _state.sent();
                return [
                    2
                ];
        }
    });
})(); //# sourceMappingURL=index.js.map
