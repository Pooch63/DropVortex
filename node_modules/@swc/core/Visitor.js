"use strict";
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Visitor = void 0;
/**
 * @deprecated JavaScript API is deprecated. Please use Wasm plugin instead.
 */ var Visitor = /*#__PURE__*/ function() {
    function Visitor() {
        _class_call_check(this, Visitor);
    }
    _create_class(Visitor, [
        {
            key: "visitProgram",
            value: function visitProgram(n) {
                switch(n.type){
                    case "Module":
                        return this.visitModule(n);
                    case "Script":
                        return this.visitScript(n);
                }
            }
        },
        {
            key: "visitModule",
            value: function visitModule(m) {
                m.body = this.visitModuleItems(m.body);
                return m;
            }
        },
        {
            key: "visitScript",
            value: function visitScript(m) {
                m.body = this.visitStatements(m.body);
                return m;
            }
        },
        {
            key: "visitModuleItems",
            value: function visitModuleItems(items) {
                return items.map(this.visitModuleItem.bind(this));
            }
        },
        {
            key: "visitModuleItem",
            value: function visitModuleItem(n) {
                switch(n.type){
                    case "ExportDeclaration":
                    case "ExportDefaultDeclaration":
                    case "ExportNamedDeclaration":
                    case "ExportDefaultExpression":
                    case "ImportDeclaration":
                    case "ExportAllDeclaration":
                    case "TsImportEqualsDeclaration":
                    case "TsExportAssignment":
                    case "TsNamespaceExportDeclaration":
                        return this.visitModuleDeclaration(n);
                    default:
                        return this.visitStatement(n);
                }
            }
        },
        {
            key: "visitModuleDeclaration",
            value: function visitModuleDeclaration(n) {
                switch(n.type){
                    case "ExportDeclaration":
                        return this.visitExportDeclaration(n);
                    case "ExportDefaultDeclaration":
                        return this.visitExportDefaultDeclaration(n);
                    case "ExportNamedDeclaration":
                        return this.visitExportNamedDeclaration(n);
                    case "ExportDefaultExpression":
                        return this.visitExportDefaultExpression(n);
                    case "ImportDeclaration":
                        return this.visitImportDeclaration(n);
                    case "ExportAllDeclaration":
                        return this.visitExportAllDeclaration(n);
                    case "TsImportEqualsDeclaration":
                        return this.visitTsImportEqualsDeclaration(n);
                    case "TsExportAssignment":
                        return this.visitTsExportAssignment(n);
                    case "TsNamespaceExportDeclaration":
                        return this.visitTsNamespaceExportDeclaration(n);
                }
            }
        },
        {
            key: "visitTsNamespaceExportDeclaration",
            value: function visitTsNamespaceExportDeclaration(n) {
                n.id = this.visitBindingIdentifier(n.id);
                return n;
            }
        },
        {
            key: "visitTsExportAssignment",
            value: function visitTsExportAssignment(n) {
                n.expression = this.visitExpression(n.expression);
                return n;
            }
        },
        {
            key: "visitTsImportEqualsDeclaration",
            value: function visitTsImportEqualsDeclaration(n) {
                n.id = this.visitBindingIdentifier(n.id);
                n.moduleRef = this.visitTsModuleReference(n.moduleRef);
                return n;
            }
        },
        {
            key: "visitTsModuleReference",
            value: function visitTsModuleReference(n) {
                switch(n.type){
                    case "Identifier":
                        return this.visitIdentifierReference(n);
                    case "TsExternalModuleReference":
                        return this.visitTsExternalModuleReference(n);
                    case "TsQualifiedName":
                        return this.visitTsQualifiedName(n);
                }
            }
        },
        {
            key: "visitTsExternalModuleReference",
            value: function visitTsExternalModuleReference(n) {
                n.expression = this.visitStringLiteral(n.expression);
                return n;
            }
        },
        {
            key: "visitExportAllDeclaration",
            value: function visitExportAllDeclaration(n) {
                n.source = this.visitStringLiteral(n.source);
                return n;
            }
        },
        {
            key: "visitExportDefaultExpression",
            value: function visitExportDefaultExpression(n) {
                n.expression = this.visitExpression(n.expression);
                return n;
            }
        },
        {
            key: "visitExportNamedDeclaration",
            value: function visitExportNamedDeclaration(n) {
                n.specifiers = this.visitExportSpecifiers(n.specifiers);
                n.source = this.visitOptionalStringLiteral(n.source);
                return n;
            }
        },
        {
            key: "visitExportSpecifiers",
            value: function visitExportSpecifiers(nodes) {
                return nodes.map(this.visitExportSpecifier.bind(this));
            }
        },
        {
            key: "visitExportSpecifier",
            value: function visitExportSpecifier(n) {
                switch(n.type){
                    case "ExportDefaultSpecifier":
                        return this.visitExportDefaultSpecifier(n);
                    case "ExportNamespaceSpecifier":
                        return this.visitExportNamespaceSpecifier(n);
                    case "ExportSpecifier":
                        return this.visitNamedExportSpecifier(n);
                }
            }
        },
        {
            key: "visitNamedExportSpecifier",
            value: function visitNamedExportSpecifier(n) {
                if (n.exported) {
                    n.exported = this.visitModuleExportName(n.exported);
                }
                n.orig = this.visitModuleExportName(n.orig);
                return n;
            }
        },
        {
            key: "visitModuleExportName",
            value: function visitModuleExportName(n) {
                switch(n.type){
                    case "Identifier":
                        return this.visitIdentifier(n);
                    case "StringLiteral":
                        return this.visitStringLiteral(n);
                }
            }
        },
        {
            key: "visitExportNamespaceSpecifier",
            value: function visitExportNamespaceSpecifier(n) {
                n.name = this.visitModuleExportName(n.name);
                return n;
            }
        },
        {
            key: "visitExportDefaultSpecifier",
            value: function visitExportDefaultSpecifier(n) {
                n.exported = this.visitBindingIdentifier(n.exported);
                return n;
            }
        },
        {
            key: "visitOptionalStringLiteral",
            value: function visitOptionalStringLiteral(n) {
                if (n) {
                    return this.visitStringLiteral(n);
                }
            }
        },
        {
            key: "visitExportDefaultDeclaration",
            value: function visitExportDefaultDeclaration(n) {
                n.decl = this.visitDefaultDeclaration(n.decl);
                return n;
            }
        },
        {
            key: "visitDefaultDeclaration",
            value: function visitDefaultDeclaration(n) {
                switch(n.type){
                    case "ClassExpression":
                        return this.visitClassExpression(n);
                    case "FunctionExpression":
                        return this.visitFunctionExpression(n);
                    case "TsInterfaceDeclaration":
                        return this.visitTsInterfaceDeclaration(n);
                }
            }
        },
        {
            key: "visitFunctionExpression",
            value: function visitFunctionExpression(n) {
                n = this.visitFunction(n);
                if (n.identifier) {
                    n.identifier = this.visitBindingIdentifier(n.identifier);
                }
                return n;
            }
        },
        {
            key: "visitClassExpression",
            value: function visitClassExpression(n) {
                n = this.visitClass(n);
                if (n.identifier) {
                    n.identifier = this.visitBindingIdentifier(n.identifier);
                }
                return n;
            }
        },
        {
            key: "visitExportDeclaration",
            value: function visitExportDeclaration(n) {
                n.declaration = this.visitDeclaration(n.declaration);
                return n;
            }
        },
        {
            key: "visitArrayExpression",
            value: function visitArrayExpression(e) {
                if (e.elements) {
                    e.elements = e.elements.map(this.visitArrayElement.bind(this));
                }
                return e;
            }
        },
        {
            key: "visitArrayElement",
            value: function visitArrayElement(e) {
                if (e) {
                    return this.visitExprOrSpread(e);
                }
            }
        },
        {
            key: "visitExprOrSpread",
            value: function visitExprOrSpread(e) {
                return Object.assign(Object.assign({}, e), {
                    expression: this.visitExpression(e.expression)
                });
            }
        },
        {
            key: "visitExprOrSpreads",
            value: function visitExprOrSpreads(nodes) {
                return nodes.map(this.visitExprOrSpread.bind(this));
            }
        },
        {
            key: "visitSpreadElement",
            value: function visitSpreadElement(e) {
                e.arguments = this.visitExpression(e.arguments);
                return e;
            }
        },
        {
            key: "visitOptionalExpression",
            value: function visitOptionalExpression(e) {
                if (e) {
                    return this.visitExpression(e);
                }
            }
        },
        {
            key: "visitArrowFunctionExpression",
            value: function visitArrowFunctionExpression(e) {
                e.body = this.visitArrowBody(e.body);
                e.params = this.visitPatterns(e.params);
                e.returnType = this.visitTsTypeAnnotation(e.returnType);
                e.typeParameters = this.visitTsTypeParameterDeclaration(e.typeParameters);
                return e;
            }
        },
        {
            key: "visitArrowBody",
            value: function visitArrowBody(body) {
                switch(body.type){
                    case "BlockStatement":
                        return this.visitBlockStatement(body);
                    default:
                        return this.visitExpression(body);
                }
            }
        },
        {
            key: "visitBlockStatement",
            value: function visitBlockStatement(block) {
                block.stmts = this.visitStatements(block.stmts);
                return block;
            }
        },
        {
            key: "visitStatements",
            value: function visitStatements(stmts) {
                return stmts.map(this.visitStatement.bind(this));
            }
        },
        {
            key: "visitStatement",
            value: function visitStatement(stmt) {
                switch(stmt.type){
                    case "ClassDeclaration":
                    case "FunctionDeclaration":
                    case "TsEnumDeclaration":
                    case "TsInterfaceDeclaration":
                    case "TsModuleDeclaration":
                    case "TsTypeAliasDeclaration":
                    case "VariableDeclaration":
                        return this.visitDeclaration(stmt);
                    case "BreakStatement":
                        return this.visitBreakStatement(stmt);
                    case "BlockStatement":
                        return this.visitBlockStatement(stmt);
                    case "ContinueStatement":
                        return this.visitContinueStatement(stmt);
                    case "DebuggerStatement":
                        return this.visitDebuggerStatement(stmt);
                    case "DoWhileStatement":
                        return this.visitDoWhileStatement(stmt);
                    case "EmptyStatement":
                        return this.visitEmptyStatement(stmt);
                    case "ForInStatement":
                        return this.visitForInStatement(stmt);
                    case "ForOfStatement":
                        return this.visitForOfStatement(stmt);
                    case "ForStatement":
                        return this.visitForStatement(stmt);
                    case "IfStatement":
                        return this.visitIfStatement(stmt);
                    case "LabeledStatement":
                        return this.visitLabeledStatement(stmt);
                    case "ReturnStatement":
                        return this.visitReturnStatement(stmt);
                    case "SwitchStatement":
                        return this.visitSwitchStatement(stmt);
                    case "ThrowStatement":
                        return this.visitThrowStatement(stmt);
                    case "TryStatement":
                        return this.visitTryStatement(stmt);
                    case "WhileStatement":
                        return this.visitWhileStatement(stmt);
                    case "WithStatement":
                        return this.visitWithStatement(stmt);
                    case "ExpressionStatement":
                        return this.visitExpressionStatement(stmt);
                    default:
                        throw new Error("Unknown statement type: " + stmt.type);
                }
            }
        },
        {
            key: "visitSwitchStatement",
            value: function visitSwitchStatement(stmt) {
                stmt.discriminant = this.visitExpression(stmt.discriminant);
                stmt.cases = this.visitSwitchCases(stmt.cases);
                return stmt;
            }
        },
        {
            key: "visitSwitchCases",
            value: function visitSwitchCases(cases) {
                return cases.map(this.visitSwitchCase.bind(this));
            }
        },
        {
            key: "visitSwitchCase",
            value: function visitSwitchCase(c) {
                c.test = this.visitOptionalExpression(c.test);
                c.consequent = this.visitStatements(c.consequent);
                return c;
            }
        },
        {
            key: "visitIfStatement",
            value: function visitIfStatement(stmt) {
                stmt.test = this.visitExpression(stmt.test);
                stmt.consequent = this.visitStatement(stmt.consequent);
                stmt.alternate = this.visitOptionalStatement(stmt.alternate);
                return stmt;
            }
        },
        {
            key: "visitOptionalStatement",
            value: function visitOptionalStatement(stmt) {
                if (stmt) {
                    return this.visitStatement(stmt);
                }
            }
        },
        {
            key: "visitBreakStatement",
            value: function visitBreakStatement(stmt) {
                if (stmt.label) {
                    stmt.label = this.visitLabelIdentifier(stmt.label);
                }
                return stmt;
            }
        },
        {
            key: "visitWhileStatement",
            value: function visitWhileStatement(stmt) {
                stmt.test = this.visitExpression(stmt.test);
                stmt.body = this.visitStatement(stmt.body);
                return stmt;
            }
        },
        {
            key: "visitTryStatement",
            value: function visitTryStatement(stmt) {
                stmt.block = this.visitBlockStatement(stmt.block);
                stmt.handler = this.visitCatchClause(stmt.handler);
                if (stmt.finalizer) {
                    stmt.finalizer = this.visitBlockStatement(stmt.finalizer);
                }
                return stmt;
            }
        },
        {
            key: "visitCatchClause",
            value: function visitCatchClause(handler) {
                if (handler) {
                    if (handler.param) {
                        handler.param = this.visitPattern(handler.param);
                    }
                    handler.body = this.visitBlockStatement(handler.body);
                }
                return handler;
            }
        },
        {
            key: "visitThrowStatement",
            value: function visitThrowStatement(stmt) {
                stmt.argument = this.visitExpression(stmt.argument);
                return stmt;
            }
        },
        {
            key: "visitReturnStatement",
            value: function visitReturnStatement(stmt) {
                if (stmt.argument) {
                    stmt.argument = this.visitExpression(stmt.argument);
                }
                return stmt;
            }
        },
        {
            key: "visitLabeledStatement",
            value: function visitLabeledStatement(stmt) {
                stmt.label = this.visitLabelIdentifier(stmt.label);
                stmt.body = this.visitStatement(stmt.body);
                return stmt;
            }
        },
        {
            key: "visitForStatement",
            value: function visitForStatement(stmt) {
                if (stmt.init) {
                    if (stmt.init.type === "VariableDeclaration") {
                        stmt.init = this.visitVariableDeclaration(stmt.init);
                    } else {
                        stmt.init = this.visitOptionalExpression(stmt.init);
                    }
                }
                stmt.test = this.visitOptionalExpression(stmt.test);
                stmt.update = this.visitOptionalExpression(stmt.update);
                stmt.body = this.visitStatement(stmt.body);
                return stmt;
            }
        },
        {
            key: "visitForOfStatement",
            value: function visitForOfStatement(stmt) {
                if (stmt.left.type === "VariableDeclaration") {
                    stmt.left = this.visitVariableDeclaration(stmt.left);
                } else {
                    stmt.left = this.visitPattern(stmt.left);
                }
                stmt.right = this.visitExpression(stmt.right);
                stmt.body = this.visitStatement(stmt.body);
                return stmt;
            }
        },
        {
            key: "visitForInStatement",
            value: function visitForInStatement(stmt) {
                if (stmt.left.type === "VariableDeclaration") {
                    stmt.left = this.visitVariableDeclaration(stmt.left);
                } else {
                    stmt.left = this.visitPattern(stmt.left);
                }
                stmt.right = this.visitExpression(stmt.right);
                stmt.body = this.visitStatement(stmt.body);
                return stmt;
            }
        },
        {
            key: "visitEmptyStatement",
            value: function visitEmptyStatement(stmt) {
                return stmt;
            }
        },
        {
            key: "visitDoWhileStatement",
            value: function visitDoWhileStatement(stmt) {
                stmt.body = this.visitStatement(stmt.body);
                stmt.test = this.visitExpression(stmt.test);
                return stmt;
            }
        },
        {
            key: "visitDebuggerStatement",
            value: function visitDebuggerStatement(stmt) {
                return stmt;
            }
        },
        {
            key: "visitWithStatement",
            value: function visitWithStatement(stmt) {
                stmt.object = this.visitExpression(stmt.object);
                stmt.body = this.visitStatement(stmt.body);
                return stmt;
            }
        },
        {
            key: "visitDeclaration",
            value: function visitDeclaration(decl) {
                switch(decl.type){
                    case "ClassDeclaration":
                        return this.visitClassDeclaration(decl);
                    case "FunctionDeclaration":
                        return this.visitFunctionDeclaration(decl);
                    case "TsEnumDeclaration":
                        return this.visitTsEnumDeclaration(decl);
                    case "TsInterfaceDeclaration":
                        return this.visitTsInterfaceDeclaration(decl);
                    case "TsModuleDeclaration":
                        return this.visitTsModuleDeclaration(decl);
                    case "TsTypeAliasDeclaration":
                        return this.visitTsTypeAliasDeclaration(decl);
                    case "VariableDeclaration":
                        return this.visitVariableDeclaration(decl);
                }
            }
        },
        {
            key: "visitVariableDeclaration",
            value: function visitVariableDeclaration(n) {
                n.declarations = this.visitVariableDeclarators(n.declarations);
                return n;
            }
        },
        {
            key: "visitVariableDeclarators",
            value: function visitVariableDeclarators(nodes) {
                return nodes.map(this.visitVariableDeclarator.bind(this));
            }
        },
        {
            key: "visitVariableDeclarator",
            value: function visitVariableDeclarator(n) {
                n.id = this.visitPattern(n.id);
                n.init = this.visitOptionalExpression(n.init);
                return n;
            }
        },
        {
            key: "visitTsTypeAliasDeclaration",
            value: function visitTsTypeAliasDeclaration(n) {
                n.id = this.visitBindingIdentifier(n.id);
                n.typeAnnotation = this.visitTsType(n.typeAnnotation);
                n.typeParams = this.visitTsTypeParameterDeclaration(n.typeParams);
                return n;
            }
        },
        {
            key: "visitTsModuleDeclaration",
            value: function visitTsModuleDeclaration(n) {
                n.id = this.visitTsModuleName(n.id);
                if (n.body) {
                    n.body = this.visitTsNamespaceBody(n.body);
                }
                return n;
            }
        },
        {
            key: "visitTsModuleName",
            value: function visitTsModuleName(n) {
                switch(n.type){
                    case "Identifier":
                        return this.visitBindingIdentifier(n);
                    case "StringLiteral":
                        return this.visitStringLiteral(n);
                }
            }
        },
        {
            key: "visitTsNamespaceBody",
            value: function visitTsNamespaceBody(n) {
                if (n) {
                    switch(n.type){
                        case "TsModuleBlock":
                            return this.visitTsModuleBlock(n);
                        case "TsNamespaceDeclaration":
                            return this.visitTsNamespaceDeclaration(n);
                    }
                }
            }
        },
        {
            key: "visitTsNamespaceDeclaration",
            value: function visitTsNamespaceDeclaration(n) {
                var body = this.visitTsNamespaceBody(n.body);
                if (body) {
                    n.body = body;
                }
                n.id = this.visitBindingIdentifier(n.id);
                return n;
            }
        },
        {
            key: "visitTsModuleBlock",
            value: function visitTsModuleBlock(n) {
                n.body = this.visitModuleItems(n.body);
                return n;
            }
        },
        {
            key: "visitTsInterfaceDeclaration",
            value: function visitTsInterfaceDeclaration(n) {
                n.id = this.visitBindingIdentifier(n.id);
                n.typeParams = this.visitTsTypeParameterDeclaration(n.typeParams);
                n.extends = this.visitTsExpressionsWithTypeArguments(n.extends);
                n.body = this.visitTsInterfaceBody(n.body);
                return n;
            }
        },
        {
            key: "visitTsInterfaceBody",
            value: function visitTsInterfaceBody(n) {
                n.body = this.visitTsTypeElements(n.body);
                return n;
            }
        },
        {
            key: "visitTsTypeElements",
            value: function visitTsTypeElements(nodes) {
                return nodes.map(this.visitTsTypeElement.bind(this));
            }
        },
        {
            key: "visitTsTypeElement",
            value: function visitTsTypeElement(n) {
                switch(n.type){
                    case "TsCallSignatureDeclaration":
                        return this.visitTsCallSignatureDeclaration(n);
                    case "TsConstructSignatureDeclaration":
                        return this.visitTsConstructSignatureDeclaration(n);
                    case "TsPropertySignature":
                        return this.visitTsPropertySignature(n);
                    case "TsGetterSignature":
                        return this.visitTsGetterSignature(n);
                    case "TsSetterSignature":
                        return this.visitTsSetterSignature(n);
                    case "TsMethodSignature":
                        return this.visitTsMethodSignature(n);
                    case "TsIndexSignature":
                        return this.visitTsIndexSignature(n);
                }
            }
        },
        {
            key: "visitTsCallSignatureDeclaration",
            value: function visitTsCallSignatureDeclaration(n) {
                n.params = this.visitTsFnParameters(n.params);
                n.typeAnnotation = this.visitTsTypeAnnotation(n.typeAnnotation);
                return n;
            }
        },
        {
            key: "visitTsConstructSignatureDeclaration",
            value: function visitTsConstructSignatureDeclaration(n) {
                n.params = this.visitTsFnParameters(n.params);
                n.typeAnnotation = this.visitTsTypeAnnotation(n.typeAnnotation);
                return n;
            }
        },
        {
            key: "visitTsPropertySignature",
            value: function visitTsPropertySignature(n) {
                n.params = this.visitTsFnParameters(n.params);
                n.typeAnnotation = this.visitTsTypeAnnotation(n.typeAnnotation);
                return n;
            }
        },
        {
            key: "visitTsGetterSignature",
            value: function visitTsGetterSignature(n) {
                n.typeAnnotation = this.visitTsTypeAnnotation(n.typeAnnotation);
                return n;
            }
        },
        {
            key: "visitTsSetterSignature",
            value: function visitTsSetterSignature(n) {
                n.param = this.visitTsFnParameter(n.param);
                return n;
            }
        },
        {
            key: "visitTsMethodSignature",
            value: function visitTsMethodSignature(n) {
                n.params = this.visitTsFnParameters(n.params);
                n.typeAnn = this.visitTsTypeAnnotation(n.typeAnn);
                return n;
            }
        },
        {
            key: "visitTsEnumDeclaration",
            value: function visitTsEnumDeclaration(n) {
                n.id = this.visitIdentifier(n.id);
                n.members = this.visitTsEnumMembers(n.members);
                return n;
            }
        },
        {
            key: "visitTsEnumMembers",
            value: function visitTsEnumMembers(nodes) {
                return nodes.map(this.visitTsEnumMember.bind(this));
            }
        },
        {
            key: "visitTsEnumMember",
            value: function visitTsEnumMember(n) {
                n.id = this.visitTsEnumMemberId(n.id);
                n.init = this.visitOptionalExpression(n.init);
                return n;
            }
        },
        {
            key: "visitTsEnumMemberId",
            value: function visitTsEnumMemberId(n) {
                switch(n.type){
                    case "Identifier":
                        return this.visitBindingIdentifier(n);
                    case "StringLiteral":
                        return this.visitStringLiteral(n);
                }
            }
        },
        {
            key: "visitFunctionDeclaration",
            value: function visitFunctionDeclaration(decl) {
                decl.identifier = this.visitIdentifier(decl.identifier);
                decl = this.visitFunction(decl);
                return decl;
            }
        },
        {
            key: "visitClassDeclaration",
            value: function visitClassDeclaration(decl) {
                decl = this.visitClass(decl);
                decl.identifier = this.visitIdentifier(decl.identifier);
                return decl;
            }
        },
        {
            key: "visitClassBody",
            value: function visitClassBody(members) {
                return members.map(this.visitClassMember.bind(this));
            }
        },
        {
            key: "visitClassMember",
            value: function visitClassMember(member) {
                switch(member.type){
                    case "ClassMethod":
                        return this.visitClassMethod(member);
                    case "ClassProperty":
                        return this.visitClassProperty(member);
                    case "Constructor":
                        return this.visitConstructor(member);
                    case "PrivateMethod":
                        return this.visitPrivateMethod(member);
                    case "PrivateProperty":
                        return this.visitPrivateProperty(member);
                    case "TsIndexSignature":
                        return this.visitTsIndexSignature(member);
                    case "EmptyStatement":
                        return this.visitEmptyStatement(member);
                    case "StaticBlock":
                        return this.visitStaticBlock(member);
                }
            }
        },
        {
            key: "visitTsIndexSignature",
            value: function visitTsIndexSignature(n) {
                n.params = this.visitTsFnParameters(n.params);
                if (n.typeAnnotation) n.typeAnnotation = this.visitTsTypeAnnotation(n.typeAnnotation);
                return n;
            }
        },
        {
            key: "visitTsFnParameters",
            value: function visitTsFnParameters(params) {
                return params.map(this.visitTsFnParameter.bind(this));
            }
        },
        {
            key: "visitTsFnParameter",
            value: function visitTsFnParameter(n) {
                n.typeAnnotation = this.visitTsTypeAnnotation(n.typeAnnotation);
                return n;
            }
        },
        {
            key: "visitPrivateProperty",
            value: function visitPrivateProperty(n) {
                n.decorators = this.visitDecorators(n.decorators);
                n.key = this.visitPrivateName(n.key);
                n.typeAnnotation = this.visitTsTypeAnnotation(n.typeAnnotation);
                n.value = this.visitOptionalExpression(n.value);
                return n;
            }
        },
        {
            key: "visitPrivateMethod",
            value: function visitPrivateMethod(n) {
                n.accessibility = this.visitAccessibility(n.accessibility);
                n.function = this.visitFunction(n.function);
                n.key = this.visitPrivateName(n.key);
                return n;
            }
        },
        {
            key: "visitPrivateName",
            value: function visitPrivateName(n) {
                return n;
            }
        },
        {
            key: "visitConstructor",
            value: function visitConstructor(n) {
                n.accessibility = this.visitAccessibility(n.accessibility);
                n.key = this.visitPropertyName(n.key);
                n.params = this.visitConstructorParameters(n.params);
                if (n.body) {
                    n.body = this.visitBlockStatement(n.body);
                }
                return n;
            }
        },
        {
            key: "visitConstructorParameters",
            value: function visitConstructorParameters(nodes) {
                return nodes.map(this.visitConstructorParameter.bind(this));
            }
        },
        {
            key: "visitConstructorParameter",
            value: function visitConstructorParameter(n) {
                switch(n.type){
                    case "TsParameterProperty":
                        return this.visitTsParameterProperty(n);
                    default:
                        return this.visitParameter(n);
                }
            }
        },
        {
            key: "visitStaticBlock",
            value: function visitStaticBlock(n) {
                n.body = this.visitBlockStatement(n.body);
                return n;
            }
        },
        {
            key: "visitTsParameterProperty",
            value: function visitTsParameterProperty(n) {
                n.accessibility = this.visitAccessibility(n.accessibility);
                n.decorators = this.visitDecorators(n.decorators);
                n.param = this.visitTsParameterPropertyParameter(n.param);
                return n;
            }
        },
        {
            key: "visitTsParameterPropertyParameter",
            value: function visitTsParameterPropertyParameter(n) {
                n.typeAnnotation = this.visitTsTypeAnnotation(n.typeAnnotation);
                return n;
            }
        },
        {
            key: "visitPropertyName",
            value: function visitPropertyName(key) {
                switch(key.type){
                    case "Identifier":
                        return this.visitBindingIdentifier(key);
                    case "StringLiteral":
                        return this.visitStringLiteral(key);
                    case "NumericLiteral":
                        return this.visitNumericLiteral(key);
                    case "BigIntLiteral":
                        return this.visitBigIntLiteral(key);
                    default:
                        return this.visitComputedPropertyKey(key);
                }
            }
        },
        {
            key: "visitAccessibility",
            value: function visitAccessibility(n) {
                return n;
            }
        },
        {
            key: "visitClassProperty",
            value: function visitClassProperty(n) {
                n.accessibility = this.visitAccessibility(n.accessibility);
                n.decorators = this.visitDecorators(n.decorators);
                n.key = this.visitPropertyName(n.key);
                n.typeAnnotation = this.visitTsTypeAnnotation(n.typeAnnotation);
                n.value = this.visitOptionalExpression(n.value);
                return n;
            }
        },
        {
            key: "visitClassMethod",
            value: function visitClassMethod(n) {
                n.accessibility = this.visitAccessibility(n.accessibility);
                n.function = this.visitFunction(n.function);
                n.key = this.visitPropertyName(n.key);
                return n;
            }
        },
        {
            key: "visitComputedPropertyKey",
            value: function visitComputedPropertyKey(n) {
                n.expression = this.visitExpression(n.expression);
                return n;
            }
        },
        {
            key: "visitClass",
            value: function visitClass(n) {
                n.decorators = this.visitDecorators(n.decorators);
                n.superClass = this.visitOptionalExpression(n.superClass);
                n.superTypeParams = this.visitTsTypeParameterInstantiation(n.superTypeParams);
                if (n.implements) {
                    n.implements = this.visitTsExpressionsWithTypeArguments(n.implements);
                }
                n.body = this.visitClassBody(n.body);
                return n;
            }
        },
        {
            key: "visitFunction",
            value: function visitFunction(n) {
                n.decorators = this.visitDecorators(n.decorators);
                n.params = this.visitParameters(n.params);
                if (n.body) {
                    n.body = this.visitBlockStatement(n.body);
                }
                n.returnType = this.visitTsTypeAnnotation(n.returnType);
                n.typeParameters = this.visitTsTypeParameterDeclaration(n.typeParameters);
                return n;
            }
        },
        {
            key: "visitTsExpressionsWithTypeArguments",
            value: function visitTsExpressionsWithTypeArguments(nodes) {
                return nodes.map(this.visitTsExpressionWithTypeArguments.bind(this));
            }
        },
        {
            key: "visitTsExpressionWithTypeArguments",
            value: function visitTsExpressionWithTypeArguments(n) {
                n.expression = this.visitExpression(n.expression);
                n.typeArguments = this.visitTsTypeParameterInstantiation(n.typeArguments);
                return n;
            }
        },
        {
            key: "visitTsTypeParameterInstantiation",
            value: function visitTsTypeParameterInstantiation(n) {
                if (n) {
                    n.params = this.visitTsTypes(n.params);
                }
                return n;
            }
        },
        {
            key: "visitTsTypes",
            value: function visitTsTypes(nodes) {
                return nodes.map(this.visitTsType.bind(this));
            }
        },
        {
            key: "visitTsEntityName",
            value: function visitTsEntityName(n) {
                switch(n.type){
                    case "Identifier":
                        return this.visitBindingIdentifier(n);
                    case "TsQualifiedName":
                        return this.visitTsQualifiedName(n);
                }
            }
        },
        {
            key: "visitTsQualifiedName",
            value: function visitTsQualifiedName(n) {
                n.left = this.visitTsEntityName(n.left);
                n.right = this.visitIdentifier(n.right);
                return n;
            }
        },
        {
            key: "visitDecorators",
            value: function visitDecorators(nodes) {
                if (nodes) {
                    return nodes.map(this.visitDecorator.bind(this));
                }
            }
        },
        {
            key: "visitDecorator",
            value: function visitDecorator(n) {
                n.expression = this.visitExpression(n.expression);
                return n;
            }
        },
        {
            key: "visitExpressionStatement",
            value: function visitExpressionStatement(stmt) {
                stmt.expression = this.visitExpression(stmt.expression);
                return stmt;
            }
        },
        {
            key: "visitContinueStatement",
            value: function visitContinueStatement(stmt) {
                if (stmt.label) {
                    stmt.label = this.visitLabelIdentifier(stmt.label);
                }
                return stmt;
            }
        },
        {
            key: "visitExpression",
            value: function visitExpression(n) {
                switch(n.type){
                    case "ArrayExpression":
                        return this.visitArrayExpression(n);
                    case "ArrowFunctionExpression":
                        return this.visitArrowFunctionExpression(n);
                    case "AssignmentExpression":
                        return this.visitAssignmentExpression(n);
                    case "AwaitExpression":
                        return this.visitAwaitExpression(n);
                    case "BigIntLiteral":
                        return this.visitBigIntLiteral(n);
                    case "BinaryExpression":
                        return this.visitBinaryExpression(n);
                    case "BooleanLiteral":
                        return this.visitBooleanLiteral(n);
                    case "CallExpression":
                        return this.visitCallExpression(n);
                    case "ClassExpression":
                        return this.visitClassExpression(n);
                    case "ConditionalExpression":
                        return this.visitConditionalExpression(n);
                    case "FunctionExpression":
                        return this.visitFunctionExpression(n);
                    case "Identifier":
                        return this.visitIdentifierReference(n);
                    case "JSXElement":
                        return this.visitJSXElement(n);
                    case "JSXEmptyExpression":
                        return this.visitJSXEmptyExpression(n);
                    case "JSXFragment":
                        return this.visitJSXFragment(n);
                    case "JSXMemberExpression":
                        return this.visitJSXMemberExpression(n);
                    case "JSXNamespacedName":
                        return this.visitJSXNamespacedName(n);
                    case "JSXText":
                        return this.visitJSXText(n);
                    case "MemberExpression":
                        return this.visitMemberExpression(n);
                    case "SuperPropExpression":
                        return this.visitSuperPropExpression(n);
                    case "MetaProperty":
                        return this.visitMetaProperty(n);
                    case "NewExpression":
                        return this.visitNewExpression(n);
                    case "NullLiteral":
                        return this.visitNullLiteral(n);
                    case "NumericLiteral":
                        return this.visitNumericLiteral(n);
                    case "ObjectExpression":
                        return this.visitObjectExpression(n);
                    case "ParenthesisExpression":
                        return this.visitParenthesisExpression(n);
                    case "PrivateName":
                        return this.visitPrivateName(n);
                    case "RegExpLiteral":
                        return this.visitRegExpLiteral(n);
                    case "SequenceExpression":
                        return this.visitSequenceExpression(n);
                    case "StringLiteral":
                        return this.visitStringLiteral(n);
                    case "TaggedTemplateExpression":
                        return this.visitTaggedTemplateExpression(n);
                    case "TemplateLiteral":
                        return this.visitTemplateLiteral(n);
                    case "ThisExpression":
                        return this.visitThisExpression(n);
                    case "TsAsExpression":
                        return this.visitTsAsExpression(n);
                    case "TsSatisfiesExpression":
                        return this.visitTsSatisfiesExpression(n);
                    case "TsNonNullExpression":
                        return this.visitTsNonNullExpression(n);
                    case "TsTypeAssertion":
                        return this.visitTsTypeAssertion(n);
                    case "TsConstAssertion":
                        return this.visitTsConstAssertion(n);
                    case "TsInstantiation":
                        return this.visitTsInstantiation(n);
                    case "UnaryExpression":
                        return this.visitUnaryExpression(n);
                    case "UpdateExpression":
                        return this.visitUpdateExpression(n);
                    case "YieldExpression":
                        return this.visitYieldExpression(n);
                    case "OptionalChainingExpression":
                        return this.visitOptionalChainingExpression(n);
                    case "Invalid":
                        return n;
                }
            }
        },
        {
            key: "visitOptionalChainingExpression",
            value: function visitOptionalChainingExpression(n) {
                n.base = this.visitMemberExpressionOrOptionalChainingCall(n.base);
                return n;
            }
        },
        {
            key: "visitMemberExpressionOrOptionalChainingCall",
            value: function visitMemberExpressionOrOptionalChainingCall(n) {
                switch(n.type){
                    case "MemberExpression":
                        return this.visitMemberExpression(n);
                    case "CallExpression":
                        return this.visitOptionalChainingCall(n);
                }
            }
        },
        {
            key: "visitOptionalChainingCall",
            value: function visitOptionalChainingCall(n) {
                n.callee = this.visitExpression(n.callee);
                n.arguments = this.visitExprOrSpreads(n.arguments);
                if (n.typeArguments) n.typeArguments = this.visitTsTypeParameterInstantiation(n.typeArguments);
                return n;
            }
        },
        {
            key: "visitAssignmentExpression",
            value: function visitAssignmentExpression(n) {
                n.left = this.visitPatternOrExpression(n.left);
                n.right = this.visitExpression(n.right);
                return n;
            }
        },
        {
            key: "visitPatternOrExpression",
            value: function visitPatternOrExpression(n) {
                switch(n.type){
                    case "ObjectPattern":
                    case "ArrayPattern":
                    case "Identifier":
                    case "AssignmentPattern":
                    case "RestElement":
                        return this.visitPattern(n);
                    default:
                        return this.visitExpression(n);
                }
            }
        },
        {
            key: "visitYieldExpression",
            value: function visitYieldExpression(n) {
                n.argument = this.visitOptionalExpression(n.argument);
                return n;
            }
        },
        {
            key: "visitUpdateExpression",
            value: function visitUpdateExpression(n) {
                n.argument = this.visitExpression(n.argument);
                return n;
            }
        },
        {
            key: "visitUnaryExpression",
            value: function visitUnaryExpression(n) {
                n.argument = this.visitExpression(n.argument);
                return n;
            }
        },
        {
            key: "visitTsTypeAssertion",
            value: function visitTsTypeAssertion(n) {
                n.expression = this.visitExpression(n.expression);
                n.typeAnnotation = this.visitTsType(n.typeAnnotation);
                return n;
            }
        },
        {
            key: "visitTsConstAssertion",
            value: function visitTsConstAssertion(n) {
                n.expression = this.visitExpression(n.expression);
                return n;
            }
        },
        {
            key: "visitTsInstantiation",
            value: function visitTsInstantiation(n) {
                n.expression = this.visitExpression(n.expression);
                return n;
            }
        },
        {
            key: "visitTsNonNullExpression",
            value: function visitTsNonNullExpression(n) {
                n.expression = this.visitExpression(n.expression);
                return n;
            }
        },
        {
            key: "visitTsAsExpression",
            value: function visitTsAsExpression(n) {
                n.expression = this.visitExpression(n.expression);
                n.typeAnnotation = this.visitTsType(n.typeAnnotation);
                return n;
            }
        },
        {
            key: "visitTsSatisfiesExpression",
            value: function visitTsSatisfiesExpression(n) {
                n.expression = this.visitExpression(n.expression);
                n.typeAnnotation = this.visitTsType(n.typeAnnotation);
                return n;
            }
        },
        {
            key: "visitThisExpression",
            value: function visitThisExpression(n) {
                return n;
            }
        },
        {
            key: "visitTemplateLiteral",
            value: function visitTemplateLiteral(n) {
                n.expressions = n.expressions.map(this.visitExpression.bind(this));
                return n;
            }
        },
        {
            key: "visitParameters",
            value: function visitParameters(n) {
                return n.map(this.visitParameter.bind(this));
            }
        },
        {
            key: "visitParameter",
            value: function visitParameter(n) {
                n.pat = this.visitPattern(n.pat);
                return n;
            }
        },
        {
            key: "visitTaggedTemplateExpression",
            value: function visitTaggedTemplateExpression(n) {
                n.tag = this.visitExpression(n.tag);
                var template = this.visitTemplateLiteral(n.template);
                if (template.type === "TemplateLiteral") {
                    n.template = template;
                }
                return n;
            }
        },
        {
            key: "visitSequenceExpression",
            value: function visitSequenceExpression(n) {
                n.expressions = n.expressions.map(this.visitExpression.bind(this));
                return n;
            }
        },
        {
            key: "visitRegExpLiteral",
            value: function visitRegExpLiteral(n) {
                return n;
            }
        },
        {
            key: "visitParenthesisExpression",
            value: function visitParenthesisExpression(n) {
                n.expression = this.visitExpression(n.expression);
                return n;
            }
        },
        {
            key: "visitObjectExpression",
            value: function visitObjectExpression(n) {
                if (n.properties) {
                    n.properties = this.visitObjectProperties(n.properties);
                }
                return n;
            }
        },
        {
            key: "visitObjectProperties",
            value: function visitObjectProperties(nodes) {
                return nodes.map(this.visitObjectProperty.bind(this));
            }
        },
        {
            key: "visitObjectProperty",
            value: function visitObjectProperty(n) {
                switch(n.type){
                    case "SpreadElement":
                        return this.visitSpreadElement(n);
                    default:
                        return this.visitProperty(n);
                }
            }
        },
        {
            key: "visitProperty",
            value: function visitProperty(n) {
                switch(n.type){
                    case "Identifier":
                        return this.visitIdentifier(n);
                    case "AssignmentProperty":
                        return this.visitAssignmentProperty(n);
                    case "GetterProperty":
                        return this.visitGetterProperty(n);
                    case "KeyValueProperty":
                        return this.visitKeyValueProperty(n);
                    case "MethodProperty":
                        return this.visitMethodProperty(n);
                    case "SetterProperty":
                        return this.visitSetterProperty(n);
                }
            }
        },
        {
            key: "visitSetterProperty",
            value: function visitSetterProperty(n) {
                n.key = this.visitPropertyName(n.key);
                n.param = this.visitPattern(n.param);
                if (n.body) {
                    n.body = this.visitBlockStatement(n.body);
                }
                return n;
            }
        },
        {
            key: "visitMethodProperty",
            value: function visitMethodProperty(n) {
                n.key = this.visitPropertyName(n.key);
                if (n.body) {
                    n.body = this.visitBlockStatement(n.body);
                }
                n.decorators = this.visitDecorators(n.decorators);
                n.params = this.visitParameters(n.params);
                n.returnType = this.visitTsTypeAnnotation(n.returnType);
                n.typeParameters = this.visitTsTypeParameterDeclaration(n.typeParameters);
                return n;
            }
        },
        {
            key: "visitKeyValueProperty",
            value: function visitKeyValueProperty(n) {
                n.key = this.visitPropertyName(n.key);
                n.value = this.visitExpression(n.value);
                return n;
            }
        },
        {
            key: "visitGetterProperty",
            value: function visitGetterProperty(n) {
                n.key = this.visitPropertyName(n.key);
                if (n.body) {
                    n.body = this.visitBlockStatement(n.body);
                }
                n.typeAnnotation = this.visitTsTypeAnnotation(n.typeAnnotation);
                return n;
            }
        },
        {
            key: "visitAssignmentProperty",
            value: function visitAssignmentProperty(n) {
                n.key = this.visitIdentifier(n.key);
                n.value = this.visitExpression(n.value);
                return n;
            }
        },
        {
            key: "visitNullLiteral",
            value: function visitNullLiteral(n) {
                return n;
            }
        },
        {
            key: "visitNewExpression",
            value: function visitNewExpression(n) {
                n.callee = this.visitExpression(n.callee);
                if (n.arguments) {
                    n.arguments = this.visitArguments(n.arguments);
                }
                n.typeArguments = this.visitTsTypeArguments(n.typeArguments);
                return n;
            }
        },
        {
            key: "visitTsTypeArguments",
            value: function visitTsTypeArguments(n) {
                if (n) {
                    n.params = this.visitTsTypes(n.params);
                }
                return n;
            }
        },
        {
            key: "visitArguments",
            value: function visitArguments(nodes) {
                return nodes.map(this.visitArgument.bind(this));
            }
        },
        {
            key: "visitArgument",
            value: function visitArgument(n) {
                n.expression = this.visitExpression(n.expression);
                return n;
            }
        },
        {
            key: "visitMetaProperty",
            value: function visitMetaProperty(n) {
                return n;
            }
        },
        {
            key: "visitMemberExpression",
            value: function visitMemberExpression(n) {
                n.object = this.visitExpression(n.object);
                switch(n.property.type){
                    case "Computed":
                        {
                            n.property = this.visitComputedPropertyKey(n.property);
                            return n;
                        }
                    case "Identifier":
                        {
                            n.property = this.visitIdentifier(n.property);
                            return n;
                        }
                    case "PrivateName":
                        {
                            n.property = this.visitPrivateName(n.property);
                            return n;
                        }
                }
            }
        },
        {
            key: "visitSuperPropExpression",
            value: function visitSuperPropExpression(n) {
                switch(n.property.type){
                    case "Computed":
                        {
                            n.property = this.visitComputedPropertyKey(n.property);
                            return n;
                        }
                    case "Identifier":
                        {
                            n.property = this.visitIdentifier(n.property);
                            return n;
                        }
                }
            }
        },
        {
            key: "visitCallee",
            value: function visitCallee(n) {
                if (n.type === "Super" || n.type === "Import") {
                    return n;
                }
                return this.visitExpression(n);
            }
        },
        {
            key: "visitJSXText",
            value: function visitJSXText(n) {
                return n;
            }
        },
        {
            key: "visitJSXNamespacedName",
            value: function visitJSXNamespacedName(n) {
                n.namespace = this.visitIdentifierReference(n.namespace);
                n.name = this.visitIdentifierReference(n.name);
                return n;
            }
        },
        {
            key: "visitJSXMemberExpression",
            value: function visitJSXMemberExpression(n) {
                n.object = this.visitJSXObject(n.object);
                n.property = this.visitIdentifierReference(n.property);
                return n;
            }
        },
        {
            key: "visitJSXObject",
            value: function visitJSXObject(n) {
                switch(n.type){
                    case "Identifier":
                        return this.visitIdentifierReference(n);
                    case "JSXMemberExpression":
                        return this.visitJSXMemberExpression(n);
                }
            }
        },
        {
            key: "visitJSXFragment",
            value: function visitJSXFragment(n) {
                n.opening = this.visitJSXOpeningFragment(n.opening);
                if (n.children) {
                    n.children = this.visitJSXElementChildren(n.children);
                }
                n.closing = this.visitJSXClosingFragment(n.closing);
                return n;
            }
        },
        {
            key: "visitJSXClosingFragment",
            value: function visitJSXClosingFragment(n) {
                return n;
            }
        },
        {
            key: "visitJSXElementChildren",
            value: function visitJSXElementChildren(nodes) {
                return nodes.map(this.visitJSXElementChild.bind(this));
            }
        },
        {
            key: "visitJSXElementChild",
            value: function visitJSXElementChild(n) {
                switch(n.type){
                    case "JSXElement":
                        return this.visitJSXElement(n);
                    case "JSXExpressionContainer":
                        return this.visitJSXExpressionContainer(n);
                    case "JSXFragment":
                        return this.visitJSXFragment(n);
                    case "JSXSpreadChild":
                        return this.visitJSXSpreadChild(n);
                    case "JSXText":
                        return this.visitJSXText(n);
                }
            }
        },
        {
            key: "visitJSXExpressionContainer",
            value: function visitJSXExpressionContainer(n) {
                n.expression = this.visitExpression(n.expression);
                return n;
            }
        },
        {
            key: "visitJSXSpreadChild",
            value: function visitJSXSpreadChild(n) {
                n.expression = this.visitExpression(n.expression);
                return n;
            }
        },
        {
            key: "visitJSXOpeningFragment",
            value: function visitJSXOpeningFragment(n) {
                return n;
            }
        },
        {
            key: "visitJSXEmptyExpression",
            value: function visitJSXEmptyExpression(n) {
                return n;
            }
        },
        {
            key: "visitJSXElement",
            value: function visitJSXElement(n) {
                n.opening = this.visitJSXOpeningElement(n.opening);
                n.children = this.visitJSXElementChildren(n.children);
                n.closing = this.visitJSXClosingElement(n.closing);
                return n;
            }
        },
        {
            key: "visitJSXClosingElement",
            value: function visitJSXClosingElement(n) {
                if (n) {
                    n.name = this.visitJSXElementName(n.name);
                }
                return n;
            }
        },
        {
            key: "visitJSXElementName",
            value: function visitJSXElementName(n) {
                switch(n.type){
                    case "Identifier":
                        return this.visitIdentifierReference(n);
                    case "JSXMemberExpression":
                        return this.visitJSXMemberExpression(n);
                    case "JSXNamespacedName":
                        return this.visitJSXNamespacedName(n);
                }
            }
        },
        {
            key: "visitJSXOpeningElement",
            value: function visitJSXOpeningElement(n) {
                n.name = this.visitJSXElementName(n.name);
                n.typeArguments = this.visitTsTypeParameterInstantiation(n.typeArguments);
                n.attributes = this.visitJSXAttributeOrSpreads(n.attributes);
                return n;
            }
        },
        {
            key: "visitJSXAttributes",
            value: function visitJSXAttributes(attrs) {
                if (attrs) return attrs.map(this.visitJSXAttributeOrSpread.bind(this));
            }
        },
        {
            key: "visitJSXAttributeOrSpread",
            value: function visitJSXAttributeOrSpread(n) {
                switch(n.type){
                    case "JSXAttribute":
                        return this.visitJSXAttribute(n);
                    case "SpreadElement":
                        return this.visitSpreadElement(n);
                }
            }
        },
        {
            key: "visitJSXAttributeOrSpreads",
            value: function visitJSXAttributeOrSpreads(nodes) {
                return nodes.map(this.visitJSXAttributeOrSpread.bind(this));
            }
        },
        {
            key: "visitJSXAttribute",
            value: function visitJSXAttribute(n) {
                n.name = this.visitJSXAttributeName(n.name);
                n.value = this.visitJSXAttributeValue(n.value);
                return n;
            }
        },
        {
            key: "visitJSXAttributeValue",
            value: function visitJSXAttributeValue(n) {
                if (!n) return n;
                switch(n.type){
                    case "BooleanLiteral":
                        return this.visitBooleanLiteral(n);
                    case "NullLiteral":
                        return this.visitNullLiteral(n);
                    case "NumericLiteral":
                        return this.visitNumericLiteral(n);
                    case "JSXText":
                        return this.visitJSXText(n);
                    case "StringLiteral":
                        return this.visitStringLiteral(n);
                    case "JSXElement":
                        return this.visitJSXElement(n);
                    case "JSXExpressionContainer":
                        return this.visitJSXExpressionContainer(n);
                    case "JSXFragment":
                        return this.visitJSXFragment(n);
                }
                return n;
            }
        },
        {
            key: "visitJSXAttributeName",
            value: function visitJSXAttributeName(n) {
                switch(n.type){
                    case "Identifier":
                        return this.visitIdentifierReference(n);
                    case "JSXNamespacedName":
                        return this.visitJSXNamespacedName(n);
                }
            }
        },
        {
            key: "visitConditionalExpression",
            value: function visitConditionalExpression(n) {
                n.test = this.visitExpression(n.test);
                n.consequent = this.visitExpression(n.consequent);
                n.alternate = this.visitExpression(n.alternate);
                return n;
            }
        },
        {
            key: "visitCallExpression",
            value: function visitCallExpression(n) {
                n.callee = this.visitCallee(n.callee);
                n.typeArguments = this.visitTsTypeParameterInstantiation(n.typeArguments);
                if (n.arguments) {
                    n.arguments = this.visitArguments(n.arguments);
                }
                return n;
            }
        },
        {
            key: "visitBooleanLiteral",
            value: function visitBooleanLiteral(n) {
                return n;
            }
        },
        {
            key: "visitBinaryExpression",
            value: function visitBinaryExpression(n) {
                n.left = this.visitExpression(n.left);
                n.right = this.visitExpression(n.right);
                return n;
            }
        },
        {
            key: "visitAwaitExpression",
            value: function visitAwaitExpression(n) {
                n.argument = this.visitExpression(n.argument);
                return n;
            }
        },
        {
            key: "visitTsTypeParameterDeclaration",
            value: function visitTsTypeParameterDeclaration(n) {
                if (n) {
                    n.parameters = this.visitTsTypeParameters(n.parameters);
                }
                return n;
            }
        },
        {
            key: "visitTsTypeParameters",
            value: function visitTsTypeParameters(nodes) {
                return nodes.map(this.visitTsTypeParameter.bind(this));
            }
        },
        {
            key: "visitTsTypeParameter",
            value: function visitTsTypeParameter(n) {
                if (n.constraint) {
                    n.constraint = this.visitTsType(n.constraint);
                }
                if (n.default) {
                    n.default = this.visitTsType(n.default);
                }
                n.name = this.visitIdentifierReference(n.name);
                return n;
            }
        },
        {
            key: "visitTsTypeAnnotation",
            value: function visitTsTypeAnnotation(a) {
                if (a) {
                    a.typeAnnotation = this.visitTsType(a.typeAnnotation);
                }
                return a;
            }
        },
        {
            key: "visitTsType",
            value: function visitTsType(n) {
                throw new Error("Method visitTsType not implemented.");
            }
        },
        {
            key: "visitPatterns",
            value: function visitPatterns(nodes) {
                return nodes.map(this.visitPattern.bind(this));
            }
        },
        {
            key: "visitImportDeclaration",
            value: function visitImportDeclaration(n) {
                n.source = this.visitStringLiteral(n.source);
                n.specifiers = this.visitImportSpecifiers(n.specifiers || []);
                return n;
            }
        },
        {
            key: "visitImportSpecifiers",
            value: function visitImportSpecifiers(nodes) {
                return nodes.map(this.visitImportSpecifier.bind(this));
            }
        },
        {
            key: "visitImportSpecifier",
            value: function visitImportSpecifier(node) {
                switch(node.type){
                    case "ImportDefaultSpecifier":
                        return this.visitImportDefaultSpecifier(node);
                    case "ImportNamespaceSpecifier":
                        return this.visitImportNamespaceSpecifier(node);
                    case "ImportSpecifier":
                        return this.visitNamedImportSpecifier(node);
                }
            }
        },
        {
            key: "visitNamedImportSpecifier",
            value: function visitNamedImportSpecifier(node) {
                node.local = this.visitBindingIdentifier(node.local);
                if (node.imported) {
                    node.imported = this.visitModuleExportName(node.imported);
                }
                return node;
            }
        },
        {
            key: "visitImportNamespaceSpecifier",
            value: function visitImportNamespaceSpecifier(node) {
                node.local = this.visitBindingIdentifier(node.local);
                return node;
            }
        },
        {
            key: "visitImportDefaultSpecifier",
            value: function visitImportDefaultSpecifier(node) {
                node.local = this.visitBindingIdentifier(node.local);
                return node;
            }
        },
        {
            key: "visitBindingIdentifier",
            value: function visitBindingIdentifier(i) {
                if (i.typeAnnotation) {
                    i.typeAnnotation = this.visitTsTypeAnnotation(i.typeAnnotation);
                }
                return this.visitIdentifier(i);
            }
        },
        {
            key: "visitIdentifierReference",
            value: function visitIdentifierReference(i) {
                return this.visitIdentifier(i);
            }
        },
        {
            key: "visitLabelIdentifier",
            value: function visitLabelIdentifier(label) {
                return this.visitIdentifier(label);
            }
        },
        {
            key: "visitIdentifier",
            value: function visitIdentifier(n) {
                return n;
            }
        },
        {
            key: "visitStringLiteral",
            value: function visitStringLiteral(n) {
                return n;
            }
        },
        {
            key: "visitNumericLiteral",
            value: function visitNumericLiteral(n) {
                return n;
            }
        },
        {
            key: "visitBigIntLiteral",
            value: function visitBigIntLiteral(n) {
                return n;
            }
        },
        {
            key: "visitPattern",
            value: function visitPattern(n) {
                switch(n.type){
                    case "Identifier":
                        return this.visitBindingIdentifier(n);
                    case "ArrayPattern":
                        return this.visitArrayPattern(n);
                    case "ObjectPattern":
                        return this.visitObjectPattern(n);
                    case "AssignmentPattern":
                        return this.visitAssignmentPattern(n);
                    case "RestElement":
                        return this.visitRestElement(n);
                    default:
                        return this.visitExpression(n);
                }
            }
        },
        {
            key: "visitRestElement",
            value: function visitRestElement(n) {
                n.argument = this.visitPattern(n.argument);
                n.typeAnnotation = this.visitTsTypeAnnotation(n.typeAnnotation);
                return n;
            }
        },
        {
            key: "visitAssignmentPattern",
            value: function visitAssignmentPattern(n) {
                n.left = this.visitPattern(n.left);
                n.right = this.visitExpression(n.right);
                n.typeAnnotation = this.visitTsTypeAnnotation(n.typeAnnotation);
                return n;
            }
        },
        {
            key: "visitObjectPattern",
            value: function visitObjectPattern(n) {
                n.properties = this.visitObjectPatternProperties(n.properties || []);
                n.typeAnnotation = this.visitTsTypeAnnotation(n.typeAnnotation);
                return n;
            }
        },
        {
            key: "visitObjectPatternProperties",
            value: function visitObjectPatternProperties(nodes) {
                return nodes.map(this.visitObjectPatternProperty.bind(this));
            }
        },
        {
            key: "visitObjectPatternProperty",
            value: function visitObjectPatternProperty(n) {
                switch(n.type){
                    case "AssignmentPatternProperty":
                        return this.visitAssignmentPatternProperty(n);
                    case "KeyValuePatternProperty":
                        return this.visitKeyValuePatternProperty(n);
                    case "RestElement":
                        return this.visitRestElement(n);
                }
            }
        },
        {
            key: "visitKeyValuePatternProperty",
            value: function visitKeyValuePatternProperty(n) {
                n.key = this.visitPropertyName(n.key);
                n.value = this.visitPattern(n.value);
                return n;
            }
        },
        {
            key: "visitAssignmentPatternProperty",
            value: function visitAssignmentPatternProperty(n) {
                n.key = this.visitBindingIdentifier(n.key);
                n.value = this.visitOptionalExpression(n.value);
                return n;
            }
        },
        {
            key: "visitArrayPattern",
            value: function visitArrayPattern(n) {
                n.typeAnnotation = this.visitTsTypeAnnotation(n.typeAnnotation);
                n.elements = this.visitArrayPatternElements(n.elements);
                return n;
            }
        },
        {
            key: "visitArrayPatternElements",
            value: function visitArrayPatternElements(nodes) {
                return nodes.map(this.visitArrayPatternElement.bind(this));
            }
        },
        {
            key: "visitArrayPatternElement",
            value: function visitArrayPatternElement(n) {
                if (n) {
                    n = this.visitPattern(n);
                }
                return n;
            }
        }
    ]);
    return Visitor;
}();
exports.Visitor = Visitor;
exports.default = Visitor;
