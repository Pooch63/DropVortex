function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var InvalidArgumentError = require('./error.js').InvalidArgumentError;
// @ts-check
var Argument = /*#__PURE__*/ function() {
    "use strict";
    function Argument(name, description) {
        _class_call_check(this, Argument);
        this.description = description || '';
        this.variadic = false;
        this.parseArg = undefined;
        this.defaultValue = undefined;
        this.defaultValueDescription = undefined;
        this.argChoices = undefined;
        switch(name[0]){
            case '<':
                this.required = true;
                this._name = name.slice(1, -1);
                break;
            case '[':
                this.required = false;
                this._name = name.slice(1, -1);
                break;
            default:
                this.required = true;
                this._name = name;
                break;
        }
        if (this._name.length > 3 && this._name.slice(-3) === '...') {
            this.variadic = true;
            this._name = this._name.slice(0, -3);
        }
    }
    _create_class(Argument, [
        {
            /**
   * Return argument name.
   *
   * @return {string}
   */ key: "name",
            value: function name() {
                return this._name;
            }
        },
        {
            /**
   * @api private
   */ key: "_concatValue",
            value: function _concatValue(value, previous) {
                if (previous === this.defaultValue || !Array.isArray(previous)) {
                    return [
                        value
                    ];
                }
                return previous.concat(value);
            }
        },
        {
            /**
   * Set the default value, and optionally supply the description to be displayed in the help.
   *
   * @param {any} value
   * @param {string} [description]
   * @return {Argument}
   */ key: "default",
            value: function _default(value, description) {
                this.defaultValue = value;
                this.defaultValueDescription = description;
                return this;
            }
        },
        {
            /**
   * Set the custom handler for processing CLI command arguments into argument values.
   *
   * @param {Function} [fn]
   * @return {Argument}
   */ key: "argParser",
            value: function argParser(fn) {
                this.parseArg = fn;
                return this;
            }
        },
        {
            /**
   * Only allow option value to be one of choices.
   *
   * @param {string[]} values
   * @return {Argument}
   */ key: "choices",
            value: function choices(values) {
                var _this = this;
                this.argChoices = values;
                this.parseArg = function(arg, previous) {
                    if (!values.includes(arg)) {
                        throw new InvalidArgumentError("Allowed choices are ".concat(values.join(', '), "."));
                    }
                    if (_this.variadic) {
                        return _this._concatValue(arg, previous);
                    }
                    return arg;
                };
                return this;
            }
        },
        {
            /**
   * Make option-argument required.
   */ key: "argRequired",
            value: function argRequired() {
                this.required = true;
                return this;
            }
        },
        {
            /**
   * Make option-argument optional.
   */ key: "argOptional",
            value: function argOptional() {
                this.required = false;
                return this;
            }
        }
    ]);
    return Argument;
}();
/**
 * Takes an argument and returns its human readable equivalent for help usage.
 *
 * @param {Argument} arg
 * @return {string}
 * @api private
 */ function humanReadableArgName(arg) {
    var nameOutput = arg.name() + (arg.variadic === true ? '...' : '');
    return arg.required ? '<' + nameOutput + '>' : '[' + nameOutput + ']';
}
exports.Argument = Argument;
exports.humanReadableArgName = humanReadableArgName;
