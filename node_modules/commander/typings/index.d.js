// Type definitions for commander
// Original definitions by: Alan Agius <https://github.com/alan-agius4>, Marcelo Dezem <https://github.com/mdezem>, vvakame <https://github.com/vvakame>, Jules Randolph <https://github.com/sveinburne>
// Using method rather than property for method-signature-style, to document method overloads separately. Allow either.
/* eslint-disable @typescript-eslint/method-signature-style */ /* eslint-disable @typescript-eslint/no-explicit-any */ function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _construct(Parent, args, Class) {
    if (_is_native_reflect_construct()) {
        _construct = Reflect.construct;
    } else {
        _construct = function construct(Parent, args, Class) {
            var a = [
                null
            ];
            a.push.apply(a, args);
            var Constructor = Function.bind.apply(Parent, a);
            var instance = new Constructor();
            if (Class) _set_prototype_of(instance, Class.prototype);
            return instance;
        };
    }
    return _construct.apply(null, arguments);
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _is_native_function(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _wrap_native_super(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    _wrap_native_super = function wrapNativeSuper(Class) {
        if (Class === null || !_is_native_function(Class)) return Class;
        if (typeof Class !== "function") {
            throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return _construct(Class, arguments, _get_prototype_of(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _set_prototype_of(Wrapper, Class);
    };
    return _wrap_native_super(Class);
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}
export var CommanderError = /*#__PURE__*/ function(Error1) {
    "use strict";
    _inherits(CommanderError, Error1);
    var _super = _create_super(CommanderError);
    function CommanderError() {
        _class_call_check(this, CommanderError);
        var _this;
        _this = _super.apply(this, arguments);
        _define_property(_assert_this_initialized(_this), "code", void 0);
        _define_property(_assert_this_initialized(_this), "exitCode", void 0);
        _define_property(_assert_this_initialized(_this), "message", void 0);
        _define_property(_assert_this_initialized(_this), "nestedError", void 0);
        return _this;
    }
    return CommanderError;
}(_wrap_native_super(Error));
export var InvalidArgumentError = /*#__PURE__*/ function(CommanderError) {
    "use strict";
    _inherits(InvalidArgumentError, CommanderError);
    var _super = _create_super(InvalidArgumentError);
    function InvalidArgumentError() {
        _class_call_check(this, InvalidArgumentError);
        return _super.apply(this, arguments);
    }
    return InvalidArgumentError;
}(CommanderError);
export { InvalidArgumentError as InvalidOptionArgumentError }; // deprecated old name
export var Argument = function Argument() {
    "use strict";
    _class_call_check(this, Argument);
    _define_property(this, "description", void 0);
    _define_property(this, "required", void 0);
    _define_property(this, "variadic", void 0);
};
export var Option = function Option() {
    "use strict";
    _class_call_check(this, Option);
    _define_property(this, "flags", void 0);
    _define_property(this, "description", void 0);
    _define_property(this, "required", void 0 // A value must be supplied when the option is specified.
    );
    _define_property(this, "optional", void 0 // A value is optional when the option is specified.
    );
    _define_property(this, "variadic", void 0);
    _define_property(this, "mandatory", void 0 // The option must have a value after parsing, which usually means it must be specified on command line.
    );
    _define_property(this, "optionFlags", void 0);
    _define_property(this, "short", void 0);
    _define_property(this, "long", void 0);
    _define_property(this, "negate", void 0);
    _define_property(this, "defaultValue", void 0);
    _define_property(this, "defaultValueDescription", void 0);
    _define_property(this, "parseArg", void 0);
    _define_property(this, "hidden", void 0);
    _define_property(this, "argChoices", void 0);
};
export var Help = function Help() {
    "use strict";
    _class_call_check(this, Help);
    /** output helpWidth, long lines are wrapped to fit */ _define_property(this, "helpWidth", void 0);
    _define_property(this, "sortSubcommands", void 0);
    _define_property(this, "sortOptions", void 0);
};
export var Command = function Command() {
    "use strict";
    _class_call_check(this, Command);
    _define_property(this, "args", void 0);
    _define_property(this, "processedArgs", void 0);
    _define_property(this, "commands", void 0);
    _define_property(this, "parent", void 0);
};
export var program;
