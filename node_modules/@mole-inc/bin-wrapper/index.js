function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
import { promises as fsPromises } from 'fs';
import path from 'path';
import process from 'process';
import got from 'got';
import { fileTypeFromBuffer } from 'file-type';
import filenamify from 'filenamify';
import osFilterObj from 'os-filter-obj';
import binCheck from 'bin-check';
import binVersionCheck from 'bin-version-check';
import contentDisposition from 'content-disposition';
import extName from 'ext-name';
var getExtFromMime = function(response) {
    var header = response.headers['content-type'];
    if (!header) {
        return null;
    }
    var exts = extName.mime(header);
    if (exts.length !== 1) {
        return null;
    }
    return exts[0].ext;
};
var getFilename = function() {
    var _ref = _async_to_generator(function(response, data) {
        var header, parsed, filename, fileTypeResult, ext;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    header = response.headers['content-disposition'];
                    if (header) {
                        parsed = contentDisposition.parse(header);
                        if (parsed.parameters && parsed.parameters.filename) {
                            return [
                                2,
                                parsed.parameters.filename
                            ];
                        }
                    }
                    filename = path.basename(new URL(response.requestUrl).pathname);
                    if (!!path.extname(filename)) return [
                        3,
                        2
                    ];
                    return [
                        4,
                        fileTypeFromBuffer(data).catch(function() {
                            return null;
                        })
                    ];
                case 1:
                    fileTypeResult = _state.sent();
                    ext = fileTypeResult ? fileTypeResult.ext : getExtFromMime(response);
                    if (ext && ext !== 'elf') {
                        return [
                            2,
                            "".concat(filename, ".").concat(ext)
                        ];
                    }
                    _state.label = 2;
                case 2:
                    return [
                        2,
                        filename
                    ];
            }
        });
    });
    return function getFilename(response, data) {
        return _ref.apply(this, arguments);
    };
}();
/**
 * Initialize a new `BinWrapper`
 *
 * @param {Object} options
 * @api public
 */ var BinWrapper = /*#__PURE__*/ function() {
    "use strict";
    function BinWrapper() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        _class_call_check(this, BinWrapper);
        this.options = options;
        this._src = [];
        this._dest = '';
        this._use = '';
        this._version = '';
    }
    _create_class(BinWrapper, [
        {
            /**
	 * Get or set files to download
	 *
	 * @param {String} src
	 * @param {String} os
	 * @param {String} arch
	 * @api public
	 */ key: "src",
            value: function src(src, os, arch) {
                if (arguments.length === 0) {
                    return this._src;
                }
                this._src.push({
                    url: src,
                    os: os,
                    arch: arch
                });
                return this;
            }
        },
        {
            /**
	 * Get or set the destination
	 *
	 * @param {String} dest
	 * @api public
	 */ key: "dest",
            value: function dest(dest) {
                if (arguments.length === 0) {
                    return this._dest;
                }
                this._dest = dest;
                return this;
            }
        },
        {
            /**
	 * Get or set the binary
	 *
	 * @param {String} bin
	 * @api public
	 */ key: "use",
            value: function use(bin) {
                if (arguments.length === 0) {
                    return this._use;
                }
                this._use = bin;
                return this;
            }
        },
        {
            /**
	 * Get or set a semver range to test the binary against
	 *
	 * @param {String} range
	 * @api public
	 */ key: "version",
            value: function version(range) {
                if (arguments.length === 0) {
                    return this._version;
                }
                this._version = range;
                return this;
            }
        },
        {
            key: "path",
            get: /**
	 * Get path to the binary
	 *
	 * @api public
	 */ function get() {
                return path.join(this.dest(), this.use());
            }
        },
        {
            key: "run",
            value: /**
	 * Run
	 *
	 * @param {Array} cmd
	 * @api public
	 */ function run() {
                var cmd = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [
                    '--version'
                ];
                var _this = this;
                return _async_to_generator(function() {
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    _this.findExisting()
                                ];
                            case 1:
                                _state.sent();
                                if (_this.options.skipCheck) {
                                    return [
                                        2
                                    ];
                                }
                                return [
                                    2,
                                    _this.runCheck(cmd)
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "runCheck",
            value: /**
	 * Run binary check
	 *
	 * @param {Array} cmd
	 * @api private
	 */ function runCheck(cmd) {
                var _this = this;
                return _async_to_generator(function() {
                    var bin;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                bin = _this.path;
                                if (_this.version()) {
                                    if (cmd.length === 1 && cmd[0] === '--version') {
                                        return [
                                            2,
                                            binVersionCheck(bin, _this.version())
                                        ];
                                    }
                                    return [
                                        2,
                                        binVersionCheck(bin, _this.version(), {
                                            args: cmd
                                        })
                                    ];
                                }
                                return [
                                    4,
                                    binCheck(bin, cmd).catch(function() {
                                        throw new Error("The `".concat(bin, "` binary doesn't seem to work correctly"));
                                    })
                                ];
                            case 1:
                                _state.sent();
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "findExisting",
            value: /**
	 * Find existing files
	 *
	 * @api private
	 */ function findExisting() {
                var _this = this;
                return _async_to_generator(function() {
                    var error;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _state.trys.push([
                                    0,
                                    2,
                                    ,
                                    3
                                ]);
                                return [
                                    4,
                                    fsPromises.stat(_this.path)
                                ];
                            case 1:
                                _state.sent();
                                return [
                                    3,
                                    3
                                ];
                            case 2:
                                error = _state.sent();
                                if (error && error.code === 'ENOENT') {
                                    return [
                                        2,
                                        _this.download()
                                    ];
                                }
                                throw new Error(error);
                            case 3:
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "download",
            value: /**
	 * Download files
	 *
	 * @api private
	 */ function download() {
                var _this = this;
                return _async_to_generator(function() {
                    var files, urls, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, file, downloadFile, result, resultingFiles;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                files = osFilterObj(_this.src());
                                urls = [];
                                if (files.length === 0) {
                                    throw new Error('No binary found matching your system. It\'s probably not supported.');
                                }
                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                try {
                                    for(_iterator = files[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                        file = _step.value;
                                        urls.push(file.url);
                                    }
                                } catch (err) {
                                    _didIteratorError = true;
                                    _iteratorError = err;
                                } finally{
                                    try {
                                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                                            _iterator.return();
                                        }
                                    } finally{
                                        if (_didIteratorError) {
                                            throw _iteratorError;
                                        }
                                    }
                                }
                                downloadFile = function() {
                                    var _ref = _async_to_generator(function(url, output) {
                                        var responsePromise, response, data, filename, _tmp, outputFilepath;
                                        return _ts_generator(this, function(_state) {
                                            switch(_state.label){
                                                case 0:
                                                    responsePromise = got(url, _object_spread({
                                                        responseType: 'buffer',
                                                        https: {
                                                            rejectUnauthorized: process.env.npm_config_strict_ssl !== 'false'
                                                        }
                                                    }, _this.options.gotOptions));
                                                    return [
                                                        4,
                                                        responsePromise
                                                    ];
                                                case 1:
                                                    response = _state.sent();
                                                    return [
                                                        4,
                                                        responsePromise.buffer()
                                                    ];
                                                case 2:
                                                    data = _state.sent();
                                                    if (!output) {
                                                        return [
                                                            2,
                                                            data
                                                        ];
                                                    }
                                                    _tmp = _this.options.filename;
                                                    if (_tmp) return [
                                                        3,
                                                        4
                                                    ];
                                                    return [
                                                        4,
                                                        getFilename(response, data)
                                                    ];
                                                case 3:
                                                    _tmp = filenamify.apply(void 0, [
                                                        _state.sent()
                                                    ]);
                                                    _state.label = 4;
                                                case 4:
                                                    filename = _tmp;
                                                    outputFilepath = path.join(output, filename);
                                                    return [
                                                        4,
                                                        fsPromises.mkdir(path.dirname(outputFilepath), {
                                                            recursive: true
                                                        })
                                                    ];
                                                case 5:
                                                    _state.sent();
                                                    return [
                                                        4,
                                                        fsPromises.writeFile(outputFilepath, data)
                                                    ];
                                                case 6:
                                                    _state.sent();
                                                    return [
                                                        2,
                                                        data
                                                    ];
                                            }
                                        });
                                    });
                                    return function downloadFile(url, output) {
                                        return _ref.apply(this, arguments);
                                    };
                                }();
                                return [
                                    4,
                                    Promise.all(urls.map(function(url) {
                                        return downloadFile(url, _this.dest());
                                    }))
                                ];
                            case 1:
                                result = _state.sent();
                                resultingFiles = result.flatMap(function(item, index) {
                                    if (Array.isArray(item)) {
                                        return item.map(function(file) {
                                            return file.path;
                                        });
                                    }
                                    var parsedUrl = new URL(files[index].url);
                                    var parsedPath = path.parse(parsedUrl.pathname);
                                    return parsedPath.base;
                                });
                                return [
                                    2,
                                    Promise.all(resultingFiles.map(function(fileName) {
                                        return fsPromises.chmod(path.join(_this.dest(), fileName), 493);
                                    }))
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return BinWrapper;
}();
export { BinWrapper };
