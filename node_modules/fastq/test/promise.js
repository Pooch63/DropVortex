'use strict';
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var test = require('tape');
var buildQueue = require('../').promise;
var promisify = require('util').promisify;
var sleep = promisify(setTimeout);
var immediate = promisify(setImmediate);
test('concurrency', function(t) {
    t.plan(2);
    t.throws(buildQueue.bind(null, worker, 0));
    t.doesNotThrow(buildQueue.bind(null, worker, 1));
    function worker(arg) {
        return _worker.apply(this, arguments);
    }
    function _worker() {
        _worker = _async_to_generator(function(arg) {
            return _ts_generator(this, function(_state) {
                return [
                    2,
                    true
                ];
            });
        });
        return _worker.apply(this, arguments);
    }
});
test('worker execution', function() {
    var _ref = _async_to_generator(function(t) {
        var queue, result;
        function worker(arg) {
            return _worker.apply(this, arguments);
        }
        function _worker() {
            _worker = _async_to_generator(function(arg) {
                return _ts_generator(this, function(_state) {
                    t.equal(arg, 42);
                    return [
                        2,
                        true
                    ];
                });
            });
            return _worker.apply(this, arguments);
        }
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    queue = buildQueue(worker, 1);
                    return [
                        4,
                        queue.push(42)
                    ];
                case 1:
                    result = _state.sent();
                    t.equal(result, true, 'result matches');
                    return [
                        2
                    ];
            }
        });
    });
    return function(t) {
        return _ref.apply(this, arguments);
    };
}());
test('limit', function() {
    var _ref = _async_to_generator(function(t) {
        var queue, _ref, res1, res2;
        function worker(arg) {
            return _worker.apply(this, arguments);
        }
        function _worker() {
            _worker = _async_to_generator(function(arg) {
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            return [
                                4,
                                sleep(arg)
                            ];
                        case 1:
                            _state.sent();
                            return [
                                2,
                                arg
                            ];
                    }
                });
            });
            return _worker.apply(this, arguments);
        }
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    queue = buildQueue(worker, 1);
                    return [
                        4,
                        Promise.all([
                            queue.push(10),
                            queue.push(0)
                        ])
                    ];
                case 1:
                    _ref = _sliced_to_array.apply(void 0, [
                        _state.sent(),
                        2
                    ]), res1 = _ref[0], res2 = _ref[1];
                    t.equal(res1, 10, 'the result matches');
                    t.equal(res2, 0, 'the result matches');
                    return [
                        2
                    ];
            }
        });
    });
    return function(t) {
        return _ref.apply(this, arguments);
    };
}());
test('multiple executions', function() {
    var _ref = _async_to_generator(function(t) {
        var queue, toExec, expected, count;
        function worker(arg) {
            return _worker.apply(this, arguments);
        }
        function _worker() {
            _worker = _async_to_generator(function(arg) {
                return _ts_generator(this, function(_state) {
                    t.equal(arg, toExec[count], 'arg matches');
                    return [
                        2,
                        expected[count++]
                    ];
                });
            });
            return _worker.apply(this, arguments);
        }
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    queue = buildQueue(worker, 1);
                    toExec = [
                        1,
                        2,
                        3,
                        4,
                        5
                    ];
                    expected = [
                        'a',
                        'b',
                        'c',
                        'd',
                        'e'
                    ];
                    count = 0;
                    return [
                        4,
                        Promise.all(toExec.map(function() {
                            var _ref = _async_to_generator(function(task, i) {
                                var result;
                                return _ts_generator(this, function(_state) {
                                    switch(_state.label){
                                        case 0:
                                            return [
                                                4,
                                                queue.push(task)
                                            ];
                                        case 1:
                                            result = _state.sent();
                                            t.equal(result, expected[i], 'the result matches');
                                            return [
                                                2
                                            ];
                                    }
                                });
                            });
                            return function(task, i) {
                                return _ref.apply(this, arguments);
                            };
                        }()))
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return function(t) {
        return _ref.apply(this, arguments);
    };
}());
test('drained', function() {
    var _ref = _async_to_generator(function(t) {
        var queue, toExec, count;
        function worker(arg) {
            return _worker.apply(this, arguments);
        }
        function _worker() {
            _worker = _async_to_generator(function(arg) {
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            return [
                                4,
                                sleep(arg)
                            ];
                        case 1:
                            _state.sent();
                            count++;
                            return [
                                2
                            ];
                    }
                });
            });
            return _worker.apply(this, arguments);
        }
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    queue = buildQueue(worker, 2);
                    toExec = new Array(10).fill(10);
                    count = 0;
                    toExec.forEach(function(i) {
                        queue.push(i);
                    });
                    return [
                        4,
                        queue.drained()
                    ];
                case 1:
                    _state.sent();
                    t.equal(count, toExec.length);
                    toExec.forEach(function(i) {
                        queue.push(i);
                    });
                    return [
                        4,
                        queue.drained()
                    ];
                case 2:
                    _state.sent();
                    t.equal(count, toExec.length * 2);
                    return [
                        2
                    ];
            }
        });
    });
    return function(t) {
        return _ref.apply(this, arguments);
    };
}());
test('drained with exception should not throw', function() {
    var _ref = _async_to_generator(function(t) {
        var queue, toExec;
        function worker() {
            return _worker.apply(this, arguments);
        }
        function _worker() {
            _worker = _async_to_generator(function() {
                return _ts_generator(this, function(_state) {
                    throw new Error('foo');
                });
            });
            return _worker.apply(this, arguments);
        }
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    queue = buildQueue(worker, 2);
                    toExec = new Array(10).fill(10);
                    toExec.forEach(function(i) {
                        queue.push(i);
                    });
                    return [
                        4,
                        queue.drained()
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return function(t) {
        return _ref.apply(this, arguments);
    };
}());
test('drained with drain function', function() {
    var _ref = _async_to_generator(function(t) {
        var drainCalled, queue, toExec, count;
        function worker(arg) {
            return _worker.apply(this, arguments);
        }
        function _worker() {
            _worker = _async_to_generator(function(arg) {
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            return [
                                4,
                                sleep(arg)
                            ];
                        case 1:
                            _state.sent();
                            count++;
                            return [
                                2
                            ];
                    }
                });
            });
            return _worker.apply(this, arguments);
        }
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    drainCalled = false;
                    queue = buildQueue(worker, 2);
                    queue.drain = function() {
                        drainCalled = true;
                    };
                    toExec = new Array(10).fill(10);
                    count = 0;
                    toExec.forEach(function() {
                        queue.push();
                    });
                    return [
                        4,
                        queue.drained()
                    ];
                case 1:
                    _state.sent();
                    t.equal(count, toExec.length);
                    t.equal(drainCalled, true);
                    return [
                        2
                    ];
            }
        });
    });
    return function(t) {
        return _ref.apply(this, arguments);
    };
}());
test('drained while idle should resolve', function() {
    var _ref = _async_to_generator(function(t) {
        var queue;
        function worker(arg) {
            return _worker.apply(this, arguments);
        }
        function _worker() {
            _worker = _async_to_generator(function(arg) {
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            return [
                                4,
                                sleep(arg)
                            ];
                        case 1:
                            _state.sent();
                            return [
                                2
                            ];
                    }
                });
            });
            return _worker.apply(this, arguments);
        }
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    queue = buildQueue(worker, 2);
                    return [
                        4,
                        queue.drained()
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return function(t) {
        return _ref.apply(this, arguments);
    };
}());
test('drained while idle should not call the drain function', function() {
    var _ref = _async_to_generator(function(t) {
        var drainCalled, queue;
        function worker(arg) {
            return _worker.apply(this, arguments);
        }
        function _worker() {
            _worker = _async_to_generator(function(arg) {
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            return [
                                4,
                                sleep(arg)
                            ];
                        case 1:
                            _state.sent();
                            return [
                                2
                            ];
                    }
                });
            });
            return _worker.apply(this, arguments);
        }
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    drainCalled = false;
                    queue = buildQueue(worker, 2);
                    queue.drain = function() {
                        drainCalled = true;
                    };
                    return [
                        4,
                        queue.drained()
                    ];
                case 1:
                    _state.sent();
                    t.equal(drainCalled, false);
                    return [
                        2
                    ];
            }
        });
    });
    return function(t) {
        return _ref.apply(this, arguments);
    };
}());
test('set this', function() {
    var _ref = _async_to_generator(function(t) {
        var that, queue;
        function worker(arg) {
            return _worker.apply(this, arguments);
        }
        function _worker() {
            _worker = _async_to_generator(function(arg) {
                return _ts_generator(this, function(_state) {
                    t.equal(this, that, 'this matches');
                    return [
                        2
                    ];
                });
            });
            return _worker.apply(this, arguments);
        }
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    t.plan(1);
                    that = {};
                    queue = buildQueue(that, worker, 1);
                    return [
                        4,
                        queue.push(42)
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return function(t) {
        return _ref.apply(this, arguments);
    };
}());
test('unshift', function() {
    var _ref = _async_to_generator(function(t) {
        var queue, expected;
        function worker(arg) {
            return _worker.apply(this, arguments);
        }
        function _worker() {
            _worker = _async_to_generator(function(arg) {
                return _ts_generator(this, function(_state) {
                    t.equal(expected.shift(), arg, 'tasks come in order');
                    return [
                        2
                    ];
                });
            });
            return _worker.apply(this, arguments);
        }
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    queue = buildQueue(worker, 1);
                    expected = [
                        1,
                        2,
                        3,
                        4
                    ];
                    return [
                        4,
                        Promise.all([
                            queue.push(1),
                            queue.push(4),
                            queue.unshift(3),
                            queue.unshift(2)
                        ])
                    ];
                case 1:
                    _state.sent();
                    t.is(expected.length, 0);
                    return [
                        2
                    ];
            }
        });
    });
    return function(t) {
        return _ref.apply(this, arguments);
    };
}());
test('push with worker throwing error', function() {
    var _ref = _async_to_generator(function(t) {
        var q, err;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    t.plan(5);
                    q = buildQueue(function() {
                        var _ref = _async_to_generator(function(task, cb) {
                            return _ts_generator(this, function(_state) {
                                throw new Error('test error');
                            });
                        });
                        return function(task, cb) {
                            return _ref.apply(this, arguments);
                        };
                    }(), 1);
                    q.error(function(err, task) {
                        t.ok(_instanceof(err, Error), 'global error handler should catch the error');
                        t.match(err.message, /test error/, 'error message should be "test error"');
                        t.equal(task, 42, 'The task executed should be passed');
                    });
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        3,
                        ,
                        4
                    ]);
                    return [
                        4,
                        q.push(42)
                    ];
                case 2:
                    _state.sent();
                    return [
                        3,
                        4
                    ];
                case 3:
                    err = _state.sent();
                    t.ok(_instanceof(err, Error), 'push callback should catch the error');
                    t.match(err.message, /test error/, 'error message should be "test error"');
                    return [
                        3,
                        4
                    ];
                case 4:
                    return [
                        2
                    ];
            }
        });
    });
    return function(t) {
        return _ref.apply(this, arguments);
    };
}());
test('unshift with worker throwing error', function() {
    var _ref = _async_to_generator(function(t) {
        var q, err;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    t.plan(2);
                    q = buildQueue(function() {
                        var _ref = _async_to_generator(function(task, cb) {
                            return _ts_generator(this, function(_state) {
                                throw new Error('test error');
                            });
                        });
                        return function(task, cb) {
                            return _ref.apply(this, arguments);
                        };
                    }(), 1);
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        3,
                        ,
                        4
                    ]);
                    return [
                        4,
                        q.unshift(42)
                    ];
                case 2:
                    _state.sent();
                    return [
                        3,
                        4
                    ];
                case 3:
                    err = _state.sent();
                    t.ok(_instanceof(err, Error), 'push callback should catch the error');
                    t.match(err.message, /test error/, 'error message should be "test error"');
                    return [
                        3,
                        4
                    ];
                case 4:
                    return [
                        2
                    ];
            }
        });
    });
    return function(t) {
        return _ref.apply(this, arguments);
    };
}());
test('no unhandledRejection (push)', function() {
    var _ref = _async_to_generator(function(t) {
        var q;
        function handleRejection() {
            t.fail('unhandledRejection');
        }
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    process.once('unhandledRejection', handleRejection);
                    q = buildQueue(function() {
                        var _ref = _async_to_generator(function(task, cb) {
                            return _ts_generator(this, function(_state) {
                                throw new Error('test error');
                            });
                        });
                        return function(task, cb) {
                            return _ref.apply(this, arguments);
                        };
                    }(), 1);
                    q.push(42);
                    return [
                        4,
                        immediate()
                    ];
                case 1:
                    _state.sent();
                    process.removeListener('unhandledRejection', handleRejection);
                    return [
                        2
                    ];
            }
        });
    });
    return function(t) {
        return _ref.apply(this, arguments);
    };
}());
test('no unhandledRejection (unshift)', function() {
    var _ref = _async_to_generator(function(t) {
        var q;
        function handleRejection() {
            t.fail('unhandledRejection');
        }
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    process.once('unhandledRejection', handleRejection);
                    q = buildQueue(function() {
                        var _ref = _async_to_generator(function(task, cb) {
                            return _ts_generator(this, function(_state) {
                                throw new Error('test error');
                            });
                        });
                        return function(task, cb) {
                            return _ref.apply(this, arguments);
                        };
                    }(), 1);
                    q.unshift(42);
                    return [
                        4,
                        immediate()
                    ];
                case 1:
                    _state.sent();
                    process.removeListener('unhandledRejection', handleRejection);
                    return [
                        2
                    ];
            }
        });
    });
    return function(t) {
        return _ref.apply(this, arguments);
    };
}());
