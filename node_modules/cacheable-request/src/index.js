'use strict';
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _construct(Parent, args, Class) {
    if (_is_native_reflect_construct()) {
        _construct = Reflect.construct;
    } else {
        _construct = function construct(Parent, args, Class) {
            var a = [
                null
            ];
            a.push.apply(a, args);
            var Constructor = Function.bind.apply(Parent, a);
            var instance = new Constructor();
            if (Class) _set_prototype_of(instance, Class.prototype);
            return instance;
        };
    }
    return _construct.apply(null, arguments);
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _is_native_function(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _to_array(arr) {
    return _array_with_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_rest();
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _wrap_native_super(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    _wrap_native_super = function wrapNativeSuper(Class) {
        if (Class === null || !_is_native_function(Class)) return Class;
        if (typeof Class !== "function") {
            throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return _construct(Class, arguments, _get_prototype_of(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _set_prototype_of(Wrapper, Class);
    };
    return _wrap_native_super(Class);
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var EventEmitter = require('events');
var urlLib = require('url');
var normalizeUrl = require('normalize-url');
var getStream = require('get-stream');
var CachePolicy = require('http-cache-semantics');
var Response = require('responselike');
var lowercaseKeys = require('lowercase-keys');
var cloneResponse = require('clone-response');
var Keyv = require('keyv');
var CacheableRequest = /*#__PURE__*/ function() {
    function CacheableRequest(request, cacheAdapter) {
        _class_call_check(this, CacheableRequest);
        if (typeof request !== 'function') {
            throw new TypeError('Parameter `request` must be a function');
        }
        this.cache = new Keyv({
            uri: typeof cacheAdapter === 'string' && cacheAdapter,
            store: typeof cacheAdapter !== 'string' && cacheAdapter,
            namespace: 'cacheable-request'
        });
        return this.createCacheableRequest(request);
    }
    _create_class(CacheableRequest, [
        {
            key: "createCacheableRequest",
            value: function createCacheableRequest(request) {
                var _this = this;
                return function(opts, cb) {
                    var url;
                    if (typeof opts === 'string') {
                        url = normalizeUrlObject(urlLib.parse(opts));
                        opts = {};
                    } else if (_instanceof(opts, urlLib.URL)) {
                        url = normalizeUrlObject(urlLib.parse(opts.toString()));
                        opts = {};
                    } else {
                        var _split = _to_array((opts.path || '').split('?')), pathname = _split[0], searchParts = _split.slice(1);
                        var search = searchParts.length > 0 ? "?".concat(searchParts.join('?')) : '';
                        url = normalizeUrlObject(_object_spread_props(_object_spread({}, opts), {
                            pathname: pathname,
                            search: search
                        }));
                    }
                    opts = _object_spread({
                        headers: {},
                        method: 'GET',
                        cache: true,
                        strictTtl: false,
                        automaticFailover: false
                    }, opts, urlObjectToRequestOptions(url));
                    opts.headers = lowercaseKeys(opts.headers);
                    var ee = new EventEmitter();
                    var normalizedUrlString = normalizeUrl(urlLib.format(url), {
                        stripWWW: false,
                        removeTrailingSlash: false,
                        stripAuthentication: false
                    });
                    var key = "".concat(opts.method, ":").concat(normalizedUrlString);
                    var revalidate = false;
                    var madeRequest = false;
                    var makeRequest = function(opts) {
                        madeRequest = true;
                        var requestErrored = false;
                        var requestErrorCallback;
                        var requestErrorPromise = new Promise(function(resolve) {
                            requestErrorCallback = function() {
                                if (!requestErrored) {
                                    requestErrored = true;
                                    resolve();
                                }
                            };
                        });
                        var handler = function(response) {
                            if (revalidate && !opts.forceRefresh) {
                                response.status = response.statusCode;
                                var revalidatedPolicy = CachePolicy.fromObject(revalidate.cachePolicy).revalidatedPolicy(opts, response);
                                if (!revalidatedPolicy.modified) {
                                    var headers = revalidatedPolicy.policy.responseHeaders();
                                    response = new Response(revalidate.statusCode, headers, revalidate.body, revalidate.url);
                                    response.cachePolicy = revalidatedPolicy.policy;
                                    response.fromCache = true;
                                }
                            }
                            if (!response.fromCache) {
                                response.cachePolicy = new CachePolicy(opts, response, opts);
                                response.fromCache = false;
                            }
                            var clonedResponse;
                            if (opts.cache && response.cachePolicy.storable()) {
                                clonedResponse = cloneResponse(response);
                                var _this1 = _this;
                                _async_to_generator(function() {
                                    var bodyPromise, body, value, ttl, error;
                                    return _ts_generator(this, function(_state) {
                                        switch(_state.label){
                                            case 0:
                                                _state.trys.push([
                                                    0,
                                                    4,
                                                    ,
                                                    5
                                                ]);
                                                bodyPromise = getStream.buffer(response);
                                                return [
                                                    4,
                                                    Promise.race([
                                                        requestErrorPromise,
                                                        new Promise(function(resolve) {
                                                            return response.once('end', resolve);
                                                        })
                                                    ])
                                                ];
                                            case 1:
                                                _state.sent();
                                                if (requestErrored) {
                                                    return [
                                                        2
                                                    ];
                                                }
                                                return [
                                                    4,
                                                    bodyPromise
                                                ];
                                            case 2:
                                                body = _state.sent();
                                                value = {
                                                    cachePolicy: response.cachePolicy.toObject(),
                                                    url: response.url,
                                                    statusCode: response.fromCache ? revalidate.statusCode : response.statusCode,
                                                    body: body
                                                };
                                                ttl = opts.strictTtl ? response.cachePolicy.timeToLive() : undefined;
                                                if (opts.maxTtl) {
                                                    ttl = ttl ? Math.min(ttl, opts.maxTtl) : opts.maxTtl;
                                                }
                                                return [
                                                    4,
                                                    _this1.cache.set(key, value, ttl)
                                                ];
                                            case 3:
                                                _state.sent();
                                                return [
                                                    3,
                                                    5
                                                ];
                                            case 4:
                                                error = _state.sent();
                                                ee.emit('error', new CacheableRequest.CacheError(error));
                                                return [
                                                    3,
                                                    5
                                                ];
                                            case 5:
                                                return [
                                                    2
                                                ];
                                        }
                                    });
                                })();
                            } else if (opts.cache && revalidate) {
                                var _this2 = _this;
                                _async_to_generator(function() {
                                    var error;
                                    return _ts_generator(this, function(_state) {
                                        switch(_state.label){
                                            case 0:
                                                _state.trys.push([
                                                    0,
                                                    2,
                                                    ,
                                                    3
                                                ]);
                                                return [
                                                    4,
                                                    _this2.cache.delete(key)
                                                ];
                                            case 1:
                                                _state.sent();
                                                return [
                                                    3,
                                                    3
                                                ];
                                            case 2:
                                                error = _state.sent();
                                                ee.emit('error', new CacheableRequest.CacheError(error));
                                                return [
                                                    3,
                                                    3
                                                ];
                                            case 3:
                                                return [
                                                    2
                                                ];
                                        }
                                    });
                                })();
                            }
                            ee.emit('response', clonedResponse || response);
                            if (typeof cb === 'function') {
                                cb(clonedResponse || response);
                            }
                        };
                        try {
                            var req = request(opts, handler);
                            req.once('error', requestErrorCallback);
                            req.once('abort', requestErrorCallback);
                            ee.emit('request', req);
                        } catch (error) {
                            ee.emit('error', new CacheableRequest.RequestError(error));
                        }
                    };
                    var _this1 = _this;
                    _async_to_generator(function() {
                        var get, errorHandler, error;
                        return _ts_generator(this, function(_state) {
                            switch(_state.label){
                                case 0:
                                    get = function() {
                                        var _ref = _async_to_generator(function(opts) {
                                            var cacheEntry, _tmp, policy, headers, response;
                                            return _ts_generator(this, function(_state) {
                                                switch(_state.label){
                                                    case 0:
                                                        return [
                                                            4,
                                                            Promise.resolve()
                                                        ];
                                                    case 1:
                                                        _state.sent();
                                                        if (!opts.cache) return [
                                                            3,
                                                            3
                                                        ];
                                                        return [
                                                            4,
                                                            _this1.cache.get(key)
                                                        ];
                                                    case 2:
                                                        _tmp = _state.sent();
                                                        return [
                                                            3,
                                                            4
                                                        ];
                                                    case 3:
                                                        _tmp = undefined;
                                                        _state.label = 4;
                                                    case 4:
                                                        cacheEntry = _tmp;
                                                        if (typeof cacheEntry === 'undefined') {
                                                            return [
                                                                2,
                                                                makeRequest(opts)
                                                            ];
                                                        }
                                                        policy = CachePolicy.fromObject(cacheEntry.cachePolicy);
                                                        if (policy.satisfiesWithoutRevalidation(opts) && !opts.forceRefresh) {
                                                            headers = policy.responseHeaders();
                                                            response = new Response(cacheEntry.statusCode, headers, cacheEntry.body, cacheEntry.url);
                                                            response.cachePolicy = policy;
                                                            response.fromCache = true;
                                                            ee.emit('response', response);
                                                            if (typeof cb === 'function') {
                                                                cb(response);
                                                            }
                                                        } else {
                                                            revalidate = cacheEntry;
                                                            opts.headers = policy.revalidationHeaders(opts);
                                                            makeRequest(opts);
                                                        }
                                                        return [
                                                            2
                                                        ];
                                                }
                                            });
                                        });
                                        return function get(opts) {
                                            return _ref.apply(this, arguments);
                                        };
                                    }();
                                    errorHandler = function(error) {
                                        return ee.emit('error', new CacheableRequest.CacheError(error));
                                    };
                                    _this1.cache.once('error', errorHandler);
                                    ee.on('response', function() {
                                        return _this1.cache.removeListener('error', errorHandler);
                                    });
                                    _state.label = 1;
                                case 1:
                                    _state.trys.push([
                                        1,
                                        3,
                                        ,
                                        4
                                    ]);
                                    return [
                                        4,
                                        get(opts)
                                    ];
                                case 2:
                                    _state.sent();
                                    return [
                                        3,
                                        4
                                    ];
                                case 3:
                                    error = _state.sent();
                                    if (opts.automaticFailover && !madeRequest) {
                                        makeRequest(opts);
                                    }
                                    ee.emit('error', new CacheableRequest.CacheError(error));
                                    return [
                                        3,
                                        4
                                    ];
                                case 4:
                                    return [
                                        2
                                    ];
                            }
                        });
                    })();
                    return ee;
                };
            }
        }
    ]);
    return CacheableRequest;
}();
function urlObjectToRequestOptions(url) {
    var options = _object_spread({}, url);
    options.path = "".concat(url.pathname || '/').concat(url.search || '');
    delete options.pathname;
    delete options.search;
    return options;
}
function normalizeUrlObject(url) {
    // If url was parsed by url.parse or new URL:
    // - hostname will be set
    // - host will be hostname[:port]
    // - port will be set if it was explicit in the parsed string
    // Otherwise, url was from request options:
    // - hostname or host may be set
    // - host shall not have port encoded
    return {
        protocol: url.protocol,
        auth: url.auth,
        hostname: url.hostname || url.host || 'localhost',
        port: url.port,
        pathname: url.pathname,
        search: url.search
    };
}
CacheableRequest.RequestError = /*#__PURE__*/ function(Error1) {
    _inherits(_class, Error1);
    var _super = _create_super(_class);
    function _class(error) {
        _class_call_check(this, _class);
        var _this;
        _this = _super.call(this, error.message);
        _this.name = 'RequestError';
        Object.assign(_assert_this_initialized(_this), error);
        return _this;
    }
    return _class;
}(_wrap_native_super(Error));
CacheableRequest.CacheError = /*#__PURE__*/ function(Error1) {
    _inherits(_class, Error1);
    var _super = _create_super(_class);
    function _class(error) {
        _class_call_check(this, _class);
        var _this;
        _this = _super.call(this, error.message);
        _this.name = 'CacheError';
        Object.assign(_assert_this_initialized(_this), error);
        return _this;
    }
    return _class;
}(_wrap_native_super(Error));
module.exports = CacheableRequest;
