function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
import { Buffer } from 'node:buffer';
import * as Token from 'token-types';
import * as strtok3 from 'strtok3/core';
import { stringToBytes, tarHeaderChecksumMatches, uint32SyncSafeToken } from './util.js';
import { extensions, mimeTypes } from './supported.js';
var minimumBytes = 4100; // A fair amount of file-types are detectable within this range.
export function fileTypeFromStream(stream) {
    return _fileTypeFromStream.apply(this, arguments);
}
function _fileTypeFromStream() {
    _fileTypeFromStream = _async_to_generator(function(stream) {
        var tokenizer;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        strtok3.fromStream(stream)
                    ];
                case 1:
                    tokenizer = _state.sent();
                    _state.label = 2;
                case 2:
                    _state.trys.push([
                        2,
                        ,
                        4,
                        6
                    ]);
                    return [
                        4,
                        fileTypeFromTokenizer(tokenizer)
                    ];
                case 3:
                    return [
                        2,
                        _state.sent()
                    ];
                case 4:
                    return [
                        4,
                        tokenizer.close()
                    ];
                case 5:
                    _state.sent();
                    return [
                        7
                    ];
                case 6:
                    return [
                        2
                    ];
            }
        });
    });
    return _fileTypeFromStream.apply(this, arguments);
}
export function fileTypeFromBuffer(input) {
    return _fileTypeFromBuffer.apply(this, arguments);
}
function _fileTypeFromBuffer() {
    _fileTypeFromBuffer = _async_to_generator(function(input) {
        var buffer;
        return _ts_generator(this, function(_state) {
            if (!(_instanceof(input, Uint8Array) || _instanceof(input, ArrayBuffer))) {
                throw new TypeError("Expected the `input` argument to be of type `Uint8Array` or `Buffer` or `ArrayBuffer`, got `".concat(typeof input === "undefined" ? "undefined" : _type_of(input), "`"));
            }
            buffer = _instanceof(input, Uint8Array) ? input : new Uint8Array(input);
            if (!(buffer && buffer.length > 1)) {
                return [
                    2
                ];
            }
            return [
                2,
                fileTypeFromTokenizer(strtok3.fromBuffer(buffer))
            ];
        });
    });
    return _fileTypeFromBuffer.apply(this, arguments);
}
function _check(buffer, headers, options) {
    options = _object_spread({
        offset: 0
    }, options);
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = headers.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var _step_value = _sliced_to_array(_step.value, 2), index = _step_value[0], header = _step_value[1];
            // If a bitmask is set
            if (options.mask) {
                // If header doesn't equal `buf` with bits masked off
                if (header !== (options.mask[index] & buffer[index + options.offset])) {
                    return false;
                }
            } else if (header !== buffer[index + options.offset]) {
                return false;
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return true;
}
export function fileTypeFromTokenizer(tokenizer) {
    return _fileTypeFromTokenizer.apply(this, arguments);
}
function _fileTypeFromTokenizer() {
    _fileTypeFromTokenizer = _async_to_generator(function(tokenizer) {
        return _ts_generator(this, function(_state) {
            try {
                return [
                    2,
                    new FileTypeParser().parse(tokenizer)
                ];
            } catch (error) {
                if (!_instanceof(error, strtok3.EndOfStreamError)) {
                    throw error;
                }
            }
            return [
                2
            ];
        });
    });
    return _fileTypeFromTokenizer.apply(this, arguments);
}
var FileTypeParser = /*#__PURE__*/ function() {
    "use strict";
    function FileTypeParser() {
        _class_call_check(this, FileTypeParser);
    }
    _create_class(FileTypeParser, [
        {
            key: "check",
            value: function check(header, options) {
                return _check(this.buffer, header, options);
            }
        },
        {
            key: "checkString",
            value: function checkString(header, options) {
                return this.check(stringToBytes(header), options);
            }
        },
        {
            key: "parse",
            value: function parse(tokenizer) {
                var _this = this;
                return _async_to_generator(function() {
                    var id3HeaderLength, zipHeader, type, mimeType, nextHeaderIndex, error, type1, brandMajor, maxBufferSize, buffer, fileType, fileType1, readField, readElement, readChildren, re, docType, string, readChunkHeader, chunk, _, readHeader, header, payload, typeId, type2, jsonSize, header1, json;
                    function _readField() {
                        _readField = _async_to_generator(function() {
                            var msb, mask, ic, id;
                            return _ts_generator(this, function(_state) {
                                switch(_state.label){
                                    case 0:
                                        return [
                                            4,
                                            tokenizer.peekNumber(Token.UINT8)
                                        ];
                                    case 1:
                                        msb = _state.sent();
                                        mask = 0x80;
                                        ic = 0; // 0 = A, 1 = B, 2 = C, 3
                                        // = D
                                        while((msb & mask) === 0 && mask !== 0){
                                            ++ic;
                                            mask >>= 1;
                                        }
                                        id = Buffer.alloc(ic + 1);
                                        return [
                                            4,
                                            tokenizer.readBuffer(id)
                                        ];
                                    case 2:
                                        _state.sent();
                                        return [
                                            2,
                                            id
                                        ];
                                }
                            });
                        });
                        return _readField.apply(this, arguments);
                    }
                    function _readElement() {
                        _readElement = _async_to_generator(function() {
                            var id, lengthField, nrLength;
                            return _ts_generator(this, function(_state) {
                                switch(_state.label){
                                    case 0:
                                        return [
                                            4,
                                            readField()
                                        ];
                                    case 1:
                                        id = _state.sent();
                                        return [
                                            4,
                                            readField()
                                        ];
                                    case 2:
                                        lengthField = _state.sent();
                                        lengthField[0] ^= 0x80 >> lengthField.length - 1;
                                        nrLength = Math.min(6, lengthField.length); // JavaScript can max read 6 bytes integer
                                        return [
                                            2,
                                            {
                                                id: id.readUIntBE(0, id.length),
                                                len: lengthField.readUIntBE(lengthField.length - nrLength, nrLength)
                                            }
                                        ];
                                }
                            });
                        });
                        return _readElement.apply(this, arguments);
                    }
                    function _readChildren() {
                        _readChildren = _async_to_generator(function(children) {
                            var element, rawValue;
                            return _ts_generator(this, function(_state) {
                                switch(_state.label){
                                    case 0:
                                        if (!(children > 0)) return [
                                            3,
                                            5
                                        ];
                                        return [
                                            4,
                                            readElement()
                                        ];
                                    case 1:
                                        element = _state.sent();
                                        if (!(element.id === 0x4282)) return [
                                            3,
                                            3
                                        ];
                                        return [
                                            4,
                                            tokenizer.readToken(new Token.StringType(element.len, 'utf-8'))
                                        ];
                                    case 2:
                                        rawValue = _state.sent();
                                        return [
                                            2,
                                            rawValue.replace(/\00.*$/g, '')
                                        ]; // Return DocType
                                    case 3:
                                        return [
                                            4,
                                            tokenizer.ignore(element.len)
                                        ];
                                    case 4:
                                        _state.sent(); // ignore payload
                                        --children;
                                        return [
                                            3,
                                            0
                                        ];
                                    case 5:
                                        return [
                                            2
                                        ];
                                }
                            });
                        });
                        return _readChildren.apply(this, arguments);
                    }
                    function _readChunkHeader() {
                        _readChunkHeader = _async_to_generator(function() {
                            var _tmp;
                            return _ts_generator(this, function(_state) {
                                switch(_state.label){
                                    case 0:
                                        _tmp = {};
                                        return [
                                            4,
                                            tokenizer.readToken(Token.INT32_BE)
                                        ];
                                    case 1:
                                        _tmp.length = _state.sent();
                                        return [
                                            4,
                                            tokenizer.readToken(new Token.StringType(4, 'binary'))
                                        ];
                                    case 2:
                                        return [
                                            2,
                                            (_tmp.type = _state.sent(), _tmp)
                                        ];
                                }
                            });
                        });
                        return _readChunkHeader.apply(this, arguments);
                    }
                    function _readHeader() {
                        _readHeader = _async_to_generator(function() {
                            var guid, _tmp;
                            return _ts_generator(this, function(_state) {
                                switch(_state.label){
                                    case 0:
                                        guid = Buffer.alloc(16);
                                        return [
                                            4,
                                            tokenizer.readBuffer(guid)
                                        ];
                                    case 1:
                                        _state.sent();
                                        _tmp = {
                                            id: guid
                                        };
                                        return [
                                            4,
                                            tokenizer.readToken(Token.UINT64_LE)
                                        ];
                                    case 2:
                                        return [
                                            2,
                                            (_tmp.size = Number.apply(void 0, [
                                                _state.sent()
                                            ]), _tmp)
                                        ];
                                }
                            });
                        });
                        return _readHeader.apply(this, arguments);
                    }
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _this.buffer = Buffer.alloc(minimumBytes);
                                // Keep reading until EOF if the file size is unknown.
                                if (tokenizer.fileInfo.size === undefined) {
                                    tokenizer.fileInfo.size = Number.MAX_SAFE_INTEGER;
                                }
                                _this.tokenizer = tokenizer;
                                return [
                                    4,
                                    tokenizer.peekBuffer(_this.buffer, {
                                        length: 12,
                                        mayBeLess: true
                                    })
                                ];
                            case 1:
                                _state.sent();
                                // -- 2-byte signatures --
                                if (_this.check([
                                    0x42,
                                    0x4D
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'bmp',
                                            mime: 'image/bmp'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0x0B,
                                    0x77
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'ac3',
                                            mime: 'audio/vnd.dolby.dd-raw'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0x78,
                                    0x01
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'dmg',
                                            mime: 'application/x-apple-diskimage'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0x4D,
                                    0x5A
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'exe',
                                            mime: 'application/x-msdownload'
                                        }
                                    ];
                                }
                                if (!_this.check([
                                    0x25,
                                    0x21
                                ])) return [
                                    3,
                                    3
                                ];
                                return [
                                    4,
                                    tokenizer.peekBuffer(_this.buffer, {
                                        length: 24,
                                        mayBeLess: true
                                    })
                                ];
                            case 2:
                                _state.sent();
                                if (_this.checkString('PS-Adobe-', {
                                    offset: 2
                                }) && _this.checkString(' EPSF-', {
                                    offset: 14
                                })) {
                                    return [
                                        2,
                                        {
                                            ext: 'eps',
                                            mime: 'application/eps'
                                        }
                                    ];
                                }
                                return [
                                    2,
                                    {
                                        ext: 'ps',
                                        mime: 'application/postscript'
                                    }
                                ];
                            case 3:
                                if (_this.check([
                                    0x1F,
                                    0xA0
                                ]) || _this.check([
                                    0x1F,
                                    0x9D
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'Z',
                                            mime: 'application/x-compress'
                                        }
                                    ];
                                }
                                // -- 3-byte signatures --
                                if (_this.check([
                                    0xEF,
                                    0xBB,
                                    0xBF
                                ])) {
                                    // Strip off UTF-8-BOM
                                    _this.tokenizer.ignore(3);
                                    return [
                                        2,
                                        _this.parse(tokenizer)
                                    ];
                                }
                                if (_this.check([
                                    0x47,
                                    0x49,
                                    0x46
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'gif',
                                            mime: 'image/gif'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0xFF,
                                    0xD8,
                                    0xFF
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'jpg',
                                            mime: 'image/jpeg'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0x49,
                                    0x49,
                                    0xBC
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'jxr',
                                            mime: 'image/vnd.ms-photo'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0x1F,
                                    0x8B,
                                    0x8
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'gz',
                                            mime: 'application/gzip'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0x42,
                                    0x5A,
                                    0x68
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'bz2',
                                            mime: 'application/x-bzip2'
                                        }
                                    ];
                                }
                                if (!_this.checkString('ID3')) return [
                                    3,
                                    7
                                ];
                                return [
                                    4,
                                    tokenizer.ignore(6)
                                ];
                            case 4:
                                _state.sent(); // Skip ID3 header until the header size
                                return [
                                    4,
                                    tokenizer.readToken(uint32SyncSafeToken)
                                ];
                            case 5:
                                id3HeaderLength = _state.sent();
                                if (tokenizer.position + id3HeaderLength > tokenizer.fileInfo.size) {
                                    // Guess file type based on ID3 header for backward compatibility
                                    return [
                                        2,
                                        {
                                            ext: 'mp3',
                                            mime: 'audio/mpeg'
                                        }
                                    ];
                                }
                                return [
                                    4,
                                    tokenizer.ignore(id3HeaderLength)
                                ];
                            case 6:
                                _state.sent();
                                return [
                                    2,
                                    fileTypeFromTokenizer(tokenizer)
                                ]; // Skip ID3 header, recursion
                            case 7:
                                // Musepack, SV7
                                if (_this.checkString('MP+')) {
                                    return [
                                        2,
                                        {
                                            ext: 'mpc',
                                            mime: 'audio/x-musepack'
                                        }
                                    ];
                                }
                                if ((_this.buffer[0] === 0x43 || _this.buffer[0] === 0x46) && _this.check([
                                    0x57,
                                    0x53
                                ], {
                                    offset: 1
                                })) {
                                    return [
                                        2,
                                        {
                                            ext: 'swf',
                                            mime: 'application/x-shockwave-flash'
                                        }
                                    ];
                                }
                                // -- 4-byte signatures --
                                if (_this.checkString('FLIF')) {
                                    return [
                                        2,
                                        {
                                            ext: 'flif',
                                            mime: 'image/flif'
                                        }
                                    ];
                                }
                                if (_this.checkString('8BPS')) {
                                    return [
                                        2,
                                        {
                                            ext: 'psd',
                                            mime: 'image/vnd.adobe.photoshop'
                                        }
                                    ];
                                }
                                if (_this.checkString('WEBP', {
                                    offset: 8
                                })) {
                                    return [
                                        2,
                                        {
                                            ext: 'webp',
                                            mime: 'image/webp'
                                        }
                                    ];
                                }
                                // Musepack, SV8
                                if (_this.checkString('MPCK')) {
                                    return [
                                        2,
                                        {
                                            ext: 'mpc',
                                            mime: 'audio/x-musepack'
                                        }
                                    ];
                                }
                                if (_this.checkString('FORM')) {
                                    return [
                                        2,
                                        {
                                            ext: 'aif',
                                            mime: 'audio/aiff'
                                        }
                                    ];
                                }
                                if (_this.checkString('icns', {
                                    offset: 0
                                })) {
                                    return [
                                        2,
                                        {
                                            ext: 'icns',
                                            mime: 'image/icns'
                                        }
                                    ];
                                }
                                if (!_this.check([
                                    0x50,
                                    0x4B,
                                    0x3,
                                    0x4
                                ])) return [
                                    3,
                                    25
                                ];
                                _state.label = 8;
                            case 8:
                                _state.trys.push([
                                    8,
                                    23,
                                    ,
                                    24
                                ]);
                                _state.label = 9;
                            case 9:
                                if (!(tokenizer.position + 30 < tokenizer.fileInfo.size)) return [
                                    3,
                                    22
                                ];
                                return [
                                    4,
                                    tokenizer.readBuffer(_this.buffer, {
                                        length: 30
                                    })
                                ];
                            case 10:
                                _state.sent();
                                // https://en.wikipedia.org/wiki/Zip_(file_format)#File_headers
                                zipHeader = {
                                    compressedSize: _this.buffer.readUInt32LE(18),
                                    uncompressedSize: _this.buffer.readUInt32LE(22),
                                    filenameLength: _this.buffer.readUInt16LE(26),
                                    extraFieldLength: _this.buffer.readUInt16LE(28)
                                };
                                return [
                                    4,
                                    tokenizer.readToken(new Token.StringType(zipHeader.filenameLength, 'utf-8'))
                                ];
                            case 11:
                                zipHeader.filename = _state.sent();
                                return [
                                    4,
                                    tokenizer.ignore(zipHeader.extraFieldLength)
                                ];
                            case 12:
                                _state.sent();
                                // Assumes signed `.xpi` from addons.mozilla.org
                                if (zipHeader.filename === 'META-INF/mozilla.rsa') {
                                    return [
                                        2,
                                        {
                                            ext: 'xpi',
                                            mime: 'application/x-xpinstall'
                                        }
                                    ];
                                }
                                if (zipHeader.filename.endsWith('.rels') || zipHeader.filename.endsWith('.xml')) {
                                    type = zipHeader.filename.split('/')[0];
                                    switch(type){
                                        case '_rels':
                                            break;
                                        case 'word':
                                            return [
                                                2,
                                                {
                                                    ext: 'docx',
                                                    mime: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
                                                }
                                            ];
                                        case 'ppt':
                                            return [
                                                2,
                                                {
                                                    ext: 'pptx',
                                                    mime: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
                                                }
                                            ];
                                        case 'xl':
                                            return [
                                                2,
                                                {
                                                    ext: 'xlsx',
                                                    mime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                                                }
                                            ];
                                        default:
                                            break;
                                    }
                                }
                                if (zipHeader.filename.startsWith('xl/')) {
                                    return [
                                        2,
                                        {
                                            ext: 'xlsx',
                                            mime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                                        }
                                    ];
                                }
                                if (zipHeader.filename.startsWith('3D/') && zipHeader.filename.endsWith('.model')) {
                                    return [
                                        2,
                                        {
                                            ext: '3mf',
                                            mime: 'model/3mf'
                                        }
                                    ];
                                }
                                if (!(zipHeader.filename === 'mimetype' && zipHeader.compressedSize === zipHeader.uncompressedSize)) return [
                                    3,
                                    14
                                ];
                                return [
                                    4,
                                    tokenizer.readToken(new Token.StringType(zipHeader.compressedSize, 'utf-8'))
                                ];
                            case 13:
                                mimeType = _state.sent().trim();
                                switch(mimeType){
                                    case 'application/epub+zip':
                                        return [
                                            2,
                                            {
                                                ext: 'epub',
                                                mime: 'application/epub+zip'
                                            }
                                        ];
                                    case 'application/vnd.oasis.opendocument.text':
                                        return [
                                            2,
                                            {
                                                ext: 'odt',
                                                mime: 'application/vnd.oasis.opendocument.text'
                                            }
                                        ];
                                    case 'application/vnd.oasis.opendocument.spreadsheet':
                                        return [
                                            2,
                                            {
                                                ext: 'ods',
                                                mime: 'application/vnd.oasis.opendocument.spreadsheet'
                                            }
                                        ];
                                    case 'application/vnd.oasis.opendocument.presentation':
                                        return [
                                            2,
                                            {
                                                ext: 'odp',
                                                mime: 'application/vnd.oasis.opendocument.presentation'
                                            }
                                        ];
                                    default:
                                }
                                _state.label = 14;
                            case 14:
                                if (!(zipHeader.compressedSize === 0)) return [
                                    3,
                                    19
                                ];
                                nextHeaderIndex = -1;
                                _state.label = 15;
                            case 15:
                                if (!(nextHeaderIndex < 0 && tokenizer.position < tokenizer.fileInfo.size)) return [
                                    3,
                                    18
                                ];
                                return [
                                    4,
                                    tokenizer.peekBuffer(_this.buffer, {
                                        mayBeLess: true
                                    })
                                ];
                            case 16:
                                _state.sent();
                                nextHeaderIndex = _this.buffer.indexOf('504B0304', 0, 'hex');
                                // Move position to the next header if found, skip the whole buffer otherwise
                                return [
                                    4,
                                    tokenizer.ignore(nextHeaderIndex >= 0 ? nextHeaderIndex : _this.buffer.length)
                                ];
                            case 17:
                                _state.sent();
                                return [
                                    3,
                                    15
                                ];
                            case 18:
                                return [
                                    3,
                                    21
                                ];
                            case 19:
                                return [
                                    4,
                                    tokenizer.ignore(zipHeader.compressedSize)
                                ];
                            case 20:
                                _state.sent();
                                _state.label = 21;
                            case 21:
                                return [
                                    3,
                                    9
                                ];
                            case 22:
                                return [
                                    3,
                                    24
                                ];
                            case 23:
                                error = _state.sent();
                                if (!_instanceof(error, strtok3.EndOfStreamError)) {
                                    throw error;
                                }
                                return [
                                    3,
                                    24
                                ];
                            case 24:
                                return [
                                    2,
                                    {
                                        ext: 'zip',
                                        mime: 'application/zip'
                                    }
                                ];
                            case 25:
                                if (!_this.checkString('OggS')) return [
                                    3,
                                    28
                                ];
                                // This is an OGG container
                                return [
                                    4,
                                    tokenizer.ignore(28)
                                ];
                            case 26:
                                _state.sent();
                                type1 = Buffer.alloc(8);
                                return [
                                    4,
                                    tokenizer.readBuffer(type1)
                                ];
                            case 27:
                                _state.sent();
                                // Needs to be before `ogg` check
                                if (_check(type1, [
                                    0x4F,
                                    0x70,
                                    0x75,
                                    0x73,
                                    0x48,
                                    0x65,
                                    0x61,
                                    0x64
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'opus',
                                            mime: 'audio/opus'
                                        }
                                    ];
                                }
                                // If ' theora' in header.
                                if (_check(type1, [
                                    0x80,
                                    0x74,
                                    0x68,
                                    0x65,
                                    0x6F,
                                    0x72,
                                    0x61
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'ogv',
                                            mime: 'video/ogg'
                                        }
                                    ];
                                }
                                // If '\x01video' in header.
                                if (_check(type1, [
                                    0x01,
                                    0x76,
                                    0x69,
                                    0x64,
                                    0x65,
                                    0x6F,
                                    0x00
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'ogm',
                                            mime: 'video/ogg'
                                        }
                                    ];
                                }
                                // If ' FLAC' in header  https://xiph.org/flac/faq.html
                                if (_check(type1, [
                                    0x7F,
                                    0x46,
                                    0x4C,
                                    0x41,
                                    0x43
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'oga',
                                            mime: 'audio/ogg'
                                        }
                                    ];
                                }
                                // 'Speex  ' in header https://en.wikipedia.org/wiki/Speex
                                if (_check(type1, [
                                    0x53,
                                    0x70,
                                    0x65,
                                    0x65,
                                    0x78,
                                    0x20,
                                    0x20
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'spx',
                                            mime: 'audio/ogg'
                                        }
                                    ];
                                }
                                // If '\x01vorbis' in header
                                if (_check(type1, [
                                    0x01,
                                    0x76,
                                    0x6F,
                                    0x72,
                                    0x62,
                                    0x69,
                                    0x73
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'ogg',
                                            mime: 'audio/ogg'
                                        }
                                    ];
                                }
                                // Default OGG container https://www.iana.org/assignments/media-types/application/ogg
                                return [
                                    2,
                                    {
                                        ext: 'ogx',
                                        mime: 'application/ogg'
                                    }
                                ];
                            case 28:
                                if (_this.check([
                                    0x50,
                                    0x4B
                                ]) && (_this.buffer[2] === 0x3 || _this.buffer[2] === 0x5 || _this.buffer[2] === 0x7) && (_this.buffer[3] === 0x4 || _this.buffer[3] === 0x6 || _this.buffer[3] === 0x8)) {
                                    return [
                                        2,
                                        {
                                            ext: 'zip',
                                            mime: 'application/zip'
                                        }
                                    ];
                                }
                                //
                                // File Type Box (https://en.wikipedia.org/wiki/ISO_base_media_file_format)
                                // It's not required to be first, but it's recommended to be. Almost all ISO base media files start with `ftyp` box.
                                // `ftyp` box must contain a brand major identifier, which must consist of ISO 8859-1 printable characters.
                                // Here we check for 8859-1 printable characters (for simplicity, it's a mask which also catches one non-printable character).
                                if (_this.checkString('ftyp', {
                                    offset: 4
                                }) && (_this.buffer[8] & 0x60) !== 0x00 // Brand major, first character ASCII?
                                ) {
                                    // They all can have MIME `video/mp4` except `application/mp4` special-case which is hard to detect.
                                    // For some cases, we're specific, everything else falls to `video/mp4` with `mp4` extension.
                                    brandMajor = _this.buffer.toString('binary', 8, 12).replace('\0', ' ').trim();
                                    switch(brandMajor){
                                        case 'avif':
                                        case 'avis':
                                            return [
                                                2,
                                                {
                                                    ext: 'avif',
                                                    mime: 'image/avif'
                                                }
                                            ];
                                        case 'mif1':
                                            return [
                                                2,
                                                {
                                                    ext: 'heic',
                                                    mime: 'image/heif'
                                                }
                                            ];
                                        case 'msf1':
                                            return [
                                                2,
                                                {
                                                    ext: 'heic',
                                                    mime: 'image/heif-sequence'
                                                }
                                            ];
                                        case 'heic':
                                        case 'heix':
                                            return [
                                                2,
                                                {
                                                    ext: 'heic',
                                                    mime: 'image/heic'
                                                }
                                            ];
                                        case 'hevc':
                                        case 'hevx':
                                            return [
                                                2,
                                                {
                                                    ext: 'heic',
                                                    mime: 'image/heic-sequence'
                                                }
                                            ];
                                        case 'qt':
                                            return [
                                                2,
                                                {
                                                    ext: 'mov',
                                                    mime: 'video/quicktime'
                                                }
                                            ];
                                        case 'M4V':
                                        case 'M4VH':
                                        case 'M4VP':
                                            return [
                                                2,
                                                {
                                                    ext: 'm4v',
                                                    mime: 'video/x-m4v'
                                                }
                                            ];
                                        case 'M4P':
                                            return [
                                                2,
                                                {
                                                    ext: 'm4p',
                                                    mime: 'video/mp4'
                                                }
                                            ];
                                        case 'M4B':
                                            return [
                                                2,
                                                {
                                                    ext: 'm4b',
                                                    mime: 'audio/mp4'
                                                }
                                            ];
                                        case 'M4A':
                                            return [
                                                2,
                                                {
                                                    ext: 'm4a',
                                                    mime: 'audio/x-m4a'
                                                }
                                            ];
                                        case 'F4V':
                                            return [
                                                2,
                                                {
                                                    ext: 'f4v',
                                                    mime: 'video/mp4'
                                                }
                                            ];
                                        case 'F4P':
                                            return [
                                                2,
                                                {
                                                    ext: 'f4p',
                                                    mime: 'video/mp4'
                                                }
                                            ];
                                        case 'F4A':
                                            return [
                                                2,
                                                {
                                                    ext: 'f4a',
                                                    mime: 'audio/mp4'
                                                }
                                            ];
                                        case 'F4B':
                                            return [
                                                2,
                                                {
                                                    ext: 'f4b',
                                                    mime: 'audio/mp4'
                                                }
                                            ];
                                        case 'crx':
                                            return [
                                                2,
                                                {
                                                    ext: 'cr3',
                                                    mime: 'image/x-canon-cr3'
                                                }
                                            ];
                                        default:
                                            if (brandMajor.startsWith('3g')) {
                                                if (brandMajor.startsWith('3g2')) {
                                                    return [
                                                        2,
                                                        {
                                                            ext: '3g2',
                                                            mime: 'video/3gpp2'
                                                        }
                                                    ];
                                                }
                                                return [
                                                    2,
                                                    {
                                                        ext: '3gp',
                                                        mime: 'video/3gpp'
                                                    }
                                                ];
                                            }
                                            return [
                                                2,
                                                {
                                                    ext: 'mp4',
                                                    mime: 'video/mp4'
                                                }
                                            ];
                                    }
                                }
                                if (_this.checkString('MThd')) {
                                    return [
                                        2,
                                        {
                                            ext: 'mid',
                                            mime: 'audio/midi'
                                        }
                                    ];
                                }
                                if (_this.checkString('wOFF') && (_this.check([
                                    0x00,
                                    0x01,
                                    0x00,
                                    0x00
                                ], {
                                    offset: 4
                                }) || _this.checkString('OTTO', {
                                    offset: 4
                                }))) {
                                    return [
                                        2,
                                        {
                                            ext: 'woff',
                                            mime: 'font/woff'
                                        }
                                    ];
                                }
                                if (_this.checkString('wOF2') && (_this.check([
                                    0x00,
                                    0x01,
                                    0x00,
                                    0x00
                                ], {
                                    offset: 4
                                }) || _this.checkString('OTTO', {
                                    offset: 4
                                }))) {
                                    return [
                                        2,
                                        {
                                            ext: 'woff2',
                                            mime: 'font/woff2'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0xD4,
                                    0xC3,
                                    0xB2,
                                    0xA1
                                ]) || _this.check([
                                    0xA1,
                                    0xB2,
                                    0xC3,
                                    0xD4
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'pcap',
                                            mime: 'application/vnd.tcpdump.pcap'
                                        }
                                    ];
                                }
                                // Sony DSD Stream File (DSF)
                                if (_this.checkString('DSD ')) {
                                    return [
                                        2,
                                        {
                                            ext: 'dsf',
                                            mime: 'audio/x-dsf'
                                        }
                                    ];
                                }
                                if (_this.checkString('LZIP')) {
                                    return [
                                        2,
                                        {
                                            ext: 'lz',
                                            mime: 'application/x-lzip'
                                        }
                                    ];
                                }
                                if (_this.checkString('fLaC')) {
                                    return [
                                        2,
                                        {
                                            ext: 'flac',
                                            mime: 'audio/x-flac'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0x42,
                                    0x50,
                                    0x47,
                                    0xFB
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'bpg',
                                            mime: 'image/bpg'
                                        }
                                    ];
                                }
                                if (_this.checkString('wvpk')) {
                                    return [
                                        2,
                                        {
                                            ext: 'wv',
                                            mime: 'audio/wavpack'
                                        }
                                    ];
                                }
                                if (!_this.checkString('%PDF')) return [
                                    3,
                                    31
                                ];
                                return [
                                    4,
                                    tokenizer.ignore(1350)
                                ];
                            case 29:
                                _state.sent();
                                maxBufferSize = 10 * 1024 * 1024;
                                buffer = Buffer.alloc(Math.min(maxBufferSize, tokenizer.fileInfo.size));
                                return [
                                    4,
                                    tokenizer.readBuffer(buffer, {
                                        mayBeLess: true
                                    })
                                ];
                            case 30:
                                _state.sent();
                                // Check if this is an Adobe Illustrator file
                                if (buffer.includes(Buffer.from('AIPrivateData'))) {
                                    return [
                                        2,
                                        {
                                            ext: 'ai',
                                            mime: 'application/postscript'
                                        }
                                    ];
                                }
                                // Assume this is just a normal PDF
                                return [
                                    2,
                                    {
                                        ext: 'pdf',
                                        mime: 'application/pdf'
                                    }
                                ];
                            case 31:
                                if (_this.check([
                                    0x00,
                                    0x61,
                                    0x73,
                                    0x6D
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'wasm',
                                            mime: 'application/wasm'
                                        }
                                    ];
                                }
                                if (!_this.check([
                                    0x49,
                                    0x49
                                ])) return [
                                    3,
                                    33
                                ];
                                return [
                                    4,
                                    _this.readTiffHeader(false)
                                ];
                            case 32:
                                fileType = _state.sent();
                                if (fileType) {
                                    return [
                                        2,
                                        fileType
                                    ];
                                }
                                _state.label = 33;
                            case 33:
                                if (!_this.check([
                                    0x4D,
                                    0x4D
                                ])) return [
                                    3,
                                    35
                                ];
                                return [
                                    4,
                                    _this.readTiffHeader(true)
                                ];
                            case 34:
                                fileType1 = _state.sent();
                                if (fileType1) {
                                    return [
                                        2,
                                        fileType1
                                    ];
                                }
                                _state.label = 35;
                            case 35:
                                if (_this.checkString('MAC ')) {
                                    return [
                                        2,
                                        {
                                            ext: 'ape',
                                            mime: 'audio/ape'
                                        }
                                    ];
                                }
                                if (!_this.check([
                                    0x1A,
                                    0x45,
                                    0xDF,
                                    0xA3
                                ])) return [
                                    3,
                                    38
                                ];
                                readField = function readField() {
                                    return _readField.apply(this, arguments);
                                };
                                readElement = function readElement() {
                                    return _readElement.apply(this, arguments);
                                };
                                readChildren = function readChildren(children) {
                                    return _readChildren.apply(this, arguments);
                                };
                                return [
                                    4,
                                    readElement()
                                ];
                            case 36:
                                re = _state.sent();
                                return [
                                    4,
                                    readChildren(re.len)
                                ];
                            case 37:
                                docType = _state.sent();
                                switch(docType){
                                    case 'webm':
                                        return [
                                            2,
                                            {
                                                ext: 'webm',
                                                mime: 'video/webm'
                                            }
                                        ];
                                    case 'matroska':
                                        return [
                                            2,
                                            {
                                                ext: 'mkv',
                                                mime: 'video/x-matroska'
                                            }
                                        ];
                                    default:
                                        return [
                                            2
                                        ];
                                }
                                _state.label = 38;
                            case 38:
                                // RIFF file format which might be AVI, WAV, QCP, etc
                                if (_this.check([
                                    0x52,
                                    0x49,
                                    0x46,
                                    0x46
                                ])) {
                                    if (_this.check([
                                        0x41,
                                        0x56,
                                        0x49
                                    ], {
                                        offset: 8
                                    })) {
                                        return [
                                            2,
                                            {
                                                ext: 'avi',
                                                mime: 'video/vnd.avi'
                                            }
                                        ];
                                    }
                                    if (_this.check([
                                        0x57,
                                        0x41,
                                        0x56,
                                        0x45
                                    ], {
                                        offset: 8
                                    })) {
                                        return [
                                            2,
                                            {
                                                ext: 'wav',
                                                mime: 'audio/vnd.wave'
                                            }
                                        ];
                                    }
                                    // QLCM, QCP file
                                    if (_this.check([
                                        0x51,
                                        0x4C,
                                        0x43,
                                        0x4D
                                    ], {
                                        offset: 8
                                    })) {
                                        return [
                                            2,
                                            {
                                                ext: 'qcp',
                                                mime: 'audio/qcelp'
                                            }
                                        ];
                                    }
                                }
                                if (_this.checkString('SQLi')) {
                                    return [
                                        2,
                                        {
                                            ext: 'sqlite',
                                            mime: 'application/x-sqlite3'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0x4E,
                                    0x45,
                                    0x53,
                                    0x1A
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'nes',
                                            mime: 'application/x-nintendo-nes-rom'
                                        }
                                    ];
                                }
                                if (_this.checkString('Cr24')) {
                                    return [
                                        2,
                                        {
                                            ext: 'crx',
                                            mime: 'application/x-google-chrome-extension'
                                        }
                                    ];
                                }
                                if (_this.checkString('MSCF') || _this.checkString('ISc(')) {
                                    return [
                                        2,
                                        {
                                            ext: 'cab',
                                            mime: 'application/vnd.ms-cab-compressed'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0xED,
                                    0xAB,
                                    0xEE,
                                    0xDB
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'rpm',
                                            mime: 'application/x-rpm'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0xC5,
                                    0xD0,
                                    0xD3,
                                    0xC6
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'eps',
                                            mime: 'application/eps'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0x28,
                                    0xB5,
                                    0x2F,
                                    0xFD
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'zst',
                                            mime: 'application/zstd'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0x7F,
                                    0x45,
                                    0x4C,
                                    0x46
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'elf',
                                            mime: 'application/x-elf'
                                        }
                                    ];
                                }
                                // -- 5-byte signatures --
                                if (_this.check([
                                    0x4F,
                                    0x54,
                                    0x54,
                                    0x4F,
                                    0x00
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'otf',
                                            mime: 'font/otf'
                                        }
                                    ];
                                }
                                if (_this.checkString('#!AMR')) {
                                    return [
                                        2,
                                        {
                                            ext: 'amr',
                                            mime: 'audio/amr'
                                        }
                                    ];
                                }
                                if (_this.checkString('{\\rtf')) {
                                    return [
                                        2,
                                        {
                                            ext: 'rtf',
                                            mime: 'application/rtf'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0x46,
                                    0x4C,
                                    0x56,
                                    0x01
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'flv',
                                            mime: 'video/x-flv'
                                        }
                                    ];
                                }
                                if (_this.checkString('IMPM')) {
                                    return [
                                        2,
                                        {
                                            ext: 'it',
                                            mime: 'audio/x-it'
                                        }
                                    ];
                                }
                                if (_this.checkString('-lh0-', {
                                    offset: 2
                                }) || _this.checkString('-lh1-', {
                                    offset: 2
                                }) || _this.checkString('-lh2-', {
                                    offset: 2
                                }) || _this.checkString('-lh3-', {
                                    offset: 2
                                }) || _this.checkString('-lh4-', {
                                    offset: 2
                                }) || _this.checkString('-lh5-', {
                                    offset: 2
                                }) || _this.checkString('-lh6-', {
                                    offset: 2
                                }) || _this.checkString('-lh7-', {
                                    offset: 2
                                }) || _this.checkString('-lzs-', {
                                    offset: 2
                                }) || _this.checkString('-lz4-', {
                                    offset: 2
                                }) || _this.checkString('-lz5-', {
                                    offset: 2
                                }) || _this.checkString('-lhd-', {
                                    offset: 2
                                })) {
                                    return [
                                        2,
                                        {
                                            ext: 'lzh',
                                            mime: 'application/x-lzh-compressed'
                                        }
                                    ];
                                }
                                // MPEG program stream (PS or MPEG-PS)
                                if (_this.check([
                                    0x00,
                                    0x00,
                                    0x01,
                                    0xBA
                                ])) {
                                    //  MPEG-PS, MPEG-1 Part 1
                                    if (_this.check([
                                        0x21
                                    ], {
                                        offset: 4,
                                        mask: [
                                            0xF1
                                        ]
                                    })) {
                                        return [
                                            2,
                                            {
                                                ext: 'mpg',
                                                mime: 'video/MP1S'
                                            }
                                        ];
                                    }
                                    // MPEG-PS, MPEG-2 Part 1
                                    if (_this.check([
                                        0x44
                                    ], {
                                        offset: 4,
                                        mask: [
                                            0xC4
                                        ]
                                    })) {
                                        return [
                                            2,
                                            {
                                                ext: 'mpg',
                                                mime: 'video/MP2P'
                                            }
                                        ];
                                    }
                                }
                                if (_this.checkString('ITSF')) {
                                    return [
                                        2,
                                        {
                                            ext: 'chm',
                                            mime: 'application/vnd.ms-htmlhelp'
                                        }
                                    ];
                                }
                                // -- 6-byte signatures --
                                if (_this.check([
                                    0xFD,
                                    0x37,
                                    0x7A,
                                    0x58,
                                    0x5A,
                                    0x00
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'xz',
                                            mime: 'application/x-xz'
                                        }
                                    ];
                                }
                                if (_this.checkString('<?xml ')) {
                                    return [
                                        2,
                                        {
                                            ext: 'xml',
                                            mime: 'application/xml'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0x37,
                                    0x7A,
                                    0xBC,
                                    0xAF,
                                    0x27,
                                    0x1C
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: '7z',
                                            mime: 'application/x-7z-compressed'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0x52,
                                    0x61,
                                    0x72,
                                    0x21,
                                    0x1A,
                                    0x7
                                ]) && (_this.buffer[6] === 0x0 || _this.buffer[6] === 0x1)) {
                                    return [
                                        2,
                                        {
                                            ext: 'rar',
                                            mime: 'application/x-rar-compressed'
                                        }
                                    ];
                                }
                                if (_this.checkString('solid ')) {
                                    return [
                                        2,
                                        {
                                            ext: 'stl',
                                            mime: 'model/stl'
                                        }
                                    ];
                                }
                                // -- 7-byte signatures --
                                if (_this.checkString('BLENDER')) {
                                    return [
                                        2,
                                        {
                                            ext: 'blend',
                                            mime: 'application/x-blender'
                                        }
                                    ];
                                }
                                if (!_this.checkString('!<arch>')) return [
                                    3,
                                    41
                                ];
                                return [
                                    4,
                                    tokenizer.ignore(8)
                                ];
                            case 39:
                                _state.sent();
                                return [
                                    4,
                                    tokenizer.readToken(new Token.StringType(13, 'ascii'))
                                ];
                            case 40:
                                string = _state.sent();
                                if (string === 'debian-binary') {
                                    return [
                                        2,
                                        {
                                            ext: 'deb',
                                            mime: 'application/x-deb'
                                        }
                                    ];
                                }
                                return [
                                    2,
                                    {
                                        ext: 'ar',
                                        mime: 'application/x-unix-archive'
                                    }
                                ];
                            case 41:
                                if (!_this.check([
                                    0x89,
                                    0x50,
                                    0x4E,
                                    0x47,
                                    0x0D,
                                    0x0A,
                                    0x1A,
                                    0x0A
                                ])) return [
                                    3,
                                    51
                                ];
                                readChunkHeader = function readChunkHeader() {
                                    return _readChunkHeader.apply(this, arguments);
                                };
                                // APNG format (https://wiki.mozilla.org/APNG_Specification)
                                // 1. Find the first IDAT (image data) chunk (49 44 41 54)
                                // 2. Check if there is an "acTL" chunk before the IDAT one (61 63 54 4C)
                                // Offset calculated as follows:
                                // - 8 bytes: PNG signature
                                // - 4 (length) + 4 (chunk type) + 13 (chunk data) + 4 (CRC): IHDR chunk
                                return [
                                    4,
                                    tokenizer.ignore(8)
                                ];
                            case 42:
                                _state.sent(); // ignore PNG signature
                                _state.label = 43;
                            case 43:
                                return [
                                    4,
                                    readChunkHeader()
                                ];
                            case 44:
                                chunk = _state.sent();
                                if (chunk.length < 0) {
                                    return [
                                        2
                                    ]; // Invalid chunk length
                                }
                                _ = chunk.type;
                                switch(_){
                                    case 'IDAT':
                                        return [
                                            3,
                                            45
                                        ];
                                    case 'acTL':
                                        return [
                                            3,
                                            46
                                        ];
                                }
                                return [
                                    3,
                                    47
                                ];
                            case 45:
                                return [
                                    2,
                                    {
                                        ext: 'png',
                                        mime: 'image/png'
                                    }
                                ];
                            case 46:
                                return [
                                    2,
                                    {
                                        ext: 'apng',
                                        mime: 'image/apng'
                                    }
                                ];
                            case 47:
                                return [
                                    4,
                                    tokenizer.ignore(chunk.length + 4)
                                ];
                            case 48:
                                _state.sent(); // Ignore chunk-data + CRC
                                _state.label = 49;
                            case 49:
                                if (tokenizer.position + 8 < tokenizer.fileInfo.size) return [
                                    3,
                                    43
                                ];
                                _state.label = 50;
                            case 50:
                                return [
                                    2,
                                    {
                                        ext: 'png',
                                        mime: 'image/png'
                                    }
                                ];
                            case 51:
                                if (_this.check([
                                    0x41,
                                    0x52,
                                    0x52,
                                    0x4F,
                                    0x57,
                                    0x31,
                                    0x00,
                                    0x00
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'arrow',
                                            mime: 'application/x-apache-arrow'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0x67,
                                    0x6C,
                                    0x54,
                                    0x46,
                                    0x02,
                                    0x00,
                                    0x00,
                                    0x00
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'glb',
                                            mime: 'model/gltf-binary'
                                        }
                                    ];
                                }
                                // `mov` format variants
                                if (_this.check([
                                    0x66,
                                    0x72,
                                    0x65,
                                    0x65
                                ], {
                                    offset: 4
                                }) // `free`
                                 || _this.check([
                                    0x6D,
                                    0x64,
                                    0x61,
                                    0x74
                                ], {
                                    offset: 4
                                }) // `mdat` MJPEG
                                 || _this.check([
                                    0x6D,
                                    0x6F,
                                    0x6F,
                                    0x76
                                ], {
                                    offset: 4
                                }) // `moov`
                                 || _this.check([
                                    0x77,
                                    0x69,
                                    0x64,
                                    0x65
                                ], {
                                    offset: 4
                                }) // `wide`
                                ) {
                                    return [
                                        2,
                                        {
                                            ext: 'mov',
                                            mime: 'video/quicktime'
                                        }
                                    ];
                                }
                                // -- 9-byte signatures --
                                if (_this.check([
                                    0x49,
                                    0x49,
                                    0x52,
                                    0x4F,
                                    0x08,
                                    0x00,
                                    0x00,
                                    0x00,
                                    0x18
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'orf',
                                            mime: 'image/x-olympus-orf'
                                        }
                                    ];
                                }
                                if (_this.checkString('gimp xcf ')) {
                                    return [
                                        2,
                                        {
                                            ext: 'xcf',
                                            mime: 'image/x-xcf'
                                        }
                                    ];
                                }
                                // -- 12-byte signatures --
                                if (_this.check([
                                    0x49,
                                    0x49,
                                    0x55,
                                    0x00,
                                    0x18,
                                    0x00,
                                    0x00,
                                    0x00,
                                    0x88,
                                    0xE7,
                                    0x74,
                                    0xD8
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'rw2',
                                            mime: 'image/x-panasonic-rw2'
                                        }
                                    ];
                                }
                                if (!_this.check([
                                    0x30,
                                    0x26,
                                    0xB2,
                                    0x75,
                                    0x8E,
                                    0x66,
                                    0xCF,
                                    0x11,
                                    0xA6,
                                    0xD9
                                ])) return [
                                    3,
                                    59
                                ];
                                readHeader = function readHeader() {
                                    return _readHeader.apply(this, arguments);
                                };
                                return [
                                    4,
                                    tokenizer.ignore(30)
                                ];
                            case 52:
                                _state.sent();
                                _state.label = 53;
                            case 53:
                                if (!(tokenizer.position + 24 < tokenizer.fileInfo.size)) return [
                                    3,
                                    58
                                ];
                                return [
                                    4,
                                    readHeader()
                                ];
                            case 54:
                                header = _state.sent();
                                payload = header.size - 24;
                                if (!_check(header.id, [
                                    0x91,
                                    0x07,
                                    0xDC,
                                    0xB7,
                                    0xB7,
                                    0xA9,
                                    0xCF,
                                    0x11,
                                    0x8E,
                                    0xE6,
                                    0x00,
                                    0xC0,
                                    0x0C,
                                    0x20,
                                    0x53,
                                    0x65
                                ])) return [
                                    3,
                                    56
                                ];
                                // Sync on Stream-Properties-Object (B7DC0791-A9B7-11CF-8EE6-00C00C205365)
                                typeId = Buffer.alloc(16);
                                return [
                                    4,
                                    tokenizer.readBuffer(typeId)
                                ];
                            case 55:
                                payload -= _state.sent();
                                if (_check(typeId, [
                                    0x40,
                                    0x9E,
                                    0x69,
                                    0xF8,
                                    0x4D,
                                    0x5B,
                                    0xCF,
                                    0x11,
                                    0xA8,
                                    0xFD,
                                    0x00,
                                    0x80,
                                    0x5F,
                                    0x5C,
                                    0x44,
                                    0x2B
                                ])) {
                                    // Found audio:
                                    return [
                                        2,
                                        {
                                            ext: 'asf',
                                            mime: 'audio/x-ms-asf'
                                        }
                                    ];
                                }
                                if (_check(typeId, [
                                    0xC0,
                                    0xEF,
                                    0x19,
                                    0xBC,
                                    0x4D,
                                    0x5B,
                                    0xCF,
                                    0x11,
                                    0xA8,
                                    0xFD,
                                    0x00,
                                    0x80,
                                    0x5F,
                                    0x5C,
                                    0x44,
                                    0x2B
                                ])) {
                                    // Found video:
                                    return [
                                        2,
                                        {
                                            ext: 'asf',
                                            mime: 'video/x-ms-asf'
                                        }
                                    ];
                                }
                                return [
                                    3,
                                    58
                                ];
                            case 56:
                                return [
                                    4,
                                    tokenizer.ignore(payload)
                                ];
                            case 57:
                                _state.sent();
                                return [
                                    3,
                                    53
                                ];
                            case 58:
                                // Default to ASF generic extension
                                return [
                                    2,
                                    {
                                        ext: 'asf',
                                        mime: 'application/vnd.ms-asf'
                                    }
                                ];
                            case 59:
                                if (_this.check([
                                    0xAB,
                                    0x4B,
                                    0x54,
                                    0x58,
                                    0x20,
                                    0x31,
                                    0x31,
                                    0xBB,
                                    0x0D,
                                    0x0A,
                                    0x1A,
                                    0x0A
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'ktx',
                                            mime: 'image/ktx'
                                        }
                                    ];
                                }
                                if ((_this.check([
                                    0x7E,
                                    0x10,
                                    0x04
                                ]) || _this.check([
                                    0x7E,
                                    0x18,
                                    0x04
                                ])) && _this.check([
                                    0x30,
                                    0x4D,
                                    0x49,
                                    0x45
                                ], {
                                    offset: 4
                                })) {
                                    return [
                                        2,
                                        {
                                            ext: 'mie',
                                            mime: 'application/x-mie'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0x27,
                                    0x0A,
                                    0x00,
                                    0x00,
                                    0x00,
                                    0x00,
                                    0x00,
                                    0x00,
                                    0x00,
                                    0x00,
                                    0x00,
                                    0x00
                                ], {
                                    offset: 2
                                })) {
                                    return [
                                        2,
                                        {
                                            ext: 'shp',
                                            mime: 'application/x-esri-shape'
                                        }
                                    ];
                                }
                                if (!_this.check([
                                    0x00,
                                    0x00,
                                    0x00,
                                    0x0C,
                                    0x6A,
                                    0x50,
                                    0x20,
                                    0x20,
                                    0x0D,
                                    0x0A,
                                    0x87,
                                    0x0A
                                ])) return [
                                    3,
                                    62
                                ];
                                // JPEG-2000 family
                                return [
                                    4,
                                    tokenizer.ignore(20)
                                ];
                            case 60:
                                _state.sent();
                                return [
                                    4,
                                    tokenizer.readToken(new Token.StringType(4, 'ascii'))
                                ];
                            case 61:
                                type2 = _state.sent();
                                switch(type2){
                                    case 'jp2 ':
                                        return [
                                            2,
                                            {
                                                ext: 'jp2',
                                                mime: 'image/jp2'
                                            }
                                        ];
                                    case 'jpx ':
                                        return [
                                            2,
                                            {
                                                ext: 'jpx',
                                                mime: 'image/jpx'
                                            }
                                        ];
                                    case 'jpm ':
                                        return [
                                            2,
                                            {
                                                ext: 'jpm',
                                                mime: 'image/jpm'
                                            }
                                        ];
                                    case 'mjp2':
                                        return [
                                            2,
                                            {
                                                ext: 'mj2',
                                                mime: 'image/mj2'
                                            }
                                        ];
                                    default:
                                        return [
                                            2
                                        ];
                                }
                                _state.label = 62;
                            case 62:
                                if (_this.check([
                                    0xFF,
                                    0x0A
                                ]) || _this.check([
                                    0x00,
                                    0x00,
                                    0x00,
                                    0x0C,
                                    0x4A,
                                    0x58,
                                    0x4C,
                                    0x20,
                                    0x0D,
                                    0x0A,
                                    0x87,
                                    0x0A
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'jxl',
                                            mime: 'image/jxl'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0xFE,
                                    0xFF
                                ])) {
                                    if (_this.check([
                                        0,
                                        60,
                                        0,
                                        63,
                                        0,
                                        120,
                                        0,
                                        109,
                                        0,
                                        108
                                    ], {
                                        offset: 2
                                    })) {
                                        return [
                                            2,
                                            {
                                                ext: 'xml',
                                                mime: 'application/xml'
                                            }
                                        ];
                                    }
                                    return [
                                        2,
                                        undefined
                                    ]; // Some unknown text based format
                                }
                                // -- Unsafe signatures --
                                if (_this.check([
                                    0x0,
                                    0x0,
                                    0x1,
                                    0xBA
                                ]) || _this.check([
                                    0x0,
                                    0x0,
                                    0x1,
                                    0xB3
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'mpg',
                                            mime: 'video/mpeg'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0x00,
                                    0x01,
                                    0x00,
                                    0x00,
                                    0x00
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'ttf',
                                            mime: 'font/ttf'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0x00,
                                    0x00,
                                    0x01,
                                    0x00
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'ico',
                                            mime: 'image/x-icon'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0x00,
                                    0x00,
                                    0x02,
                                    0x00
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'cur',
                                            mime: 'image/x-icon'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0xD0,
                                    0xCF,
                                    0x11,
                                    0xE0,
                                    0xA1,
                                    0xB1,
                                    0x1A,
                                    0xE1
                                ])) {
                                    // Detected Microsoft Compound File Binary File (MS-CFB) Format.
                                    return [
                                        2,
                                        {
                                            ext: 'cfb',
                                            mime: 'application/x-cfb'
                                        }
                                    ];
                                }
                                // Increase sample size from 12 to 256.
                                return [
                                    4,
                                    tokenizer.peekBuffer(_this.buffer, {
                                        length: Math.min(256, tokenizer.fileInfo.size),
                                        mayBeLess: true
                                    })
                                ];
                            case 63:
                                _state.sent();
                                // -- 15-byte signatures --
                                if (_this.checkString('BEGIN:')) {
                                    if (_this.checkString('VCARD', {
                                        offset: 6
                                    })) {
                                        return [
                                            2,
                                            {
                                                ext: 'vcf',
                                                mime: 'text/vcard'
                                            }
                                        ];
                                    }
                                    if (_this.checkString('VCALENDAR', {
                                        offset: 6
                                    })) {
                                        return [
                                            2,
                                            {
                                                ext: 'ics',
                                                mime: 'text/calendar'
                                            }
                                        ];
                                    }
                                }
                                // `raf` is here just to keep all the raw image detectors together.
                                if (_this.checkString('FUJIFILMCCD-RAW')) {
                                    return [
                                        2,
                                        {
                                            ext: 'raf',
                                            mime: 'image/x-fujifilm-raf'
                                        }
                                    ];
                                }
                                if (_this.checkString('Extended Module:')) {
                                    return [
                                        2,
                                        {
                                            ext: 'xm',
                                            mime: 'audio/x-xm'
                                        }
                                    ];
                                }
                                if (_this.checkString('Creative Voice File')) {
                                    return [
                                        2,
                                        {
                                            ext: 'voc',
                                            mime: 'audio/x-voc'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0x04,
                                    0x00,
                                    0x00,
                                    0x00
                                ]) && _this.buffer.length >= 16) {
                                    jsonSize = _this.buffer.readUInt32LE(12);
                                    if (jsonSize > 12 && _this.buffer.length >= jsonSize + 16) {
                                        try {
                                            header1 = _this.buffer.slice(16, jsonSize + 16).toString();
                                            json = JSON.parse(header1);
                                            // Check if Pickle is ASAR
                                            if (json.files) {
                                                return [
                                                    2,
                                                    {
                                                        ext: 'asar',
                                                        mime: 'application/x-asar'
                                                    }
                                                ];
                                            }
                                        } catch (e) {}
                                    }
                                }
                                if (_this.check([
                                    0x06,
                                    0x0E,
                                    0x2B,
                                    0x34,
                                    0x02,
                                    0x05,
                                    0x01,
                                    0x01,
                                    0x0D,
                                    0x01,
                                    0x02,
                                    0x01,
                                    0x01,
                                    0x02
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'mxf',
                                            mime: 'application/mxf'
                                        }
                                    ];
                                }
                                if (_this.checkString('SCRM', {
                                    offset: 44
                                })) {
                                    return [
                                        2,
                                        {
                                            ext: 's3m',
                                            mime: 'audio/x-s3m'
                                        }
                                    ];
                                }
                                // Raw MPEG-2 transport stream (188-byte packets)
                                if (_this.check([
                                    0x47
                                ]) && _this.check([
                                    0x47
                                ], {
                                    offset: 188
                                })) {
                                    return [
                                        2,
                                        {
                                            ext: 'mts',
                                            mime: 'video/mp2t'
                                        }
                                    ];
                                }
                                // Blu-ray Disc Audio-Video (BDAV) MPEG-2 transport stream has 4-byte TP_extra_header before each 188-byte packet
                                if (_this.check([
                                    0x47
                                ], {
                                    offset: 4
                                }) && _this.check([
                                    0x47
                                ], {
                                    offset: 196
                                })) {
                                    return [
                                        2,
                                        {
                                            ext: 'mts',
                                            mime: 'video/mp2t'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0x42,
                                    0x4F,
                                    0x4F,
                                    0x4B,
                                    0x4D,
                                    0x4F,
                                    0x42,
                                    0x49
                                ], {
                                    offset: 60
                                })) {
                                    return [
                                        2,
                                        {
                                            ext: 'mobi',
                                            mime: 'application/x-mobipocket-ebook'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0x44,
                                    0x49,
                                    0x43,
                                    0x4D
                                ], {
                                    offset: 128
                                })) {
                                    return [
                                        2,
                                        {
                                            ext: 'dcm',
                                            mime: 'application/dicom'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0x4C,
                                    0x00,
                                    0x00,
                                    0x00,
                                    0x01,
                                    0x14,
                                    0x02,
                                    0x00,
                                    0x00,
                                    0x00,
                                    0x00,
                                    0x00,
                                    0xC0,
                                    0x00,
                                    0x00,
                                    0x00,
                                    0x00,
                                    0x00,
                                    0x00,
                                    0x46
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'lnk',
                                            mime: 'application/x.ms.shortcut'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0x62,
                                    0x6F,
                                    0x6F,
                                    0x6B,
                                    0x00,
                                    0x00,
                                    0x00,
                                    0x00,
                                    0x6D,
                                    0x61,
                                    0x72,
                                    0x6B,
                                    0x00,
                                    0x00,
                                    0x00,
                                    0x00
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'alias',
                                            mime: 'application/x.apple.alias'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0x4C,
                                    0x50
                                ], {
                                    offset: 34
                                }) && (_this.check([
                                    0x00,
                                    0x00,
                                    0x01
                                ], {
                                    offset: 8
                                }) || _this.check([
                                    0x01,
                                    0x00,
                                    0x02
                                ], {
                                    offset: 8
                                }) || _this.check([
                                    0x02,
                                    0x00,
                                    0x02
                                ], {
                                    offset: 8
                                }))) {
                                    return [
                                        2,
                                        {
                                            ext: 'eot',
                                            mime: 'application/vnd.ms-fontobject'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0x06,
                                    0x06,
                                    0xED,
                                    0xF5,
                                    0xD8,
                                    0x1D,
                                    0x46,
                                    0xE5,
                                    0xBD,
                                    0x31,
                                    0xEF,
                                    0xE7,
                                    0xFE,
                                    0x74,
                                    0xB7,
                                    0x1D
                                ])) {
                                    return [
                                        2,
                                        {
                                            ext: 'indd',
                                            mime: 'application/x-indesign'
                                        }
                                    ];
                                }
                                // Increase sample size from 256 to 512
                                return [
                                    4,
                                    tokenizer.peekBuffer(_this.buffer, {
                                        length: Math.min(512, tokenizer.fileInfo.size),
                                        mayBeLess: true
                                    })
                                ];
                            case 64:
                                _state.sent();
                                // Requires a buffer size of 512 bytes
                                if (tarHeaderChecksumMatches(_this.buffer)) {
                                    return [
                                        2,
                                        {
                                            ext: 'tar',
                                            mime: 'application/x-tar'
                                        }
                                    ];
                                }
                                if (_this.check([
                                    0xFF,
                                    0xFE
                                ])) {
                                    if (_this.check([
                                        60,
                                        0,
                                        63,
                                        0,
                                        120,
                                        0,
                                        109,
                                        0,
                                        108,
                                        0
                                    ], {
                                        offset: 2
                                    })) {
                                        return [
                                            2,
                                            {
                                                ext: 'xml',
                                                mime: 'application/xml'
                                            }
                                        ];
                                    }
                                    if (_this.check([
                                        0xFF,
                                        0x0E,
                                        0x53,
                                        0x00,
                                        0x6B,
                                        0x00,
                                        0x65,
                                        0x00,
                                        0x74,
                                        0x00,
                                        0x63,
                                        0x00,
                                        0x68,
                                        0x00,
                                        0x55,
                                        0x00,
                                        0x70,
                                        0x00,
                                        0x20,
                                        0x00,
                                        0x4D,
                                        0x00,
                                        0x6F,
                                        0x00,
                                        0x64,
                                        0x00,
                                        0x65,
                                        0x00,
                                        0x6C,
                                        0x00
                                    ], {
                                        offset: 2
                                    })) {
                                        return [
                                            2,
                                            {
                                                ext: 'skp',
                                                mime: 'application/vnd.sketchup.skp'
                                            }
                                        ];
                                    }
                                    return [
                                        2,
                                        undefined
                                    ]; // Some text based format
                                }
                                if (_this.checkString('-----BEGIN PGP MESSAGE-----')) {
                                    return [
                                        2,
                                        {
                                            ext: 'pgp',
                                            mime: 'application/pgp-encrypted'
                                        }
                                    ];
                                }
                                // Check MPEG 1 or 2 Layer 3 header, or 'layer 0' for ADTS (MPEG sync-word 0xFFE)
                                if (_this.buffer.length >= 2 && _this.check([
                                    0xFF,
                                    0xE0
                                ], {
                                    offset: 0,
                                    mask: [
                                        0xFF,
                                        0xE0
                                    ]
                                })) {
                                    if (_this.check([
                                        0x10
                                    ], {
                                        offset: 1,
                                        mask: [
                                            0x16
                                        ]
                                    })) {
                                        // Check for (ADTS) MPEG-2
                                        if (_this.check([
                                            0x08
                                        ], {
                                            offset: 1,
                                            mask: [
                                                0x08
                                            ]
                                        })) {
                                            return [
                                                2,
                                                {
                                                    ext: 'aac',
                                                    mime: 'audio/aac'
                                                }
                                            ];
                                        }
                                        // Must be (ADTS) MPEG-4
                                        return [
                                            2,
                                            {
                                                ext: 'aac',
                                                mime: 'audio/aac'
                                            }
                                        ];
                                    }
                                    // MPEG 1 or 2 Layer 3 header
                                    // Check for MPEG layer 3
                                    if (_this.check([
                                        0x02
                                    ], {
                                        offset: 1,
                                        mask: [
                                            0x06
                                        ]
                                    })) {
                                        return [
                                            2,
                                            {
                                                ext: 'mp3',
                                                mime: 'audio/mpeg'
                                            }
                                        ];
                                    }
                                    // Check for MPEG layer 2
                                    if (_this.check([
                                        0x04
                                    ], {
                                        offset: 1,
                                        mask: [
                                            0x06
                                        ]
                                    })) {
                                        return [
                                            2,
                                            {
                                                ext: 'mp2',
                                                mime: 'audio/mpeg'
                                            }
                                        ];
                                    }
                                    // Check for MPEG layer 1
                                    if (_this.check([
                                        0x06
                                    ], {
                                        offset: 1,
                                        mask: [
                                            0x06
                                        ]
                                    })) {
                                        return [
                                            2,
                                            {
                                                ext: 'mp1',
                                                mime: 'audio/mpeg'
                                            }
                                        ];
                                    }
                                }
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "readTiffTag",
            value: function readTiffTag(bigEndian) {
                var _this = this;
                return _async_to_generator(function() {
                    var tagId;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    _this.tokenizer.readToken(bigEndian ? Token.UINT16_BE : Token.UINT16_LE)
                                ];
                            case 1:
                                tagId = _state.sent();
                                _this.tokenizer.ignore(10);
                                switch(tagId){
                                    case 50341:
                                        return [
                                            2,
                                            {
                                                ext: 'arw',
                                                mime: 'image/x-sony-arw'
                                            }
                                        ];
                                    case 50706:
                                        return [
                                            2,
                                            {
                                                ext: 'dng',
                                                mime: 'image/x-adobe-dng'
                                            }
                                        ];
                                    default:
                                }
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "readTiffIFD",
            value: function readTiffIFD(bigEndian) {
                var _this = this;
                return _async_to_generator(function() {
                    var numberOfTags, n, fileType;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    _this.tokenizer.readToken(bigEndian ? Token.UINT16_BE : Token.UINT16_LE)
                                ];
                            case 1:
                                numberOfTags = _state.sent();
                                n = 0;
                                _state.label = 2;
                            case 2:
                                if (!(n < numberOfTags)) return [
                                    3,
                                    5
                                ];
                                return [
                                    4,
                                    _this.readTiffTag(bigEndian)
                                ];
                            case 3:
                                fileType = _state.sent();
                                if (fileType) {
                                    return [
                                        2,
                                        fileType
                                    ];
                                }
                                _state.label = 4;
                            case 4:
                                ++n;
                                return [
                                    3,
                                    2
                                ];
                            case 5:
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "readTiffHeader",
            value: function readTiffHeader(bigEndian) {
                var _this = this;
                return _async_to_generator(function() {
                    var version, ifdOffset, fileType;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                version = (bigEndian ? Token.UINT16_BE : Token.UINT16_LE).get(_this.buffer, 2);
                                ifdOffset = (bigEndian ? Token.UINT32_BE : Token.UINT32_LE).get(_this.buffer, 4);
                                if (!(version === 42)) return [
                                    3,
                                    3
                                ];
                                // TIFF file header
                                if (ifdOffset >= 6) {
                                    if (_this.checkString('CR', {
                                        offset: 8
                                    })) {
                                        return [
                                            2,
                                            {
                                                ext: 'cr2',
                                                mime: 'image/x-canon-cr2'
                                            }
                                        ];
                                    }
                                    if (ifdOffset >= 8 && (_this.check([
                                        0x1C,
                                        0x00,
                                        0xFE,
                                        0x00
                                    ], {
                                        offset: 8
                                    }) || _this.check([
                                        0x1F,
                                        0x00,
                                        0x0B,
                                        0x00
                                    ], {
                                        offset: 8
                                    }))) {
                                        return [
                                            2,
                                            {
                                                ext: 'nef',
                                                mime: 'image/x-nikon-nef'
                                            }
                                        ];
                                    }
                                }
                                return [
                                    4,
                                    _this.tokenizer.ignore(ifdOffset)
                                ];
                            case 1:
                                _state.sent();
                                return [
                                    4,
                                    _this.readTiffIFD(false)
                                ];
                            case 2:
                                fileType = _state.sent();
                                return [
                                    2,
                                    fileType ? fileType : {
                                        ext: 'tif',
                                        mime: 'image/tiff'
                                    }
                                ];
                            case 3:
                                if (version === 43) {
                                    return [
                                        2,
                                        {
                                            ext: 'tif',
                                            mime: 'image/tiff'
                                        }
                                    ];
                                }
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return FileTypeParser;
}();
export function fileTypeStream(readableStream) {
    return _fileTypeStream.apply(this, arguments);
}
function _fileTypeStream() {
    _fileTypeStream = _async_to_generator(function(readableStream) {
        var _ref, _ref_sampleSize, sampleSize, _ref1, stream;
        var _arguments = arguments;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _ref = _arguments.length > 1 && _arguments[1] !== void 0 ? _arguments[1] : {}, _ref_sampleSize = _ref.sampleSize, sampleSize = _ref_sampleSize === void 0 ? minimumBytes : _ref_sampleSize;
                    return [
                        4,
                        import('node:stream')
                    ];
                case 1:
                    _ref1 = _state.sent(), stream = _ref1.default;
                    return [
                        2,
                        new Promise(function(resolve, reject) {
                            readableStream.on('error', reject);
                            readableStream.once('readable', function() {
                                _async_to_generator(function() {
                                    var pass, outputStream, chunk, fileType, error, error1;
                                    return _ts_generator(this, function(_state) {
                                        switch(_state.label){
                                            case 0:
                                                _state.trys.push([
                                                    0,
                                                    5,
                                                    ,
                                                    6
                                                ]);
                                                // Set up output stream
                                                pass = new stream.PassThrough();
                                                outputStream = stream.pipeline ? stream.pipeline(readableStream, pass, function() {}) : readableStream.pipe(pass);
                                                // Read the input stream and detect the filetype
                                                chunk = readableStream.read(sampleSize) || readableStream.read() || Buffer.alloc(0);
                                                _state.label = 1;
                                            case 1:
                                                _state.trys.push([
                                                    1,
                                                    3,
                                                    ,
                                                    4
                                                ]);
                                                return [
                                                    4,
                                                    fileTypeFromBuffer(chunk)
                                                ];
                                            case 2:
                                                fileType = _state.sent();
                                                pass.fileType = fileType;
                                                return [
                                                    3,
                                                    4
                                                ];
                                            case 3:
                                                error = _state.sent();
                                                if (_instanceof(error, strtok3.EndOfStreamError)) {
                                                    pass.fileType = undefined;
                                                } else {
                                                    reject(error);
                                                }
                                                return [
                                                    3,
                                                    4
                                                ];
                                            case 4:
                                                resolve(outputStream);
                                                return [
                                                    3,
                                                    6
                                                ];
                                            case 5:
                                                error1 = _state.sent();
                                                reject(error1);
                                                return [
                                                    3,
                                                    6
                                                ];
                                            case 6:
                                                return [
                                                    2
                                                ];
                                        }
                                    });
                                })();
                            });
                        })
                    ];
            }
        });
    });
    return _fileTypeStream.apply(this, arguments);
}
export var supportedExtensions = new Set(extensions);
export var supportedMimeTypes = new Set(mimeTypes);
